
18.12.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033f0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003588  08003588  00013588  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080035bc  080035bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080035bc  080035bc  000135bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080035c4  080035c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080035c4  080035c4  000135c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080035c8  080035c8  000135c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080035cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  2000000c  080035d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  080035d8  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b60d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001853  00000000  00000000  0002b649  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b80  00000000  00000000  0002cea0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ad8  00000000  00000000  0002da20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000162af  00000000  00000000  0002e4f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000088f8  00000000  00000000  000447a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a417  00000000  00000000  0004d09f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d74b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003048  00000000  00000000  000d7534  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003570 	.word	0x08003570

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	08003570 	.word	0x08003570

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_Init+0x40>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a0d      	ldr	r2, [pc, #52]	; (8000518 <HAL_Init+0x40>)
 80004e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e8:	4b0b      	ldr	r3, [pc, #44]	; (8000518 <HAL_Init+0x40>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	4a0a      	ldr	r2, [pc, #40]	; (8000518 <HAL_Init+0x40>)
 80004ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f4:	4b08      	ldr	r3, [pc, #32]	; (8000518 <HAL_Init+0x40>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <HAL_Init+0x40>)
 80004fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000500:	2003      	movs	r0, #3
 8000502:	f000 f92b 	bl	800075c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000506:	2000      	movs	r0, #0
 8000508:	f000 f808 	bl	800051c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800050c:	f002 fe6e 	bl	80031ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023c00 	.word	0x40023c00

0800051c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x54>)
 8000526:	681a      	ldr	r2, [r3, #0]
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <HAL_InitTick+0x58>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	4619      	mov	r1, r3
 800052e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000532:	fbb3 f3f1 	udiv	r3, r3, r1
 8000536:	fbb2 f3f3 	udiv	r3, r2, r3
 800053a:	4618      	mov	r0, r3
 800053c:	f000 f943 	bl	80007c6 <HAL_SYSTICK_Config>
 8000540:	4603      	mov	r3, r0
 8000542:	2b00      	cmp	r3, #0
 8000544:	d001      	beq.n	800054a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000546:	2301      	movs	r3, #1
 8000548:	e00e      	b.n	8000568 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	2b0f      	cmp	r3, #15
 800054e:	d80a      	bhi.n	8000566 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000550:	2200      	movs	r2, #0
 8000552:	6879      	ldr	r1, [r7, #4]
 8000554:	f04f 30ff 	mov.w	r0, #4294967295
 8000558:	f000 f90b 	bl	8000772 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800055c:	4a06      	ldr	r2, [pc, #24]	; (8000578 <HAL_InitTick+0x5c>)
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000562:	2300      	movs	r3, #0
 8000564:	e000      	b.n	8000568 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000566:	2301      	movs	r3, #1
}
 8000568:	4618      	mov	r0, r3
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000008 	.word	0x20000008
 8000574:	20000004 	.word	0x20000004
 8000578:	20000000 	.word	0x20000000

0800057c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800057c:	b480      	push	{r7}
 800057e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000580:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x20>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	461a      	mov	r2, r3
 8000586:	4b06      	ldr	r3, [pc, #24]	; (80005a0 <HAL_IncTick+0x24>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	4413      	add	r3, r2
 800058c:	4a04      	ldr	r2, [pc, #16]	; (80005a0 <HAL_IncTick+0x24>)
 800058e:	6013      	str	r3, [r2, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	2000002c 	.word	0x2000002c

080005a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
  return uwTick;
 80005a8:	4b03      	ldr	r3, [pc, #12]	; (80005b8 <HAL_GetTick+0x14>)
 80005aa:	681b      	ldr	r3, [r3, #0]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	2000002c 	.word	0x2000002c

080005bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	f003 0307 	and.w	r3, r3, #7
 80005ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005cc:	4b0c      	ldr	r3, [pc, #48]	; (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005ce:	68db      	ldr	r3, [r3, #12]
 80005d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005d2:	68ba      	ldr	r2, [r7, #8]
 80005d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d8:	4013      	ands	r3, r2
 80005da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005e0:	68bb      	ldr	r3, [r7, #8]
 80005e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ee:	4a04      	ldr	r2, [pc, #16]	; (8000600 <__NVIC_SetPriorityGrouping+0x44>)
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	60d3      	str	r3, [r2, #12]
}
 80005f4:	bf00      	nop
 80005f6:	3714      	adds	r7, #20
 80005f8:	46bd      	mov	sp, r7
 80005fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fe:	4770      	bx	lr
 8000600:	e000ed00 	.word	0xe000ed00

08000604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <__NVIC_GetPriorityGrouping+0x18>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	0a1b      	lsrs	r3, r3, #8
 800060e:	f003 0307 	and.w	r3, r3, #7
}
 8000612:	4618      	mov	r0, r3
 8000614:	46bd      	mov	sp, r7
 8000616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061a:	4770      	bx	lr
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000620:	b480      	push	{r7}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800062a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062e:	2b00      	cmp	r3, #0
 8000630:	db0b      	blt.n	800064a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000632:	79fb      	ldrb	r3, [r7, #7]
 8000634:	f003 021f 	and.w	r2, r3, #31
 8000638:	4907      	ldr	r1, [pc, #28]	; (8000658 <__NVIC_EnableIRQ+0x38>)
 800063a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063e:	095b      	lsrs	r3, r3, #5
 8000640:	2001      	movs	r0, #1
 8000642:	fa00 f202 	lsl.w	r2, r0, r2
 8000646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800064a:	bf00      	nop
 800064c:	370c      	adds	r7, #12
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	e000e100 	.word	0xe000e100

0800065c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	6039      	str	r1, [r7, #0]
 8000666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	db0a      	blt.n	8000686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	b2da      	uxtb	r2, r3
 8000674:	490c      	ldr	r1, [pc, #48]	; (80006a8 <__NVIC_SetPriority+0x4c>)
 8000676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800067a:	0112      	lsls	r2, r2, #4
 800067c:	b2d2      	uxtb	r2, r2
 800067e:	440b      	add	r3, r1
 8000680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000684:	e00a      	b.n	800069c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	b2da      	uxtb	r2, r3
 800068a:	4908      	ldr	r1, [pc, #32]	; (80006ac <__NVIC_SetPriority+0x50>)
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	f003 030f 	and.w	r3, r3, #15
 8000692:	3b04      	subs	r3, #4
 8000694:	0112      	lsls	r2, r2, #4
 8000696:	b2d2      	uxtb	r2, r2
 8000698:	440b      	add	r3, r1
 800069a:	761a      	strb	r2, [r3, #24]
}
 800069c:	bf00      	nop
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr
 80006a8:	e000e100 	.word	0xe000e100
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b089      	sub	sp, #36	; 0x24
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	60f8      	str	r0, [r7, #12]
 80006b8:	60b9      	str	r1, [r7, #8]
 80006ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	f1c3 0307 	rsb	r3, r3, #7
 80006ca:	2b04      	cmp	r3, #4
 80006cc:	bf28      	it	cs
 80006ce:	2304      	movcs	r3, #4
 80006d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	3304      	adds	r3, #4
 80006d6:	2b06      	cmp	r3, #6
 80006d8:	d902      	bls.n	80006e0 <NVIC_EncodePriority+0x30>
 80006da:	69fb      	ldr	r3, [r7, #28]
 80006dc:	3b03      	subs	r3, #3
 80006de:	e000      	b.n	80006e2 <NVIC_EncodePriority+0x32>
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e4:	f04f 32ff 	mov.w	r2, #4294967295
 80006e8:	69bb      	ldr	r3, [r7, #24]
 80006ea:	fa02 f303 	lsl.w	r3, r2, r3
 80006ee:	43da      	mvns	r2, r3
 80006f0:	68bb      	ldr	r3, [r7, #8]
 80006f2:	401a      	ands	r2, r3
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f8:	f04f 31ff 	mov.w	r1, #4294967295
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	fa01 f303 	lsl.w	r3, r1, r3
 8000702:	43d9      	mvns	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000708:	4313      	orrs	r3, r2
         );
}
 800070a:	4618      	mov	r0, r3
 800070c:	3724      	adds	r7, #36	; 0x24
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr
	...

08000718 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	3b01      	subs	r3, #1
 8000724:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000728:	d301      	bcc.n	800072e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800072a:	2301      	movs	r3, #1
 800072c:	e00f      	b.n	800074e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072e:	4a0a      	ldr	r2, [pc, #40]	; (8000758 <SysTick_Config+0x40>)
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	3b01      	subs	r3, #1
 8000734:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000736:	210f      	movs	r1, #15
 8000738:	f04f 30ff 	mov.w	r0, #4294967295
 800073c:	f7ff ff8e 	bl	800065c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <SysTick_Config+0x40>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000746:	4b04      	ldr	r3, [pc, #16]	; (8000758 <SysTick_Config+0x40>)
 8000748:	2207      	movs	r2, #7
 800074a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800074c:	2300      	movs	r3, #0
}
 800074e:	4618      	mov	r0, r3
 8000750:	3708      	adds	r7, #8
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	e000e010 	.word	0xe000e010

0800075c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000764:	6878      	ldr	r0, [r7, #4]
 8000766:	f7ff ff29 	bl	80005bc <__NVIC_SetPriorityGrouping>
}
 800076a:	bf00      	nop
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}

08000772 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000772:	b580      	push	{r7, lr}
 8000774:	b086      	sub	sp, #24
 8000776:	af00      	add	r7, sp, #0
 8000778:	4603      	mov	r3, r0
 800077a:	60b9      	str	r1, [r7, #8]
 800077c:	607a      	str	r2, [r7, #4]
 800077e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000780:	2300      	movs	r3, #0
 8000782:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000784:	f7ff ff3e 	bl	8000604 <__NVIC_GetPriorityGrouping>
 8000788:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800078a:	687a      	ldr	r2, [r7, #4]
 800078c:	68b9      	ldr	r1, [r7, #8]
 800078e:	6978      	ldr	r0, [r7, #20]
 8000790:	f7ff ff8e 	bl	80006b0 <NVIC_EncodePriority>
 8000794:	4602      	mov	r2, r0
 8000796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff5d 	bl	800065c <__NVIC_SetPriority>
}
 80007a2:	bf00      	nop
 80007a4:	3718      	adds	r7, #24
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	4603      	mov	r3, r0
 80007b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff31 	bl	8000620 <__NVIC_EnableIRQ>
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ffa2 	bl	8000718 <SysTick_Config>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b089      	sub	sp, #36	; 0x24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
 80007fa:	e159      	b.n	8000ab0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007fc:	2201      	movs	r2, #1
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	4013      	ands	r3, r2
 800080e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	429a      	cmp	r2, r3
 8000816:	f040 8148 	bne.w	8000aaa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	2b01      	cmp	r3, #1
 8000820:	d00b      	beq.n	800083a <HAL_GPIO_Init+0x5a>
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	2b02      	cmp	r3, #2
 8000828:	d007      	beq.n	800083a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800082a:	683b      	ldr	r3, [r7, #0]
 800082c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800082e:	2b11      	cmp	r3, #17
 8000830:	d003      	beq.n	800083a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	2b12      	cmp	r3, #18
 8000838:	d130      	bne.n	800089c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	005b      	lsls	r3, r3, #1
 8000844:	2203      	movs	r2, #3
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43db      	mvns	r3, r3
 800084c:	69ba      	ldr	r2, [r7, #24]
 800084e:	4013      	ands	r3, r2
 8000850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000852:	683b      	ldr	r3, [r7, #0]
 8000854:	68da      	ldr	r2, [r3, #12]
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	005b      	lsls	r3, r3, #1
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	69ba      	ldr	r2, [r7, #24]
 8000860:	4313      	orrs	r3, r2
 8000862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	69ba      	ldr	r2, [r7, #24]
 8000868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	685b      	ldr	r3, [r3, #4]
 800086e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000870:	2201      	movs	r2, #1
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	fa02 f303 	lsl.w	r3, r2, r3
 8000878:	43db      	mvns	r3, r3
 800087a:	69ba      	ldr	r2, [r7, #24]
 800087c:	4013      	ands	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	685b      	ldr	r3, [r3, #4]
 8000884:	091b      	lsrs	r3, r3, #4
 8000886:	f003 0201 	and.w	r2, r3, #1
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	fa02 f303 	lsl.w	r3, r2, r3
 8000890:	69ba      	ldr	r2, [r7, #24]
 8000892:	4313      	orrs	r3, r2
 8000894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	69ba      	ldr	r2, [r7, #24]
 800089a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	2203      	movs	r2, #3
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	43db      	mvns	r3, r3
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	4013      	ands	r3, r2
 80008b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	689a      	ldr	r2, [r3, #8]
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	69ba      	ldr	r2, [r7, #24]
 80008c2:	4313      	orrs	r3, r2
 80008c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	69ba      	ldr	r2, [r7, #24]
 80008ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b02      	cmp	r3, #2
 80008d2:	d003      	beq.n	80008dc <HAL_GPIO_Init+0xfc>
 80008d4:	683b      	ldr	r3, [r7, #0]
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b12      	cmp	r3, #18
 80008da:	d123      	bne.n	8000924 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	08da      	lsrs	r2, r3, #3
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	3208      	adds	r2, #8
 80008e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008ea:	69fb      	ldr	r3, [r7, #28]
 80008ec:	f003 0307 	and.w	r3, r3, #7
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	220f      	movs	r2, #15
 80008f4:	fa02 f303 	lsl.w	r3, r2, r3
 80008f8:	43db      	mvns	r3, r3
 80008fa:	69ba      	ldr	r2, [r7, #24]
 80008fc:	4013      	ands	r3, r2
 80008fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	691a      	ldr	r2, [r3, #16]
 8000904:	69fb      	ldr	r3, [r7, #28]
 8000906:	f003 0307 	and.w	r3, r3, #7
 800090a:	009b      	lsls	r3, r3, #2
 800090c:	fa02 f303 	lsl.w	r3, r2, r3
 8000910:	69ba      	ldr	r2, [r7, #24]
 8000912:	4313      	orrs	r3, r2
 8000914:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	08da      	lsrs	r2, r3, #3
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	3208      	adds	r2, #8
 800091e:	69b9      	ldr	r1, [r7, #24]
 8000920:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	2203      	movs	r2, #3
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f003 0203 	and.w	r2, r3, #3
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	4313      	orrs	r3, r2
 8000950:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000960:	2b00      	cmp	r3, #0
 8000962:	f000 80a2 	beq.w	8000aaa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b56      	ldr	r3, [pc, #344]	; (8000ac4 <HAL_GPIO_Init+0x2e4>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	4a55      	ldr	r2, [pc, #340]	; (8000ac4 <HAL_GPIO_Init+0x2e4>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6453      	str	r3, [r2, #68]	; 0x44
 8000976:	4b53      	ldr	r3, [pc, #332]	; (8000ac4 <HAL_GPIO_Init+0x2e4>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000982:	4a51      	ldr	r2, [pc, #324]	; (8000ac8 <HAL_GPIO_Init+0x2e8>)
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	3302      	adds	r3, #2
 800098a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	f003 0303 	and.w	r3, r3, #3
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	220f      	movs	r2, #15
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	4013      	ands	r3, r2
 80009a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a48      	ldr	r2, [pc, #288]	; (8000acc <HAL_GPIO_Init+0x2ec>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d019      	beq.n	80009e2 <HAL_GPIO_Init+0x202>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a47      	ldr	r2, [pc, #284]	; (8000ad0 <HAL_GPIO_Init+0x2f0>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d013      	beq.n	80009de <HAL_GPIO_Init+0x1fe>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a46      	ldr	r2, [pc, #280]	; (8000ad4 <HAL_GPIO_Init+0x2f4>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d00d      	beq.n	80009da <HAL_GPIO_Init+0x1fa>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a45      	ldr	r2, [pc, #276]	; (8000ad8 <HAL_GPIO_Init+0x2f8>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d007      	beq.n	80009d6 <HAL_GPIO_Init+0x1f6>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a44      	ldr	r2, [pc, #272]	; (8000adc <HAL_GPIO_Init+0x2fc>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d101      	bne.n	80009d2 <HAL_GPIO_Init+0x1f2>
 80009ce:	2304      	movs	r3, #4
 80009d0:	e008      	b.n	80009e4 <HAL_GPIO_Init+0x204>
 80009d2:	2307      	movs	r3, #7
 80009d4:	e006      	b.n	80009e4 <HAL_GPIO_Init+0x204>
 80009d6:	2303      	movs	r3, #3
 80009d8:	e004      	b.n	80009e4 <HAL_GPIO_Init+0x204>
 80009da:	2302      	movs	r3, #2
 80009dc:	e002      	b.n	80009e4 <HAL_GPIO_Init+0x204>
 80009de:	2301      	movs	r3, #1
 80009e0:	e000      	b.n	80009e4 <HAL_GPIO_Init+0x204>
 80009e2:	2300      	movs	r3, #0
 80009e4:	69fa      	ldr	r2, [r7, #28]
 80009e6:	f002 0203 	and.w	r2, r2, #3
 80009ea:	0092      	lsls	r2, r2, #2
 80009ec:	4093      	lsls	r3, r2
 80009ee:	69ba      	ldr	r2, [r7, #24]
 80009f0:	4313      	orrs	r3, r2
 80009f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009f4:	4934      	ldr	r1, [pc, #208]	; (8000ac8 <HAL_GPIO_Init+0x2e8>)
 80009f6:	69fb      	ldr	r3, [r7, #28]
 80009f8:	089b      	lsrs	r3, r3, #2
 80009fa:	3302      	adds	r3, #2
 80009fc:	69ba      	ldr	r2, [r7, #24]
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a02:	4b37      	ldr	r3, [pc, #220]	; (8000ae0 <HAL_GPIO_Init+0x300>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	43db      	mvns	r3, r3
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	4013      	ands	r3, r2
 8000a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	685b      	ldr	r3, [r3, #4]
 8000a16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d003      	beq.n	8000a26 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a1e:	69ba      	ldr	r2, [r7, #24]
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	4313      	orrs	r3, r2
 8000a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a26:	4a2e      	ldr	r2, [pc, #184]	; (8000ae0 <HAL_GPIO_Init+0x300>)
 8000a28:	69bb      	ldr	r3, [r7, #24]
 8000a2a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a2c:	4b2c      	ldr	r3, [pc, #176]	; (8000ae0 <HAL_GPIO_Init+0x300>)
 8000a2e:	685b      	ldr	r3, [r3, #4]
 8000a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	43db      	mvns	r3, r3
 8000a36:	69ba      	ldr	r2, [r7, #24]
 8000a38:	4013      	ands	r3, r2
 8000a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685b      	ldr	r3, [r3, #4]
 8000a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d003      	beq.n	8000a50 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a50:	4a23      	ldr	r2, [pc, #140]	; (8000ae0 <HAL_GPIO_Init+0x300>)
 8000a52:	69bb      	ldr	r3, [r7, #24]
 8000a54:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a56:	4b22      	ldr	r3, [pc, #136]	; (8000ae0 <HAL_GPIO_Init+0x300>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	43db      	mvns	r3, r3
 8000a60:	69ba      	ldr	r2, [r7, #24]
 8000a62:	4013      	ands	r3, r2
 8000a64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	685b      	ldr	r3, [r3, #4]
 8000a6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d003      	beq.n	8000a7a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	693b      	ldr	r3, [r7, #16]
 8000a76:	4313      	orrs	r3, r2
 8000a78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a7a:	4a19      	ldr	r2, [pc, #100]	; (8000ae0 <HAL_GPIO_Init+0x300>)
 8000a7c:	69bb      	ldr	r3, [r7, #24]
 8000a7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a80:	4b17      	ldr	r3, [pc, #92]	; (8000ae0 <HAL_GPIO_Init+0x300>)
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	43db      	mvns	r3, r3
 8000a8a:	69ba      	ldr	r2, [r7, #24]
 8000a8c:	4013      	ands	r3, r2
 8000a8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	685b      	ldr	r3, [r3, #4]
 8000a94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d003      	beq.n	8000aa4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aa4:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <HAL_GPIO_Init+0x300>)
 8000aa6:	69bb      	ldr	r3, [r7, #24]
 8000aa8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aaa:	69fb      	ldr	r3, [r7, #28]
 8000aac:	3301      	adds	r3, #1
 8000aae:	61fb      	str	r3, [r7, #28]
 8000ab0:	69fb      	ldr	r3, [r7, #28]
 8000ab2:	2b0f      	cmp	r3, #15
 8000ab4:	f67f aea2 	bls.w	80007fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3724      	adds	r7, #36	; 0x24
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr
 8000ac4:	40023800 	.word	0x40023800
 8000ac8:	40013800 	.word	0x40013800
 8000acc:	40020000 	.word	0x40020000
 8000ad0:	40020400 	.word	0x40020400
 8000ad4:	40020800 	.word	0x40020800
 8000ad8:	40020c00 	.word	0x40020c00
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	40013c00 	.word	0x40013c00

08000ae4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b083      	sub	sp, #12
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	460b      	mov	r3, r1
 8000aee:	807b      	strh	r3, [r7, #2]
 8000af0:	4613      	mov	r3, r2
 8000af2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000af4:	787b      	ldrb	r3, [r7, #1]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d003      	beq.n	8000b02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000afa:	887a      	ldrh	r2, [r7, #2]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b00:	e003      	b.n	8000b0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b02:	887b      	ldrh	r3, [r7, #2]
 8000b04:	041a      	lsls	r2, r3, #16
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	619a      	str	r2, [r3, #24]
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	4603      	mov	r3, r0
 8000b20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b24:	695a      	ldr	r2, [r3, #20]
 8000b26:	88fb      	ldrh	r3, [r7, #6]
 8000b28:	4013      	ands	r3, r2
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d006      	beq.n	8000b3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b30:	88fb      	ldrh	r3, [r7, #6]
 8000b32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b34:	88fb      	ldrh	r3, [r7, #6]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f000 f806 	bl	8000b48 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40013c00 	.word	0x40013c00

08000b48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
	...

08000b60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b084      	sub	sp, #16
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d101      	bne.n	8000b72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	e11f      	b.n	8000db2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d106      	bne.n	8000b8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	2200      	movs	r2, #0
 8000b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f002 fb58 	bl	800323c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2224      	movs	r2, #36	; 0x24
 8000b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681a      	ldr	r2, [r3, #0]
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f022 0201 	bic.w	r2, r2, #1
 8000ba2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681a      	ldr	r2, [r3, #0]
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bb2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	681a      	ldr	r2, [r3, #0]
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bc2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000bc4:	f000 fd3e 	bl	8001644 <HAL_RCC_GetPCLK1Freq>
 8000bc8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	685b      	ldr	r3, [r3, #4]
 8000bce:	4a7b      	ldr	r2, [pc, #492]	; (8000dbc <HAL_I2C_Init+0x25c>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d807      	bhi.n	8000be4 <HAL_I2C_Init+0x84>
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	4a7a      	ldr	r2, [pc, #488]	; (8000dc0 <HAL_I2C_Init+0x260>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	bf94      	ite	ls
 8000bdc:	2301      	movls	r3, #1
 8000bde:	2300      	movhi	r3, #0
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	e006      	b.n	8000bf2 <HAL_I2C_Init+0x92>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4a77      	ldr	r2, [pc, #476]	; (8000dc4 <HAL_I2C_Init+0x264>)
 8000be8:	4293      	cmp	r3, r2
 8000bea:	bf94      	ite	ls
 8000bec:	2301      	movls	r3, #1
 8000bee:	2300      	movhi	r3, #0
 8000bf0:	b2db      	uxtb	r3, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e0db      	b.n	8000db2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4a72      	ldr	r2, [pc, #456]	; (8000dc8 <HAL_I2C_Init+0x268>)
 8000bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8000c02:	0c9b      	lsrs	r3, r3, #18
 8000c04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	68ba      	ldr	r2, [r7, #8]
 8000c16:	430a      	orrs	r2, r1
 8000c18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	6a1b      	ldr	r3, [r3, #32]
 8000c20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	4a64      	ldr	r2, [pc, #400]	; (8000dbc <HAL_I2C_Init+0x25c>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d802      	bhi.n	8000c34 <HAL_I2C_Init+0xd4>
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	3301      	adds	r3, #1
 8000c32:	e009      	b.n	8000c48 <HAL_I2C_Init+0xe8>
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000c3a:	fb02 f303 	mul.w	r3, r2, r3
 8000c3e:	4a63      	ldr	r2, [pc, #396]	; (8000dcc <HAL_I2C_Init+0x26c>)
 8000c40:	fba2 2303 	umull	r2, r3, r2, r3
 8000c44:	099b      	lsrs	r3, r3, #6
 8000c46:	3301      	adds	r3, #1
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	6812      	ldr	r2, [r2, #0]
 8000c4c:	430b      	orrs	r3, r1
 8000c4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	69db      	ldr	r3, [r3, #28]
 8000c56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8000c5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	4956      	ldr	r1, [pc, #344]	; (8000dbc <HAL_I2C_Init+0x25c>)
 8000c64:	428b      	cmp	r3, r1
 8000c66:	d80d      	bhi.n	8000c84 <HAL_I2C_Init+0x124>
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	1e59      	subs	r1, r3, #1
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c76:	3301      	adds	r3, #1
 8000c78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c7c:	2b04      	cmp	r3, #4
 8000c7e:	bf38      	it	cc
 8000c80:	2304      	movcc	r3, #4
 8000c82:	e04f      	b.n	8000d24 <HAL_I2C_Init+0x1c4>
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	689b      	ldr	r3, [r3, #8]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d111      	bne.n	8000cb0 <HAL_I2C_Init+0x150>
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	1e58      	subs	r0, r3, #1
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	6859      	ldr	r1, [r3, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	005b      	lsls	r3, r3, #1
 8000c98:	440b      	add	r3, r1
 8000c9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c9e:	3301      	adds	r3, #1
 8000ca0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	bf0c      	ite	eq
 8000ca8:	2301      	moveq	r3, #1
 8000caa:	2300      	movne	r3, #0
 8000cac:	b2db      	uxtb	r3, r3
 8000cae:	e012      	b.n	8000cd6 <HAL_I2C_Init+0x176>
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	1e58      	subs	r0, r3, #1
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6859      	ldr	r1, [r3, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	009b      	lsls	r3, r3, #2
 8000cbc:	440b      	add	r3, r1
 8000cbe:	0099      	lsls	r1, r3, #2
 8000cc0:	440b      	add	r3, r1
 8000cc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bf0c      	ite	eq
 8000cd0:	2301      	moveq	r3, #1
 8000cd2:	2300      	movne	r3, #0
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <HAL_I2C_Init+0x17e>
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e022      	b.n	8000d24 <HAL_I2C_Init+0x1c4>
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d10e      	bne.n	8000d04 <HAL_I2C_Init+0x1a4>
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	1e58      	subs	r0, r3, #1
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6859      	ldr	r1, [r3, #4]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	440b      	add	r3, r1
 8000cf4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d02:	e00f      	b.n	8000d24 <HAL_I2C_Init+0x1c4>
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	1e58      	subs	r0, r3, #1
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	6859      	ldr	r1, [r3, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	440b      	add	r3, r1
 8000d12:	0099      	lsls	r1, r3, #2
 8000d14:	440b      	add	r3, r1
 8000d16:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d1a:	3301      	adds	r3, #1
 8000d1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d20:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d24:	6879      	ldr	r1, [r7, #4]
 8000d26:	6809      	ldr	r1, [r1, #0]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	69da      	ldr	r2, [r3, #28]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6a1b      	ldr	r3, [r3, #32]
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	430a      	orrs	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	689b      	ldr	r3, [r3, #8]
 8000d4e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8000d52:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000d56:	687a      	ldr	r2, [r7, #4]
 8000d58:	6911      	ldr	r1, [r2, #16]
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68d2      	ldr	r2, [r2, #12]
 8000d5e:	4311      	orrs	r1, r2
 8000d60:	687a      	ldr	r2, [r7, #4]
 8000d62:	6812      	ldr	r2, [r2, #0]
 8000d64:	430b      	orrs	r3, r1
 8000d66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	68db      	ldr	r3, [r3, #12]
 8000d6e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	695a      	ldr	r2, [r3, #20]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	699b      	ldr	r3, [r3, #24]
 8000d7a:	431a      	orrs	r2, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	430a      	orrs	r2, r1
 8000d82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f042 0201 	orr.w	r2, r2, #1
 8000d92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2220      	movs	r2, #32
 8000d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	2200      	movs	r2, #0
 8000dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	000186a0 	.word	0x000186a0
 8000dc0:	001e847f 	.word	0x001e847f
 8000dc4:	003d08ff 	.word	0x003d08ff
 8000dc8:	431bde83 	.word	0x431bde83
 8000dcc:	10624dd3 	.word	0x10624dd3

08000dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b086      	sub	sp, #24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e25b      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f003 0301 	and.w	r3, r3, #1
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d075      	beq.n	8000eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000dee:	4ba3      	ldr	r3, [pc, #652]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000df0:	689b      	ldr	r3, [r3, #8]
 8000df2:	f003 030c 	and.w	r3, r3, #12
 8000df6:	2b04      	cmp	r3, #4
 8000df8:	d00c      	beq.n	8000e14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000dfa:	4ba0      	ldr	r3, [pc, #640]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000dfc:	689b      	ldr	r3, [r3, #8]
 8000dfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e02:	2b08      	cmp	r3, #8
 8000e04:	d112      	bne.n	8000e2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e06:	4b9d      	ldr	r3, [pc, #628]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e12:	d10b      	bne.n	8000e2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e14:	4b99      	ldr	r3, [pc, #612]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d05b      	beq.n	8000ed8 <HAL_RCC_OscConfig+0x108>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d157      	bne.n	8000ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e236      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000e34:	d106      	bne.n	8000e44 <HAL_RCC_OscConfig+0x74>
 8000e36:	4b91      	ldr	r3, [pc, #580]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a90      	ldr	r2, [pc, #576]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e40:	6013      	str	r3, [r2, #0]
 8000e42:	e01d      	b.n	8000e80 <HAL_RCC_OscConfig+0xb0>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e4c:	d10c      	bne.n	8000e68 <HAL_RCC_OscConfig+0x98>
 8000e4e:	4b8b      	ldr	r3, [pc, #556]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a8a      	ldr	r2, [pc, #552]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000e54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e58:	6013      	str	r3, [r2, #0]
 8000e5a:	4b88      	ldr	r3, [pc, #544]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	4a87      	ldr	r2, [pc, #540]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000e60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e64:	6013      	str	r3, [r2, #0]
 8000e66:	e00b      	b.n	8000e80 <HAL_RCC_OscConfig+0xb0>
 8000e68:	4b84      	ldr	r3, [pc, #528]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a83      	ldr	r2, [pc, #524]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000e6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e72:	6013      	str	r3, [r2, #0]
 8000e74:	4b81      	ldr	r3, [pc, #516]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4a80      	ldr	r2, [pc, #512]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000e7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d013      	beq.n	8000eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e88:	f7ff fb8c 	bl	80005a4 <HAL_GetTick>
 8000e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8e:	e008      	b.n	8000ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e90:	f7ff fb88 	bl	80005a4 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	693b      	ldr	r3, [r7, #16]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	2b64      	cmp	r3, #100	; 0x64
 8000e9c:	d901      	bls.n	8000ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000e9e:	2303      	movs	r3, #3
 8000ea0:	e1fb      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea2:	4b76      	ldr	r3, [pc, #472]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d0f0      	beq.n	8000e90 <HAL_RCC_OscConfig+0xc0>
 8000eae:	e014      	b.n	8000eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eb0:	f7ff fb78 	bl	80005a4 <HAL_GetTick>
 8000eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eb6:	e008      	b.n	8000eca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eb8:	f7ff fb74 	bl	80005a4 <HAL_GetTick>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	2b64      	cmp	r3, #100	; 0x64
 8000ec4:	d901      	bls.n	8000eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e1e7      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000eca:	4b6c      	ldr	r3, [pc, #432]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d1f0      	bne.n	8000eb8 <HAL_RCC_OscConfig+0xe8>
 8000ed6:	e000      	b.n	8000eda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d063      	beq.n	8000fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ee6:	4b65      	ldr	r3, [pc, #404]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	f003 030c 	and.w	r3, r3, #12
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d00b      	beq.n	8000f0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ef2:	4b62      	ldr	r3, [pc, #392]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000efa:	2b08      	cmp	r3, #8
 8000efc:	d11c      	bne.n	8000f38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000efe:	4b5f      	ldr	r3, [pc, #380]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000f00:	685b      	ldr	r3, [r3, #4]
 8000f02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d116      	bne.n	8000f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f0a:	4b5c      	ldr	r3, [pc, #368]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d005      	beq.n	8000f22 <HAL_RCC_OscConfig+0x152>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d001      	beq.n	8000f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e1bb      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f22:	4b56      	ldr	r3, [pc, #344]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	691b      	ldr	r3, [r3, #16]
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	4952      	ldr	r1, [pc, #328]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000f32:	4313      	orrs	r3, r2
 8000f34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f36:	e03a      	b.n	8000fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d020      	beq.n	8000f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f40:	4b4f      	ldr	r3, [pc, #316]	; (8001080 <HAL_RCC_OscConfig+0x2b0>)
 8000f42:	2201      	movs	r2, #1
 8000f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f46:	f7ff fb2d 	bl	80005a4 <HAL_GetTick>
 8000f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f4c:	e008      	b.n	8000f60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f4e:	f7ff fb29 	bl	80005a4 <HAL_GetTick>
 8000f52:	4602      	mov	r2, r0
 8000f54:	693b      	ldr	r3, [r7, #16]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2b02      	cmp	r3, #2
 8000f5a:	d901      	bls.n	8000f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000f5c:	2303      	movs	r3, #3
 8000f5e:	e19c      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f60:	4b46      	ldr	r3, [pc, #280]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f003 0302 	and.w	r3, r3, #2
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d0f0      	beq.n	8000f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f6c:	4b43      	ldr	r3, [pc, #268]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	691b      	ldr	r3, [r3, #16]
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	4940      	ldr	r1, [pc, #256]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	600b      	str	r3, [r1, #0]
 8000f80:	e015      	b.n	8000fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f82:	4b3f      	ldr	r3, [pc, #252]	; (8001080 <HAL_RCC_OscConfig+0x2b0>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f88:	f7ff fb0c 	bl	80005a4 <HAL_GetTick>
 8000f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f8e:	e008      	b.n	8000fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f90:	f7ff fb08 	bl	80005a4 <HAL_GetTick>
 8000f94:	4602      	mov	r2, r0
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	1ad3      	subs	r3, r2, r3
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d901      	bls.n	8000fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e17b      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fa2:	4b36      	ldr	r3, [pc, #216]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d1f0      	bne.n	8000f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d030      	beq.n	800101c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d016      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000fc2:	4b30      	ldr	r3, [pc, #192]	; (8001084 <HAL_RCC_OscConfig+0x2b4>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000fc8:	f7ff faec 	bl	80005a4 <HAL_GetTick>
 8000fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fce:	e008      	b.n	8000fe2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fd0:	f7ff fae8 	bl	80005a4 <HAL_GetTick>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	2b02      	cmp	r3, #2
 8000fdc:	d901      	bls.n	8000fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	e15b      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fe2:	4b26      	ldr	r3, [pc, #152]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8000fe4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fe6:	f003 0302 	and.w	r3, r3, #2
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d0f0      	beq.n	8000fd0 <HAL_RCC_OscConfig+0x200>
 8000fee:	e015      	b.n	800101c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ff0:	4b24      	ldr	r3, [pc, #144]	; (8001084 <HAL_RCC_OscConfig+0x2b4>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ff6:	f7ff fad5 	bl	80005a4 <HAL_GetTick>
 8000ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ffc:	e008      	b.n	8001010 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000ffe:	f7ff fad1 	bl	80005a4 <HAL_GetTick>
 8001002:	4602      	mov	r2, r0
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	1ad3      	subs	r3, r2, r3
 8001008:	2b02      	cmp	r3, #2
 800100a:	d901      	bls.n	8001010 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800100c:	2303      	movs	r3, #3
 800100e:	e144      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001010:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8001012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001014:	f003 0302 	and.w	r3, r3, #2
 8001018:	2b00      	cmp	r3, #0
 800101a:	d1f0      	bne.n	8000ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f003 0304 	and.w	r3, r3, #4
 8001024:	2b00      	cmp	r3, #0
 8001026:	f000 80a0 	beq.w	800116a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800102a:	2300      	movs	r3, #0
 800102c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800102e:	4b13      	ldr	r3, [pc, #76]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001032:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001036:	2b00      	cmp	r3, #0
 8001038:	d10f      	bne.n	800105a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b0f      	ldr	r3, [pc, #60]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	4a0e      	ldr	r2, [pc, #56]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 8001044:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001048:	6413      	str	r3, [r2, #64]	; 0x40
 800104a:	4b0c      	ldr	r3, [pc, #48]	; (800107c <HAL_RCC_OscConfig+0x2ac>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001056:	2301      	movs	r3, #1
 8001058:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_RCC_OscConfig+0x2b8>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001062:	2b00      	cmp	r3, #0
 8001064:	d121      	bne.n	80010aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_RCC_OscConfig+0x2b8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a07      	ldr	r2, [pc, #28]	; (8001088 <HAL_RCC_OscConfig+0x2b8>)
 800106c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001070:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001072:	f7ff fa97 	bl	80005a4 <HAL_GetTick>
 8001076:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001078:	e011      	b.n	800109e <HAL_RCC_OscConfig+0x2ce>
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	42470000 	.word	0x42470000
 8001084:	42470e80 	.word	0x42470e80
 8001088:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800108c:	f7ff fa8a 	bl	80005a4 <HAL_GetTick>
 8001090:	4602      	mov	r2, r0
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e0fd      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800109e:	4b81      	ldr	r3, [pc, #516]	; (80012a4 <HAL_RCC_OscConfig+0x4d4>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d0f0      	beq.n	800108c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d106      	bne.n	80010c0 <HAL_RCC_OscConfig+0x2f0>
 80010b2:	4b7d      	ldr	r3, [pc, #500]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 80010b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010b6:	4a7c      	ldr	r2, [pc, #496]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6713      	str	r3, [r2, #112]	; 0x70
 80010be:	e01c      	b.n	80010fa <HAL_RCC_OscConfig+0x32a>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b05      	cmp	r3, #5
 80010c6:	d10c      	bne.n	80010e2 <HAL_RCC_OscConfig+0x312>
 80010c8:	4b77      	ldr	r3, [pc, #476]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 80010ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010cc:	4a76      	ldr	r2, [pc, #472]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 80010ce:	f043 0304 	orr.w	r3, r3, #4
 80010d2:	6713      	str	r3, [r2, #112]	; 0x70
 80010d4:	4b74      	ldr	r3, [pc, #464]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 80010d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010d8:	4a73      	ldr	r2, [pc, #460]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 80010da:	f043 0301 	orr.w	r3, r3, #1
 80010de:	6713      	str	r3, [r2, #112]	; 0x70
 80010e0:	e00b      	b.n	80010fa <HAL_RCC_OscConfig+0x32a>
 80010e2:	4b71      	ldr	r3, [pc, #452]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 80010e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010e6:	4a70      	ldr	r2, [pc, #448]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 80010e8:	f023 0301 	bic.w	r3, r3, #1
 80010ec:	6713      	str	r3, [r2, #112]	; 0x70
 80010ee:	4b6e      	ldr	r3, [pc, #440]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 80010f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80010f2:	4a6d      	ldr	r2, [pc, #436]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 80010f4:	f023 0304 	bic.w	r3, r3, #4
 80010f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689b      	ldr	r3, [r3, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d015      	beq.n	800112e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001102:	f7ff fa4f 	bl	80005a4 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001108:	e00a      	b.n	8001120 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800110a:	f7ff fa4b 	bl	80005a4 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	f241 3288 	movw	r2, #5000	; 0x1388
 8001118:	4293      	cmp	r3, r2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e0bc      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001120:	4b61      	ldr	r3, [pc, #388]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 8001122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0ee      	beq.n	800110a <HAL_RCC_OscConfig+0x33a>
 800112c:	e014      	b.n	8001158 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800112e:	f7ff fa39 	bl	80005a4 <HAL_GetTick>
 8001132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001134:	e00a      	b.n	800114c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001136:	f7ff fa35 	bl	80005a4 <HAL_GetTick>
 800113a:	4602      	mov	r2, r0
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	f241 3288 	movw	r2, #5000	; 0x1388
 8001144:	4293      	cmp	r3, r2
 8001146:	d901      	bls.n	800114c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e0a6      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800114c:	4b56      	ldr	r3, [pc, #344]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 800114e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d1ee      	bne.n	8001136 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d105      	bne.n	800116a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800115e:	4b52      	ldr	r3, [pc, #328]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 8001160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001162:	4a51      	ldr	r2, [pc, #324]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 8001164:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001168:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	2b00      	cmp	r3, #0
 8001170:	f000 8092 	beq.w	8001298 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001174:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 8001176:	689b      	ldr	r3, [r3, #8]
 8001178:	f003 030c 	and.w	r3, r3, #12
 800117c:	2b08      	cmp	r3, #8
 800117e:	d05c      	beq.n	800123a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	2b02      	cmp	r3, #2
 8001186:	d141      	bne.n	800120c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001188:	4b48      	ldr	r3, [pc, #288]	; (80012ac <HAL_RCC_OscConfig+0x4dc>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118e:	f7ff fa09 	bl	80005a4 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001196:	f7ff fa05 	bl	80005a4 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e078      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011a8:	4b3f      	ldr	r3, [pc, #252]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f0      	bne.n	8001196 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	69da      	ldr	r2, [r3, #28]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6a1b      	ldr	r3, [r3, #32]
 80011bc:	431a      	orrs	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011c2:	019b      	lsls	r3, r3, #6
 80011c4:	431a      	orrs	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011ca:	085b      	lsrs	r3, r3, #1
 80011cc:	3b01      	subs	r3, #1
 80011ce:	041b      	lsls	r3, r3, #16
 80011d0:	431a      	orrs	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011d6:	061b      	lsls	r3, r3, #24
 80011d8:	4933      	ldr	r1, [pc, #204]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011de:	4b33      	ldr	r3, [pc, #204]	; (80012ac <HAL_RCC_OscConfig+0x4dc>)
 80011e0:	2201      	movs	r2, #1
 80011e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011e4:	f7ff f9de 	bl	80005a4 <HAL_GetTick>
 80011e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ea:	e008      	b.n	80011fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011ec:	f7ff f9da 	bl	80005a4 <HAL_GetTick>
 80011f0:	4602      	mov	r2, r0
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	1ad3      	subs	r3, r2, r3
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d901      	bls.n	80011fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80011fa:	2303      	movs	r3, #3
 80011fc:	e04d      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011fe:	4b2a      	ldr	r3, [pc, #168]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d0f0      	beq.n	80011ec <HAL_RCC_OscConfig+0x41c>
 800120a:	e045      	b.n	8001298 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800120c:	4b27      	ldr	r3, [pc, #156]	; (80012ac <HAL_RCC_OscConfig+0x4dc>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001212:	f7ff f9c7 	bl	80005a4 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800121a:	f7ff f9c3 	bl	80005a4 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e036      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f0      	bne.n	800121a <HAL_RCC_OscConfig+0x44a>
 8001238:	e02e      	b.n	8001298 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	2b01      	cmp	r3, #1
 8001240:	d101      	bne.n	8001246 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e029      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001246:	4b18      	ldr	r3, [pc, #96]	; (80012a8 <HAL_RCC_OscConfig+0x4d8>)
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	69db      	ldr	r3, [r3, #28]
 8001256:	429a      	cmp	r2, r3
 8001258:	d11c      	bne.n	8001294 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001264:	429a      	cmp	r2, r3
 8001266:	d115      	bne.n	8001294 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001268:	68fa      	ldr	r2, [r7, #12]
 800126a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800126e:	4013      	ands	r3, r2
 8001270:	687a      	ldr	r2, [r7, #4]
 8001272:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001274:	4293      	cmp	r3, r2
 8001276:	d10d      	bne.n	8001294 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001282:	429a      	cmp	r2, r3
 8001284:	d106      	bne.n	8001294 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001290:	429a      	cmp	r2, r3
 8001292:	d001      	beq.n	8001298 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e000      	b.n	800129a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001298:	2300      	movs	r3, #0
}
 800129a:	4618      	mov	r0, r3
 800129c:	3718      	adds	r7, #24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40007000 	.word	0x40007000
 80012a8:	40023800 	.word	0x40023800
 80012ac:	42470060 	.word	0x42470060

080012b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b084      	sub	sp, #16
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d101      	bne.n	80012c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e0cc      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012c4:	4b68      	ldr	r3, [pc, #416]	; (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 030f 	and.w	r3, r3, #15
 80012cc:	683a      	ldr	r2, [r7, #0]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d90c      	bls.n	80012ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012d2:	4b65      	ldr	r3, [pc, #404]	; (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	b2d2      	uxtb	r2, r2
 80012d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012da:	4b63      	ldr	r3, [pc, #396]	; (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 030f 	and.w	r3, r3, #15
 80012e2:	683a      	ldr	r2, [r7, #0]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d001      	beq.n	80012ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e0b8      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d020      	beq.n	800133a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0304 	and.w	r3, r3, #4
 8001300:	2b00      	cmp	r3, #0
 8001302:	d005      	beq.n	8001310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001304:	4b59      	ldr	r3, [pc, #356]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	4a58      	ldr	r2, [pc, #352]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 800130a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800130e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800131c:	4b53      	ldr	r3, [pc, #332]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	4a52      	ldr	r2, [pc, #328]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001322:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001328:	4b50      	ldr	r3, [pc, #320]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	494d      	ldr	r1, [pc, #308]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	4313      	orrs	r3, r2
 8001338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d044      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d107      	bne.n	800135e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	4b47      	ldr	r3, [pc, #284]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d119      	bne.n	800138e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e07f      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	2b02      	cmp	r3, #2
 8001364:	d003      	beq.n	800136e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800136a:	2b03      	cmp	r3, #3
 800136c:	d107      	bne.n	800137e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800136e:	4b3f      	ldr	r3, [pc, #252]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d109      	bne.n	800138e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e06f      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800137e:	4b3b      	ldr	r3, [pc, #236]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d101      	bne.n	800138e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e067      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800138e:	4b37      	ldr	r3, [pc, #220]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	f023 0203 	bic.w	r2, r3, #3
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	4934      	ldr	r1, [pc, #208]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 800139c:	4313      	orrs	r3, r2
 800139e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013a0:	f7ff f900 	bl	80005a4 <HAL_GetTick>
 80013a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013a6:	e00a      	b.n	80013be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013a8:	f7ff f8fc 	bl	80005a4 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e04f      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f003 020c 	and.w	r2, r3, #12
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	429a      	cmp	r2, r3
 80013ce:	d1eb      	bne.n	80013a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013d0:	4b25      	ldr	r3, [pc, #148]	; (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 030f 	and.w	r3, r3, #15
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	429a      	cmp	r2, r3
 80013dc:	d20c      	bcs.n	80013f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013de:	4b22      	ldr	r3, [pc, #136]	; (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_RCC_ClockConfig+0x1b8>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 030f 	and.w	r3, r3, #15
 80013ee:	683a      	ldr	r2, [r7, #0]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d001      	beq.n	80013f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e032      	b.n	800145e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0304 	and.w	r3, r3, #4
 8001400:	2b00      	cmp	r3, #0
 8001402:	d008      	beq.n	8001416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001404:	4b19      	ldr	r3, [pc, #100]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	4916      	ldr	r1, [pc, #88]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	4313      	orrs	r3, r2
 8001414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0308 	and.w	r3, r3, #8
 800141e:	2b00      	cmp	r3, #0
 8001420:	d009      	beq.n	8001436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001422:	4b12      	ldr	r3, [pc, #72]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	691b      	ldr	r3, [r3, #16]
 800142e:	00db      	lsls	r3, r3, #3
 8001430:	490e      	ldr	r1, [pc, #56]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 8001432:	4313      	orrs	r3, r2
 8001434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001436:	f000 f821 	bl	800147c <HAL_RCC_GetSysClockFreq>
 800143a:	4601      	mov	r1, r0
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	091b      	lsrs	r3, r3, #4
 8001442:	f003 030f 	and.w	r3, r3, #15
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <HAL_RCC_ClockConfig+0x1c0>)
 8001448:	5cd3      	ldrb	r3, [r2, r3]
 800144a:	fa21 f303 	lsr.w	r3, r1, r3
 800144e:	4a09      	ldr	r2, [pc, #36]	; (8001474 <HAL_RCC_ClockConfig+0x1c4>)
 8001450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_RCC_ClockConfig+0x1c8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff f860 	bl	800051c <HAL_InitTick>

  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3710      	adds	r7, #16
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023c00 	.word	0x40023c00
 800146c:	40023800 	.word	0x40023800
 8001470:	080035a4 	.word	0x080035a4
 8001474:	20000008 	.word	0x20000008
 8001478:	20000000 	.word	0x20000000

0800147c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800147c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
 800148a:	2300      	movs	r3, #0
 800148c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001492:	4b63      	ldr	r3, [pc, #396]	; (8001620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	f003 030c 	and.w	r3, r3, #12
 800149a:	2b04      	cmp	r3, #4
 800149c:	d007      	beq.n	80014ae <HAL_RCC_GetSysClockFreq+0x32>
 800149e:	2b08      	cmp	r3, #8
 80014a0:	d008      	beq.n	80014b4 <HAL_RCC_GetSysClockFreq+0x38>
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	f040 80b4 	bne.w	8001610 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014a8:	4b5e      	ldr	r3, [pc, #376]	; (8001624 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80014aa:	60bb      	str	r3, [r7, #8]
       break;
 80014ac:	e0b3      	b.n	8001616 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014ae:	4b5e      	ldr	r3, [pc, #376]	; (8001628 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80014b0:	60bb      	str	r3, [r7, #8]
      break;
 80014b2:	e0b0      	b.n	8001616 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014b4:	4b5a      	ldr	r3, [pc, #360]	; (8001620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014be:	4b58      	ldr	r3, [pc, #352]	; (8001620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d04a      	beq.n	8001560 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014ca:	4b55      	ldr	r3, [pc, #340]	; (8001620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	099b      	lsrs	r3, r3, #6
 80014d0:	f04f 0400 	mov.w	r4, #0
 80014d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	ea03 0501 	and.w	r5, r3, r1
 80014e0:	ea04 0602 	and.w	r6, r4, r2
 80014e4:	4629      	mov	r1, r5
 80014e6:	4632      	mov	r2, r6
 80014e8:	f04f 0300 	mov.w	r3, #0
 80014ec:	f04f 0400 	mov.w	r4, #0
 80014f0:	0154      	lsls	r4, r2, #5
 80014f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014f6:	014b      	lsls	r3, r1, #5
 80014f8:	4619      	mov	r1, r3
 80014fa:	4622      	mov	r2, r4
 80014fc:	1b49      	subs	r1, r1, r5
 80014fe:	eb62 0206 	sbc.w	r2, r2, r6
 8001502:	f04f 0300 	mov.w	r3, #0
 8001506:	f04f 0400 	mov.w	r4, #0
 800150a:	0194      	lsls	r4, r2, #6
 800150c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001510:	018b      	lsls	r3, r1, #6
 8001512:	1a5b      	subs	r3, r3, r1
 8001514:	eb64 0402 	sbc.w	r4, r4, r2
 8001518:	f04f 0100 	mov.w	r1, #0
 800151c:	f04f 0200 	mov.w	r2, #0
 8001520:	00e2      	lsls	r2, r4, #3
 8001522:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001526:	00d9      	lsls	r1, r3, #3
 8001528:	460b      	mov	r3, r1
 800152a:	4614      	mov	r4, r2
 800152c:	195b      	adds	r3, r3, r5
 800152e:	eb44 0406 	adc.w	r4, r4, r6
 8001532:	f04f 0100 	mov.w	r1, #0
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	0262      	lsls	r2, r4, #9
 800153c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001540:	0259      	lsls	r1, r3, #9
 8001542:	460b      	mov	r3, r1
 8001544:	4614      	mov	r4, r2
 8001546:	4618      	mov	r0, r3
 8001548:	4621      	mov	r1, r4
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f04f 0400 	mov.w	r4, #0
 8001550:	461a      	mov	r2, r3
 8001552:	4623      	mov	r3, r4
 8001554:	f7fe fe40 	bl	80001d8 <__aeabi_uldivmod>
 8001558:	4603      	mov	r3, r0
 800155a:	460c      	mov	r4, r1
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	e049      	b.n	80015f4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001560:	4b2f      	ldr	r3, [pc, #188]	; (8001620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	099b      	lsrs	r3, r3, #6
 8001566:	f04f 0400 	mov.w	r4, #0
 800156a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	ea03 0501 	and.w	r5, r3, r1
 8001576:	ea04 0602 	and.w	r6, r4, r2
 800157a:	4629      	mov	r1, r5
 800157c:	4632      	mov	r2, r6
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	f04f 0400 	mov.w	r4, #0
 8001586:	0154      	lsls	r4, r2, #5
 8001588:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800158c:	014b      	lsls	r3, r1, #5
 800158e:	4619      	mov	r1, r3
 8001590:	4622      	mov	r2, r4
 8001592:	1b49      	subs	r1, r1, r5
 8001594:	eb62 0206 	sbc.w	r2, r2, r6
 8001598:	f04f 0300 	mov.w	r3, #0
 800159c:	f04f 0400 	mov.w	r4, #0
 80015a0:	0194      	lsls	r4, r2, #6
 80015a2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80015a6:	018b      	lsls	r3, r1, #6
 80015a8:	1a5b      	subs	r3, r3, r1
 80015aa:	eb64 0402 	sbc.w	r4, r4, r2
 80015ae:	f04f 0100 	mov.w	r1, #0
 80015b2:	f04f 0200 	mov.w	r2, #0
 80015b6:	00e2      	lsls	r2, r4, #3
 80015b8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80015bc:	00d9      	lsls	r1, r3, #3
 80015be:	460b      	mov	r3, r1
 80015c0:	4614      	mov	r4, r2
 80015c2:	195b      	adds	r3, r3, r5
 80015c4:	eb44 0406 	adc.w	r4, r4, r6
 80015c8:	f04f 0100 	mov.w	r1, #0
 80015cc:	f04f 0200 	mov.w	r2, #0
 80015d0:	02a2      	lsls	r2, r4, #10
 80015d2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80015d6:	0299      	lsls	r1, r3, #10
 80015d8:	460b      	mov	r3, r1
 80015da:	4614      	mov	r4, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	4621      	mov	r1, r4
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f04f 0400 	mov.w	r4, #0
 80015e6:	461a      	mov	r2, r3
 80015e8:	4623      	mov	r3, r4
 80015ea:	f7fe fdf5 	bl	80001d8 <__aeabi_uldivmod>
 80015ee:	4603      	mov	r3, r0
 80015f0:	460c      	mov	r4, r1
 80015f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80015f4:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	0c1b      	lsrs	r3, r3, #16
 80015fa:	f003 0303 	and.w	r3, r3, #3
 80015fe:	3301      	adds	r3, #1
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	fbb2 f3f3 	udiv	r3, r2, r3
 800160c:	60bb      	str	r3, [r7, #8]
      break;
 800160e:	e002      	b.n	8001616 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001610:	4b04      	ldr	r3, [pc, #16]	; (8001624 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001612:	60bb      	str	r3, [r7, #8]
      break;
 8001614:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001616:	68bb      	ldr	r3, [r7, #8]
}
 8001618:	4618      	mov	r0, r3
 800161a:	3714      	adds	r7, #20
 800161c:	46bd      	mov	sp, r7
 800161e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001620:	40023800 	.word	0x40023800
 8001624:	00f42400 	.word	0x00f42400
 8001628:	007a1200 	.word	0x007a1200

0800162c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <HAL_RCC_GetHCLKFreq+0x14>)
 8001632:	681b      	ldr	r3, [r3, #0]
}
 8001634:	4618      	mov	r0, r3
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008

08001644 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001648:	f7ff fff0 	bl	800162c <HAL_RCC_GetHCLKFreq>
 800164c:	4601      	mov	r1, r0
 800164e:	4b05      	ldr	r3, [pc, #20]	; (8001664 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001650:	689b      	ldr	r3, [r3, #8]
 8001652:	0a9b      	lsrs	r3, r3, #10
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	4a03      	ldr	r2, [pc, #12]	; (8001668 <HAL_RCC_GetPCLK1Freq+0x24>)
 800165a:	5cd3      	ldrb	r3, [r2, r3]
 800165c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001660:	4618      	mov	r0, r3
 8001662:	bd80      	pop	{r7, pc}
 8001664:	40023800 	.word	0x40023800
 8001668:	080035b4 	.word	0x080035b4

0800166c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001670:	f7ff ffdc 	bl	800162c <HAL_RCC_GetHCLKFreq>
 8001674:	4601      	mov	r1, r0
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	0b5b      	lsrs	r3, r3, #13
 800167c:	f003 0307 	and.w	r3, r3, #7
 8001680:	4a03      	ldr	r2, [pc, #12]	; (8001690 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001682:	5cd3      	ldrb	r3, [r2, r3]
 8001684:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001688:	4618      	mov	r0, r3
 800168a:	bd80      	pop	{r7, pc}
 800168c:	40023800 	.word	0x40023800
 8001690:	080035b4 	.word	0x080035b4

08001694 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e056      	b.n	8001754 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80016b2:	b2db      	uxtb	r3, r3
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d106      	bne.n	80016c6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f001 fe03 	bl	80032cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2202      	movs	r2, #2
 80016ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016dc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685a      	ldr	r2, [r3, #4]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	68db      	ldr	r3, [r3, #12]
 80016ec:	431a      	orrs	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	431a      	orrs	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	699b      	ldr	r3, [r3, #24]
 80016fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001702:	431a      	orrs	r2, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	69db      	ldr	r3, [r3, #28]
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	ea42 0103 	orr.w	r1, r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	430a      	orrs	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	699b      	ldr	r3, [r3, #24]
 8001722:	0c1b      	lsrs	r3, r3, #16
 8001724:	f003 0104 	and.w	r1, r3, #4
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	430a      	orrs	r2, r1
 8001732:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	69da      	ldr	r2, [r3, #28]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001742:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	2200      	movs	r2, #0
 8001748:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2201      	movs	r2, #1
 800174e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001752:	2300      	movs	r3, #0
}
 8001754:	4618      	mov	r0, r3
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	603b      	str	r3, [r7, #0]
 8001768:	4613      	mov	r3, r2
 800176a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_SPI_Transmit+0x22>
 800177a:	2302      	movs	r3, #2
 800177c:	e11e      	b.n	80019bc <HAL_SPI_Transmit+0x260>
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2201      	movs	r2, #1
 8001782:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001786:	f7fe ff0d 	bl	80005a4 <HAL_GetTick>
 800178a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b01      	cmp	r3, #1
 800179a:	d002      	beq.n	80017a2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800179c:	2302      	movs	r3, #2
 800179e:	77fb      	strb	r3, [r7, #31]
    goto error;
 80017a0:	e103      	b.n	80019aa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d002      	beq.n	80017ae <HAL_SPI_Transmit+0x52>
 80017a8:	88fb      	ldrh	r3, [r7, #6]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d102      	bne.n	80017b4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80017ae:	2301      	movs	r3, #1
 80017b0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80017b2:	e0fa      	b.n	80019aa <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2203      	movs	r2, #3
 80017b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	88fa      	ldrh	r2, [r7, #6]
 80017cc:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	88fa      	ldrh	r2, [r7, #6]
 80017d2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2200      	movs	r2, #0
 80017d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2200      	movs	r2, #0
 80017ea:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2200      	movs	r2, #0
 80017f0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017fa:	d107      	bne.n	800180c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800180a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001816:	2b40      	cmp	r3, #64	; 0x40
 8001818:	d007      	beq.n	800182a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001828:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	68db      	ldr	r3, [r3, #12]
 800182e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001832:	d14b      	bne.n	80018cc <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d002      	beq.n	8001842 <HAL_SPI_Transmit+0xe6>
 800183c:	8afb      	ldrh	r3, [r7, #22]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d13e      	bne.n	80018c0 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	881a      	ldrh	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	1c9a      	adds	r2, r3, #2
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800185c:	b29b      	uxth	r3, r3
 800185e:	3b01      	subs	r3, #1
 8001860:	b29a      	uxth	r2, r3
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001866:	e02b      	b.n	80018c0 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b02      	cmp	r3, #2
 8001874:	d112      	bne.n	800189c <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187a:	881a      	ldrh	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001886:	1c9a      	adds	r2, r3, #2
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001890:	b29b      	uxth	r3, r3
 8001892:	3b01      	subs	r3, #1
 8001894:	b29a      	uxth	r2, r3
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	86da      	strh	r2, [r3, #54]	; 0x36
 800189a:	e011      	b.n	80018c0 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800189c:	f7fe fe82 	bl	80005a4 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	683a      	ldr	r2, [r7, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d803      	bhi.n	80018b4 <HAL_SPI_Transmit+0x158>
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b2:	d102      	bne.n	80018ba <HAL_SPI_Transmit+0x15e>
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d102      	bne.n	80018c0 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	77fb      	strb	r3, [r7, #31]
          goto error;
 80018be:	e074      	b.n	80019aa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d1ce      	bne.n	8001868 <HAL_SPI_Transmit+0x10c>
 80018ca:	e04c      	b.n	8001966 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <HAL_SPI_Transmit+0x17e>
 80018d4:	8afb      	ldrh	r3, [r7, #22]
 80018d6:	2b01      	cmp	r3, #1
 80018d8:	d140      	bne.n	800195c <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	330c      	adds	r3, #12
 80018e4:	7812      	ldrb	r2, [r2, #0]
 80018e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	1c5a      	adds	r2, r3, #1
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80018f6:	b29b      	uxth	r3, r3
 80018f8:	3b01      	subs	r3, #1
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001900:	e02c      	b.n	800195c <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b02      	cmp	r3, #2
 800190e:	d113      	bne.n	8001938 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	330c      	adds	r3, #12
 800191a:	7812      	ldrb	r2, [r2, #0]
 800191c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800192c:	b29b      	uxth	r3, r3
 800192e:	3b01      	subs	r3, #1
 8001930:	b29a      	uxth	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	86da      	strh	r2, [r3, #54]	; 0x36
 8001936:	e011      	b.n	800195c <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001938:	f7fe fe34 	bl	80005a4 <HAL_GetTick>
 800193c:	4602      	mov	r2, r0
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	1ad3      	subs	r3, r2, r3
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d803      	bhi.n	8001950 <HAL_SPI_Transmit+0x1f4>
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800194e:	d102      	bne.n	8001956 <HAL_SPI_Transmit+0x1fa>
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	77fb      	strb	r3, [r7, #31]
          goto error;
 800195a:	e026      	b.n	80019aa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001960:	b29b      	uxth	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d1cd      	bne.n	8001902 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	6839      	ldr	r1, [r7, #0]
 800196a:	68f8      	ldr	r0, [r7, #12]
 800196c:	f000 fa36 	bl	8001ddc <SPI_EndRxTxTransaction>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	2220      	movs	r2, #32
 800197a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10a      	bne.n	800199a <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	613b      	str	r3, [r7, #16]
 8001998:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d002      	beq.n	80019a8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	77fb      	strb	r3, [r7, #31]
 80019a6:	e000      	b.n	80019aa <HAL_SPI_Transmit+0x24e>
  }

error:
 80019a8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2201      	movs	r2, #1
 80019ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80019ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3720      	adds	r7, #32
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}

080019c4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08c      	sub	sp, #48	; 0x30
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	60b9      	str	r1, [r7, #8]
 80019ce:	607a      	str	r2, [r7, #4]
 80019d0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80019d2:	2301      	movs	r3, #1
 80019d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_SPI_TransmitReceive+0x26>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e18a      	b.n	8001d00 <HAL_SPI_TransmitReceive+0x33c>
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80019f2:	f7fe fdd7 	bl	80005a4 <HAL_GetTick>
 80019f6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80019fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8001a08:	887b      	ldrh	r3, [r7, #2]
 8001a0a:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001a0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d00f      	beq.n	8001a34 <HAL_SPI_TransmitReceive+0x70>
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001a1a:	d107      	bne.n	8001a2c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	689b      	ldr	r3, [r3, #8]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d103      	bne.n	8001a2c <HAL_SPI_TransmitReceive+0x68>
 8001a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d003      	beq.n	8001a34 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a32:	e15b      	b.n	8001cec <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d005      	beq.n	8001a46 <HAL_SPI_TransmitReceive+0x82>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d002      	beq.n	8001a46 <HAL_SPI_TransmitReceive+0x82>
 8001a40:	887b      	ldrh	r3, [r7, #2]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d103      	bne.n	8001a4e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8001a4c:	e14e      	b.n	8001cec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	2b04      	cmp	r3, #4
 8001a58:	d003      	beq.n	8001a62 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	2205      	movs	r2, #5
 8001a5e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2200      	movs	r2, #0
 8001a66:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	887a      	ldrh	r2, [r7, #2]
 8001a72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	887a      	ldrh	r2, [r7, #2]
 8001a78:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	68ba      	ldr	r2, [r7, #8]
 8001a7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	887a      	ldrh	r2, [r7, #2]
 8001a84:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	887a      	ldrh	r2, [r7, #2]
 8001a8a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2200      	movs	r2, #0
 8001a96:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aa2:	2b40      	cmp	r3, #64	; 0x40
 8001aa4:	d007      	beq.n	8001ab6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ab4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001abe:	d178      	bne.n	8001bb2 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d002      	beq.n	8001ace <HAL_SPI_TransmitReceive+0x10a>
 8001ac8:	8b7b      	ldrh	r3, [r7, #26]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d166      	bne.n	8001b9c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	881a      	ldrh	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ade:	1c9a      	adds	r2, r3, #2
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ae8:	b29b      	uxth	r3, r3
 8001aea:	3b01      	subs	r3, #1
 8001aec:	b29a      	uxth	r2, r3
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001af2:	e053      	b.n	8001b9c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d11b      	bne.n	8001b3a <HAL_SPI_TransmitReceive+0x176>
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b06:	b29b      	uxth	r3, r3
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d016      	beq.n	8001b3a <HAL_SPI_TransmitReceive+0x176>
 8001b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d113      	bne.n	8001b3a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	881a      	ldrh	r2, [r3, #0]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	1c9a      	adds	r2, r3, #2
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001b2c:	b29b      	uxth	r3, r3
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0301 	and.w	r3, r3, #1
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d119      	bne.n	8001b7c <HAL_SPI_TransmitReceive+0x1b8>
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b4c:	b29b      	uxth	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d014      	beq.n	8001b7c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68da      	ldr	r2, [r3, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b64:	1c9a      	adds	r2, r3, #2
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	3b01      	subs	r3, #1
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001b7c:	f7fe fd12 	bl	80005a4 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d807      	bhi.n	8001b9c <HAL_SPI_TransmitReceive+0x1d8>
 8001b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b92:	d003      	beq.n	8001b9c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001b9a:	e0a7      	b.n	8001cec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1a6      	bne.n	8001af4 <HAL_SPI_TransmitReceive+0x130>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1a1      	bne.n	8001af4 <HAL_SPI_TransmitReceive+0x130>
 8001bb0:	e07c      	b.n	8001cac <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d002      	beq.n	8001bc0 <HAL_SPI_TransmitReceive+0x1fc>
 8001bba:	8b7b      	ldrh	r3, [r7, #26]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d16b      	bne.n	8001c98 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	330c      	adds	r3, #12
 8001bca:	7812      	ldrb	r2, [r2, #0]
 8001bcc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	1c5a      	adds	r2, r3, #1
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	3b01      	subs	r3, #1
 8001be0:	b29a      	uxth	r2, r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001be6:	e057      	b.n	8001c98 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d11c      	bne.n	8001c30 <HAL_SPI_TransmitReceive+0x26c>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d017      	beq.n	8001c30 <HAL_SPI_TransmitReceive+0x26c>
 8001c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d114      	bne.n	8001c30 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	330c      	adds	r3, #12
 8001c10:	7812      	ldrb	r2, [r2, #0]
 8001c12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c22:	b29b      	uxth	r3, r3
 8001c24:	3b01      	subs	r3, #1
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	f003 0301 	and.w	r3, r3, #1
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d119      	bne.n	8001c72 <HAL_SPI_TransmitReceive+0x2ae>
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d014      	beq.n	8001c72 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c52:	b2d2      	uxtb	r2, r2
 8001c54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c5a:	1c5a      	adds	r2, r3, #1
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	3b01      	subs	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001c72:	f7fe fc97 	bl	80005a4 <HAL_GetTick>
 8001c76:	4602      	mov	r2, r0
 8001c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d803      	bhi.n	8001c8a <HAL_SPI_TransmitReceive+0x2c6>
 8001c82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c88:	d102      	bne.n	8001c90 <HAL_SPI_TransmitReceive+0x2cc>
 8001c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d103      	bne.n	8001c98 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8001c96:	e029      	b.n	8001cec <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1a2      	bne.n	8001be8 <HAL_SPI_TransmitReceive+0x224>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d19d      	bne.n	8001be8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f893 	bl	8001ddc <SPI_EndRxTxTransaction>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d006      	beq.n	8001cca <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2220      	movs	r2, #32
 8001cc6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8001cc8:	e010      	b.n	8001cec <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d10b      	bne.n	8001cea <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	617b      	str	r3, [r7, #20]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	e000      	b.n	8001cec <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8001cea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001cfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3730      	adds	r7, #48	; 0x30
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	603b      	str	r3, [r7, #0]
 8001d14:	4613      	mov	r3, r2
 8001d16:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d18:	e04c      	b.n	8001db4 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d20:	d048      	beq.n	8001db4 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001d22:	f7fe fc3f 	bl	80005a4 <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d902      	bls.n	8001d38 <SPI_WaitFlagStateUntilTimeout+0x30>
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d13d      	bne.n	8001db4 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d46:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001d50:	d111      	bne.n	8001d76 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d5a:	d004      	beq.n	8001d66 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d64:	d107      	bne.n	8001d76 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d74:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d7e:	d10f      	bne.n	8001da0 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d8e:	601a      	str	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d9e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e00f      	b.n	8001dd4 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	bf0c      	ite	eq
 8001dc4:	2301      	moveq	r3, #1
 8001dc6:	2300      	movne	r3, #0
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	461a      	mov	r2, r3
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d1a3      	bne.n	8001d1a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001dd2:	2300      	movs	r3, #0
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3710      	adds	r7, #16
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af02      	add	r7, sp, #8
 8001de2:	60f8      	str	r0, [r7, #12]
 8001de4:	60b9      	str	r1, [r7, #8]
 8001de6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <SPI_EndRxTxTransaction+0x7c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a1b      	ldr	r2, [pc, #108]	; (8001e5c <SPI_EndRxTxTransaction+0x80>)
 8001dee:	fba2 2303 	umull	r2, r3, r2, r3
 8001df2:	0d5b      	lsrs	r3, r3, #21
 8001df4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001df8:	fb02 f303 	mul.w	r3, r2, r3
 8001dfc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e06:	d112      	bne.n	8001e2e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	9300      	str	r3, [sp, #0]
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2180      	movs	r1, #128	; 0x80
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff ff78 	bl	8001d08 <SPI_WaitFlagStateUntilTimeout>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d016      	beq.n	8001e4c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e22:	f043 0220 	orr.w	r2, r3, #32
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e00f      	b.n	8001e4e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00a      	beq.n	8001e4a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	3b01      	subs	r3, #1
 8001e38:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e44:	2b80      	cmp	r3, #128	; 0x80
 8001e46:	d0f2      	beq.n	8001e2e <SPI_EndRxTxTransaction+0x52>
 8001e48:	e000      	b.n	8001e4c <SPI_EndRxTxTransaction+0x70>
        break;
 8001e4a:	bf00      	nop
  }

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000008 	.word	0x20000008
 8001e5c:	165e9f81 	.word	0x165e9f81

08001e60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e03f      	b.n	8001ef2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d106      	bne.n	8001e8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f001 fa88 	bl	800339c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2224      	movs	r2, #36	; 0x24
 8001e90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68da      	ldr	r2, [r3, #12]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f000 f829 	bl	8001efc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	695a      	ldr	r2, [r3, #20]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ec8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ed8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2220      	movs	r2, #32
 8001ee4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f00:	b085      	sub	sp, #20
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	691b      	ldr	r3, [r3, #16]
 8001f0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68da      	ldr	r2, [r3, #12]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	431a      	orrs	r2, r3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	695b      	ldr	r3, [r3, #20]
 8001f2a:	431a      	orrs	r2, r3
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	69db      	ldr	r3, [r3, #28]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8001f3e:	f023 030c 	bic.w	r3, r3, #12
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	68f9      	ldr	r1, [r7, #12]
 8001f48:	430b      	orrs	r3, r1
 8001f4a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	695b      	ldr	r3, [r3, #20]
 8001f52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699a      	ldr	r2, [r3, #24]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f6a:	f040 818b 	bne.w	8002284 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4ac1      	ldr	r2, [pc, #772]	; (8002278 <UART_SetConfig+0x37c>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d005      	beq.n	8001f84 <UART_SetConfig+0x88>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4abf      	ldr	r2, [pc, #764]	; (800227c <UART_SetConfig+0x380>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	f040 80bd 	bne.w	80020fe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f84:	f7ff fb72 	bl	800166c <HAL_RCC_GetPCLK2Freq>
 8001f88:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f8a:	68bb      	ldr	r3, [r7, #8]
 8001f8c:	461d      	mov	r5, r3
 8001f8e:	f04f 0600 	mov.w	r6, #0
 8001f92:	46a8      	mov	r8, r5
 8001f94:	46b1      	mov	r9, r6
 8001f96:	eb18 0308 	adds.w	r3, r8, r8
 8001f9a:	eb49 0409 	adc.w	r4, r9, r9
 8001f9e:	4698      	mov	r8, r3
 8001fa0:	46a1      	mov	r9, r4
 8001fa2:	eb18 0805 	adds.w	r8, r8, r5
 8001fa6:	eb49 0906 	adc.w	r9, r9, r6
 8001faa:	f04f 0100 	mov.w	r1, #0
 8001fae:	f04f 0200 	mov.w	r2, #0
 8001fb2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8001fb6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8001fba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8001fbe:	4688      	mov	r8, r1
 8001fc0:	4691      	mov	r9, r2
 8001fc2:	eb18 0005 	adds.w	r0, r8, r5
 8001fc6:	eb49 0106 	adc.w	r1, r9, r6
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	461d      	mov	r5, r3
 8001fd0:	f04f 0600 	mov.w	r6, #0
 8001fd4:	196b      	adds	r3, r5, r5
 8001fd6:	eb46 0406 	adc.w	r4, r6, r6
 8001fda:	461a      	mov	r2, r3
 8001fdc:	4623      	mov	r3, r4
 8001fde:	f7fe f8fb 	bl	80001d8 <__aeabi_uldivmod>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	460c      	mov	r4, r1
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4ba5      	ldr	r3, [pc, #660]	; (8002280 <UART_SetConfig+0x384>)
 8001fea:	fba3 2302 	umull	r2, r3, r3, r2
 8001fee:	095b      	lsrs	r3, r3, #5
 8001ff0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	461d      	mov	r5, r3
 8001ff8:	f04f 0600 	mov.w	r6, #0
 8001ffc:	46a9      	mov	r9, r5
 8001ffe:	46b2      	mov	sl, r6
 8002000:	eb19 0309 	adds.w	r3, r9, r9
 8002004:	eb4a 040a 	adc.w	r4, sl, sl
 8002008:	4699      	mov	r9, r3
 800200a:	46a2      	mov	sl, r4
 800200c:	eb19 0905 	adds.w	r9, r9, r5
 8002010:	eb4a 0a06 	adc.w	sl, sl, r6
 8002014:	f04f 0100 	mov.w	r1, #0
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002020:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002024:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002028:	4689      	mov	r9, r1
 800202a:	4692      	mov	sl, r2
 800202c:	eb19 0005 	adds.w	r0, r9, r5
 8002030:	eb4a 0106 	adc.w	r1, sl, r6
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	461d      	mov	r5, r3
 800203a:	f04f 0600 	mov.w	r6, #0
 800203e:	196b      	adds	r3, r5, r5
 8002040:	eb46 0406 	adc.w	r4, r6, r6
 8002044:	461a      	mov	r2, r3
 8002046:	4623      	mov	r3, r4
 8002048:	f7fe f8c6 	bl	80001d8 <__aeabi_uldivmod>
 800204c:	4603      	mov	r3, r0
 800204e:	460c      	mov	r4, r1
 8002050:	461a      	mov	r2, r3
 8002052:	4b8b      	ldr	r3, [pc, #556]	; (8002280 <UART_SetConfig+0x384>)
 8002054:	fba3 1302 	umull	r1, r3, r3, r2
 8002058:	095b      	lsrs	r3, r3, #5
 800205a:	2164      	movs	r1, #100	; 0x64
 800205c:	fb01 f303 	mul.w	r3, r1, r3
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	3332      	adds	r3, #50	; 0x32
 8002066:	4a86      	ldr	r2, [pc, #536]	; (8002280 <UART_SetConfig+0x384>)
 8002068:	fba2 2303 	umull	r2, r3, r2, r3
 800206c:	095b      	lsrs	r3, r3, #5
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002074:	4498      	add	r8, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	461d      	mov	r5, r3
 800207a:	f04f 0600 	mov.w	r6, #0
 800207e:	46a9      	mov	r9, r5
 8002080:	46b2      	mov	sl, r6
 8002082:	eb19 0309 	adds.w	r3, r9, r9
 8002086:	eb4a 040a 	adc.w	r4, sl, sl
 800208a:	4699      	mov	r9, r3
 800208c:	46a2      	mov	sl, r4
 800208e:	eb19 0905 	adds.w	r9, r9, r5
 8002092:	eb4a 0a06 	adc.w	sl, sl, r6
 8002096:	f04f 0100 	mov.w	r1, #0
 800209a:	f04f 0200 	mov.w	r2, #0
 800209e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80020a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80020a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80020aa:	4689      	mov	r9, r1
 80020ac:	4692      	mov	sl, r2
 80020ae:	eb19 0005 	adds.w	r0, r9, r5
 80020b2:	eb4a 0106 	adc.w	r1, sl, r6
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	461d      	mov	r5, r3
 80020bc:	f04f 0600 	mov.w	r6, #0
 80020c0:	196b      	adds	r3, r5, r5
 80020c2:	eb46 0406 	adc.w	r4, r6, r6
 80020c6:	461a      	mov	r2, r3
 80020c8:	4623      	mov	r3, r4
 80020ca:	f7fe f885 	bl	80001d8 <__aeabi_uldivmod>
 80020ce:	4603      	mov	r3, r0
 80020d0:	460c      	mov	r4, r1
 80020d2:	461a      	mov	r2, r3
 80020d4:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <UART_SetConfig+0x384>)
 80020d6:	fba3 1302 	umull	r1, r3, r3, r2
 80020da:	095b      	lsrs	r3, r3, #5
 80020dc:	2164      	movs	r1, #100	; 0x64
 80020de:	fb01 f303 	mul.w	r3, r1, r3
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	00db      	lsls	r3, r3, #3
 80020e6:	3332      	adds	r3, #50	; 0x32
 80020e8:	4a65      	ldr	r2, [pc, #404]	; (8002280 <UART_SetConfig+0x384>)
 80020ea:	fba2 2303 	umull	r2, r3, r2, r3
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	f003 0207 	and.w	r2, r3, #7
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4442      	add	r2, r8
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	e26f      	b.n	80025de <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80020fe:	f7ff faa1 	bl	8001644 <HAL_RCC_GetPCLK1Freq>
 8002102:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	461d      	mov	r5, r3
 8002108:	f04f 0600 	mov.w	r6, #0
 800210c:	46a8      	mov	r8, r5
 800210e:	46b1      	mov	r9, r6
 8002110:	eb18 0308 	adds.w	r3, r8, r8
 8002114:	eb49 0409 	adc.w	r4, r9, r9
 8002118:	4698      	mov	r8, r3
 800211a:	46a1      	mov	r9, r4
 800211c:	eb18 0805 	adds.w	r8, r8, r5
 8002120:	eb49 0906 	adc.w	r9, r9, r6
 8002124:	f04f 0100 	mov.w	r1, #0
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002130:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002134:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002138:	4688      	mov	r8, r1
 800213a:	4691      	mov	r9, r2
 800213c:	eb18 0005 	adds.w	r0, r8, r5
 8002140:	eb49 0106 	adc.w	r1, r9, r6
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	461d      	mov	r5, r3
 800214a:	f04f 0600 	mov.w	r6, #0
 800214e:	196b      	adds	r3, r5, r5
 8002150:	eb46 0406 	adc.w	r4, r6, r6
 8002154:	461a      	mov	r2, r3
 8002156:	4623      	mov	r3, r4
 8002158:	f7fe f83e 	bl	80001d8 <__aeabi_uldivmod>
 800215c:	4603      	mov	r3, r0
 800215e:	460c      	mov	r4, r1
 8002160:	461a      	mov	r2, r3
 8002162:	4b47      	ldr	r3, [pc, #284]	; (8002280 <UART_SetConfig+0x384>)
 8002164:	fba3 2302 	umull	r2, r3, r3, r2
 8002168:	095b      	lsrs	r3, r3, #5
 800216a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	461d      	mov	r5, r3
 8002172:	f04f 0600 	mov.w	r6, #0
 8002176:	46a9      	mov	r9, r5
 8002178:	46b2      	mov	sl, r6
 800217a:	eb19 0309 	adds.w	r3, r9, r9
 800217e:	eb4a 040a 	adc.w	r4, sl, sl
 8002182:	4699      	mov	r9, r3
 8002184:	46a2      	mov	sl, r4
 8002186:	eb19 0905 	adds.w	r9, r9, r5
 800218a:	eb4a 0a06 	adc.w	sl, sl, r6
 800218e:	f04f 0100 	mov.w	r1, #0
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800219a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800219e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80021a2:	4689      	mov	r9, r1
 80021a4:	4692      	mov	sl, r2
 80021a6:	eb19 0005 	adds.w	r0, r9, r5
 80021aa:	eb4a 0106 	adc.w	r1, sl, r6
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	461d      	mov	r5, r3
 80021b4:	f04f 0600 	mov.w	r6, #0
 80021b8:	196b      	adds	r3, r5, r5
 80021ba:	eb46 0406 	adc.w	r4, r6, r6
 80021be:	461a      	mov	r2, r3
 80021c0:	4623      	mov	r3, r4
 80021c2:	f7fe f809 	bl	80001d8 <__aeabi_uldivmod>
 80021c6:	4603      	mov	r3, r0
 80021c8:	460c      	mov	r4, r1
 80021ca:	461a      	mov	r2, r3
 80021cc:	4b2c      	ldr	r3, [pc, #176]	; (8002280 <UART_SetConfig+0x384>)
 80021ce:	fba3 1302 	umull	r1, r3, r3, r2
 80021d2:	095b      	lsrs	r3, r3, #5
 80021d4:	2164      	movs	r1, #100	; 0x64
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	00db      	lsls	r3, r3, #3
 80021de:	3332      	adds	r3, #50	; 0x32
 80021e0:	4a27      	ldr	r2, [pc, #156]	; (8002280 <UART_SetConfig+0x384>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	095b      	lsrs	r3, r3, #5
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80021ee:	4498      	add	r8, r3
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	461d      	mov	r5, r3
 80021f4:	f04f 0600 	mov.w	r6, #0
 80021f8:	46a9      	mov	r9, r5
 80021fa:	46b2      	mov	sl, r6
 80021fc:	eb19 0309 	adds.w	r3, r9, r9
 8002200:	eb4a 040a 	adc.w	r4, sl, sl
 8002204:	4699      	mov	r9, r3
 8002206:	46a2      	mov	sl, r4
 8002208:	eb19 0905 	adds.w	r9, r9, r5
 800220c:	eb4a 0a06 	adc.w	sl, sl, r6
 8002210:	f04f 0100 	mov.w	r1, #0
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800221c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002220:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002224:	4689      	mov	r9, r1
 8002226:	4692      	mov	sl, r2
 8002228:	eb19 0005 	adds.w	r0, r9, r5
 800222c:	eb4a 0106 	adc.w	r1, sl, r6
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	461d      	mov	r5, r3
 8002236:	f04f 0600 	mov.w	r6, #0
 800223a:	196b      	adds	r3, r5, r5
 800223c:	eb46 0406 	adc.w	r4, r6, r6
 8002240:	461a      	mov	r2, r3
 8002242:	4623      	mov	r3, r4
 8002244:	f7fd ffc8 	bl	80001d8 <__aeabi_uldivmod>
 8002248:	4603      	mov	r3, r0
 800224a:	460c      	mov	r4, r1
 800224c:	461a      	mov	r2, r3
 800224e:	4b0c      	ldr	r3, [pc, #48]	; (8002280 <UART_SetConfig+0x384>)
 8002250:	fba3 1302 	umull	r1, r3, r3, r2
 8002254:	095b      	lsrs	r3, r3, #5
 8002256:	2164      	movs	r1, #100	; 0x64
 8002258:	fb01 f303 	mul.w	r3, r1, r3
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	00db      	lsls	r3, r3, #3
 8002260:	3332      	adds	r3, #50	; 0x32
 8002262:	4a07      	ldr	r2, [pc, #28]	; (8002280 <UART_SetConfig+0x384>)
 8002264:	fba2 2303 	umull	r2, r3, r2, r3
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	f003 0207 	and.w	r2, r3, #7
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4442      	add	r2, r8
 8002274:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002276:	e1b2      	b.n	80025de <UART_SetConfig+0x6e2>
 8002278:	40011000 	.word	0x40011000
 800227c:	40011400 	.word	0x40011400
 8002280:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4ad7      	ldr	r2, [pc, #860]	; (80025e8 <UART_SetConfig+0x6ec>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d005      	beq.n	800229a <UART_SetConfig+0x39e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4ad6      	ldr	r2, [pc, #856]	; (80025ec <UART_SetConfig+0x6f0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	f040 80d1 	bne.w	800243c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800229a:	f7ff f9e7 	bl	800166c <HAL_RCC_GetPCLK2Freq>
 800229e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	469a      	mov	sl, r3
 80022a4:	f04f 0b00 	mov.w	fp, #0
 80022a8:	46d0      	mov	r8, sl
 80022aa:	46d9      	mov	r9, fp
 80022ac:	eb18 0308 	adds.w	r3, r8, r8
 80022b0:	eb49 0409 	adc.w	r4, r9, r9
 80022b4:	4698      	mov	r8, r3
 80022b6:	46a1      	mov	r9, r4
 80022b8:	eb18 080a 	adds.w	r8, r8, sl
 80022bc:	eb49 090b 	adc.w	r9, r9, fp
 80022c0:	f04f 0100 	mov.w	r1, #0
 80022c4:	f04f 0200 	mov.w	r2, #0
 80022c8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80022cc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80022d0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80022d4:	4688      	mov	r8, r1
 80022d6:	4691      	mov	r9, r2
 80022d8:	eb1a 0508 	adds.w	r5, sl, r8
 80022dc:	eb4b 0609 	adc.w	r6, fp, r9
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	4619      	mov	r1, r3
 80022e6:	f04f 0200 	mov.w	r2, #0
 80022ea:	f04f 0300 	mov.w	r3, #0
 80022ee:	f04f 0400 	mov.w	r4, #0
 80022f2:	0094      	lsls	r4, r2, #2
 80022f4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80022f8:	008b      	lsls	r3, r1, #2
 80022fa:	461a      	mov	r2, r3
 80022fc:	4623      	mov	r3, r4
 80022fe:	4628      	mov	r0, r5
 8002300:	4631      	mov	r1, r6
 8002302:	f7fd ff69 	bl	80001d8 <__aeabi_uldivmod>
 8002306:	4603      	mov	r3, r0
 8002308:	460c      	mov	r4, r1
 800230a:	461a      	mov	r2, r3
 800230c:	4bb8      	ldr	r3, [pc, #736]	; (80025f0 <UART_SetConfig+0x6f4>)
 800230e:	fba3 2302 	umull	r2, r3, r3, r2
 8002312:	095b      	lsrs	r3, r3, #5
 8002314:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	469b      	mov	fp, r3
 800231c:	f04f 0c00 	mov.w	ip, #0
 8002320:	46d9      	mov	r9, fp
 8002322:	46e2      	mov	sl, ip
 8002324:	eb19 0309 	adds.w	r3, r9, r9
 8002328:	eb4a 040a 	adc.w	r4, sl, sl
 800232c:	4699      	mov	r9, r3
 800232e:	46a2      	mov	sl, r4
 8002330:	eb19 090b 	adds.w	r9, r9, fp
 8002334:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002338:	f04f 0100 	mov.w	r1, #0
 800233c:	f04f 0200 	mov.w	r2, #0
 8002340:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002344:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002348:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800234c:	4689      	mov	r9, r1
 800234e:	4692      	mov	sl, r2
 8002350:	eb1b 0509 	adds.w	r5, fp, r9
 8002354:	eb4c 060a 	adc.w	r6, ip, sl
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	4619      	mov	r1, r3
 800235e:	f04f 0200 	mov.w	r2, #0
 8002362:	f04f 0300 	mov.w	r3, #0
 8002366:	f04f 0400 	mov.w	r4, #0
 800236a:	0094      	lsls	r4, r2, #2
 800236c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002370:	008b      	lsls	r3, r1, #2
 8002372:	461a      	mov	r2, r3
 8002374:	4623      	mov	r3, r4
 8002376:	4628      	mov	r0, r5
 8002378:	4631      	mov	r1, r6
 800237a:	f7fd ff2d 	bl	80001d8 <__aeabi_uldivmod>
 800237e:	4603      	mov	r3, r0
 8002380:	460c      	mov	r4, r1
 8002382:	461a      	mov	r2, r3
 8002384:	4b9a      	ldr	r3, [pc, #616]	; (80025f0 <UART_SetConfig+0x6f4>)
 8002386:	fba3 1302 	umull	r1, r3, r3, r2
 800238a:	095b      	lsrs	r3, r3, #5
 800238c:	2164      	movs	r1, #100	; 0x64
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	011b      	lsls	r3, r3, #4
 8002396:	3332      	adds	r3, #50	; 0x32
 8002398:	4a95      	ldr	r2, [pc, #596]	; (80025f0 <UART_SetConfig+0x6f4>)
 800239a:	fba2 2303 	umull	r2, r3, r2, r3
 800239e:	095b      	lsrs	r3, r3, #5
 80023a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80023a4:	4498      	add	r8, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	469b      	mov	fp, r3
 80023aa:	f04f 0c00 	mov.w	ip, #0
 80023ae:	46d9      	mov	r9, fp
 80023b0:	46e2      	mov	sl, ip
 80023b2:	eb19 0309 	adds.w	r3, r9, r9
 80023b6:	eb4a 040a 	adc.w	r4, sl, sl
 80023ba:	4699      	mov	r9, r3
 80023bc:	46a2      	mov	sl, r4
 80023be:	eb19 090b 	adds.w	r9, r9, fp
 80023c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80023c6:	f04f 0100 	mov.w	r1, #0
 80023ca:	f04f 0200 	mov.w	r2, #0
 80023ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80023d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80023da:	4689      	mov	r9, r1
 80023dc:	4692      	mov	sl, r2
 80023de:	eb1b 0509 	adds.w	r5, fp, r9
 80023e2:	eb4c 060a 	adc.w	r6, ip, sl
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4619      	mov	r1, r3
 80023ec:	f04f 0200 	mov.w	r2, #0
 80023f0:	f04f 0300 	mov.w	r3, #0
 80023f4:	f04f 0400 	mov.w	r4, #0
 80023f8:	0094      	lsls	r4, r2, #2
 80023fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80023fe:	008b      	lsls	r3, r1, #2
 8002400:	461a      	mov	r2, r3
 8002402:	4623      	mov	r3, r4
 8002404:	4628      	mov	r0, r5
 8002406:	4631      	mov	r1, r6
 8002408:	f7fd fee6 	bl	80001d8 <__aeabi_uldivmod>
 800240c:	4603      	mov	r3, r0
 800240e:	460c      	mov	r4, r1
 8002410:	461a      	mov	r2, r3
 8002412:	4b77      	ldr	r3, [pc, #476]	; (80025f0 <UART_SetConfig+0x6f4>)
 8002414:	fba3 1302 	umull	r1, r3, r3, r2
 8002418:	095b      	lsrs	r3, r3, #5
 800241a:	2164      	movs	r1, #100	; 0x64
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	3332      	adds	r3, #50	; 0x32
 8002426:	4a72      	ldr	r2, [pc, #456]	; (80025f0 <UART_SetConfig+0x6f4>)
 8002428:	fba2 2303 	umull	r2, r3, r2, r3
 800242c:	095b      	lsrs	r3, r3, #5
 800242e:	f003 020f 	and.w	r2, r3, #15
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4442      	add	r2, r8
 8002438:	609a      	str	r2, [r3, #8]
 800243a:	e0d0      	b.n	80025de <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800243c:	f7ff f902 	bl	8001644 <HAL_RCC_GetPCLK1Freq>
 8002440:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	469a      	mov	sl, r3
 8002446:	f04f 0b00 	mov.w	fp, #0
 800244a:	46d0      	mov	r8, sl
 800244c:	46d9      	mov	r9, fp
 800244e:	eb18 0308 	adds.w	r3, r8, r8
 8002452:	eb49 0409 	adc.w	r4, r9, r9
 8002456:	4698      	mov	r8, r3
 8002458:	46a1      	mov	r9, r4
 800245a:	eb18 080a 	adds.w	r8, r8, sl
 800245e:	eb49 090b 	adc.w	r9, r9, fp
 8002462:	f04f 0100 	mov.w	r1, #0
 8002466:	f04f 0200 	mov.w	r2, #0
 800246a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800246e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002472:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002476:	4688      	mov	r8, r1
 8002478:	4691      	mov	r9, r2
 800247a:	eb1a 0508 	adds.w	r5, sl, r8
 800247e:	eb4b 0609 	adc.w	r6, fp, r9
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4619      	mov	r1, r3
 8002488:	f04f 0200 	mov.w	r2, #0
 800248c:	f04f 0300 	mov.w	r3, #0
 8002490:	f04f 0400 	mov.w	r4, #0
 8002494:	0094      	lsls	r4, r2, #2
 8002496:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800249a:	008b      	lsls	r3, r1, #2
 800249c:	461a      	mov	r2, r3
 800249e:	4623      	mov	r3, r4
 80024a0:	4628      	mov	r0, r5
 80024a2:	4631      	mov	r1, r6
 80024a4:	f7fd fe98 	bl	80001d8 <__aeabi_uldivmod>
 80024a8:	4603      	mov	r3, r0
 80024aa:	460c      	mov	r4, r1
 80024ac:	461a      	mov	r2, r3
 80024ae:	4b50      	ldr	r3, [pc, #320]	; (80025f0 <UART_SetConfig+0x6f4>)
 80024b0:	fba3 2302 	umull	r2, r3, r3, r2
 80024b4:	095b      	lsrs	r3, r3, #5
 80024b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	469b      	mov	fp, r3
 80024be:	f04f 0c00 	mov.w	ip, #0
 80024c2:	46d9      	mov	r9, fp
 80024c4:	46e2      	mov	sl, ip
 80024c6:	eb19 0309 	adds.w	r3, r9, r9
 80024ca:	eb4a 040a 	adc.w	r4, sl, sl
 80024ce:	4699      	mov	r9, r3
 80024d0:	46a2      	mov	sl, r4
 80024d2:	eb19 090b 	adds.w	r9, r9, fp
 80024d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80024da:	f04f 0100 	mov.w	r1, #0
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80024ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80024ee:	4689      	mov	r9, r1
 80024f0:	4692      	mov	sl, r2
 80024f2:	eb1b 0509 	adds.w	r5, fp, r9
 80024f6:	eb4c 060a 	adc.w	r6, ip, sl
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4619      	mov	r1, r3
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	f04f 0300 	mov.w	r3, #0
 8002508:	f04f 0400 	mov.w	r4, #0
 800250c:	0094      	lsls	r4, r2, #2
 800250e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002512:	008b      	lsls	r3, r1, #2
 8002514:	461a      	mov	r2, r3
 8002516:	4623      	mov	r3, r4
 8002518:	4628      	mov	r0, r5
 800251a:	4631      	mov	r1, r6
 800251c:	f7fd fe5c 	bl	80001d8 <__aeabi_uldivmod>
 8002520:	4603      	mov	r3, r0
 8002522:	460c      	mov	r4, r1
 8002524:	461a      	mov	r2, r3
 8002526:	4b32      	ldr	r3, [pc, #200]	; (80025f0 <UART_SetConfig+0x6f4>)
 8002528:	fba3 1302 	umull	r1, r3, r3, r2
 800252c:	095b      	lsrs	r3, r3, #5
 800252e:	2164      	movs	r1, #100	; 0x64
 8002530:	fb01 f303 	mul.w	r3, r1, r3
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	011b      	lsls	r3, r3, #4
 8002538:	3332      	adds	r3, #50	; 0x32
 800253a:	4a2d      	ldr	r2, [pc, #180]	; (80025f0 <UART_SetConfig+0x6f4>)
 800253c:	fba2 2303 	umull	r2, r3, r2, r3
 8002540:	095b      	lsrs	r3, r3, #5
 8002542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002546:	4498      	add	r8, r3
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	469b      	mov	fp, r3
 800254c:	f04f 0c00 	mov.w	ip, #0
 8002550:	46d9      	mov	r9, fp
 8002552:	46e2      	mov	sl, ip
 8002554:	eb19 0309 	adds.w	r3, r9, r9
 8002558:	eb4a 040a 	adc.w	r4, sl, sl
 800255c:	4699      	mov	r9, r3
 800255e:	46a2      	mov	sl, r4
 8002560:	eb19 090b 	adds.w	r9, r9, fp
 8002564:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002568:	f04f 0100 	mov.w	r1, #0
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002574:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002578:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800257c:	4689      	mov	r9, r1
 800257e:	4692      	mov	sl, r2
 8002580:	eb1b 0509 	adds.w	r5, fp, r9
 8002584:	eb4c 060a 	adc.w	r6, ip, sl
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4619      	mov	r1, r3
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	f04f 0400 	mov.w	r4, #0
 800259a:	0094      	lsls	r4, r2, #2
 800259c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80025a0:	008b      	lsls	r3, r1, #2
 80025a2:	461a      	mov	r2, r3
 80025a4:	4623      	mov	r3, r4
 80025a6:	4628      	mov	r0, r5
 80025a8:	4631      	mov	r1, r6
 80025aa:	f7fd fe15 	bl	80001d8 <__aeabi_uldivmod>
 80025ae:	4603      	mov	r3, r0
 80025b0:	460c      	mov	r4, r1
 80025b2:	461a      	mov	r2, r3
 80025b4:	4b0e      	ldr	r3, [pc, #56]	; (80025f0 <UART_SetConfig+0x6f4>)
 80025b6:	fba3 1302 	umull	r1, r3, r3, r2
 80025ba:	095b      	lsrs	r3, r3, #5
 80025bc:	2164      	movs	r1, #100	; 0x64
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	3332      	adds	r3, #50	; 0x32
 80025c8:	4a09      	ldr	r2, [pc, #36]	; (80025f0 <UART_SetConfig+0x6f4>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	f003 020f 	and.w	r2, r3, #15
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4442      	add	r2, r8
 80025da:	609a      	str	r2, [r3, #8]
}
 80025dc:	e7ff      	b.n	80025de <UART_SetConfig+0x6e2>
 80025de:	bf00      	nop
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025e8:	40011000 	.word	0x40011000
 80025ec:	40011400 	.word	0x40011400
 80025f0:	51eb851f 	.word	0x51eb851f

080025f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025f8:	f7fd ff6e 	bl	80004d8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025fc:	f000 f836 	bl	800266c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002600:	f000 f92a 	bl	8002858 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002604:	f000 f89a 	bl	800273c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8002608:	f000 f8fc 	bl	8002804 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800260c:	f000 f8c4 	bl	8002798 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  initRadioLink();
 8002610:	f000 fdaa 	bl	8003168 <initRadioLink>
  sprintf(dataOut, "HelloWord");
 8002614:	4a10      	ldr	r2, [pc, #64]	; (8002658 <main+0x64>)
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <main+0x68>)
 8002618:	cb03      	ldmia	r3!, {r0, r1}
 800261a:	6010      	str	r0, [r2, #0]
 800261c:	6051      	str	r1, [r2, #4]
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	8113      	strh	r3, [r2, #8]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(TM_NRF24L01_DataReady(&hspi2)) {
 8002622:	480f      	ldr	r0, [pc, #60]	; (8002660 <main+0x6c>)
 8002624:	f000 fbde 	bl	8002de4 <TM_NRF24L01_DataReady>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <main+0x42>

	  		  TM_NRF24L01_GetData(&hspi2, dataIn);
 800262e:	490d      	ldr	r1, [pc, #52]	; (8002664 <main+0x70>)
 8002630:	480b      	ldr	r0, [pc, #44]	; (8002660 <main+0x6c>)
 8002632:	f000 fba5 	bl	8002d80 <TM_NRF24L01_GetData>

	  	  }
	  TM_NRF24L01_Transmit(&hspi2, dataOut);
 8002636:	4908      	ldr	r1, [pc, #32]	; (8002658 <main+0x64>)
 8002638:	4809      	ldr	r0, [pc, #36]	; (8002660 <main+0x6c>)
 800263a:	f000 fb63 	bl	8002d04 <TM_NRF24L01_Transmit>
	  do {
		  transmissionStatus = TM_NRF24L01_GetTransmissionStatus(&hspi2);
 800263e:	4808      	ldr	r0, [pc, #32]	; (8002660 <main+0x6c>)
 8002640:	f000 fc24 	bl	8002e8c <TM_NRF24L01_GetTransmissionStatus>
 8002644:	4603      	mov	r3, r0
 8002646:	461a      	mov	r2, r3
 8002648:	4b07      	ldr	r3, [pc, #28]	; (8002668 <main+0x74>)
 800264a:	701a      	strb	r2, [r3, #0]
	  } while (transmissionStatus == TM_NRF24L01_Transmit_Status_Sending);
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <main+0x74>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	2bff      	cmp	r3, #255	; 0xff
 8002652:	d0f4      	beq.n	800263e <main+0x4a>
	  if(TM_NRF24L01_DataReady(&hspi2)) {
 8002654:	e7e5      	b.n	8002622 <main+0x2e>
 8002656:	bf00      	nop
 8002658:	20000100 	.word	0x20000100
 800265c:	08003588 	.word	0x08003588
 8002660:	20000030 	.word	0x20000030
 8002664:	200000e0 	.word	0x200000e0
 8002668:	200000dc 	.word	0x200000dc

0800266c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b094      	sub	sp, #80	; 0x50
 8002670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002672:	f107 0320 	add.w	r3, r7, #32
 8002676:	2230      	movs	r2, #48	; 0x30
 8002678:	2100      	movs	r1, #0
 800267a:	4618      	mov	r0, r3
 800267c:	f000 ff70 	bl	8003560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002680:	f107 030c 	add.w	r3, r7, #12
 8002684:	2200      	movs	r2, #0
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	605a      	str	r2, [r3, #4]
 800268a:	609a      	str	r2, [r3, #8]
 800268c:	60da      	str	r2, [r3, #12]
 800268e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002690:	2300      	movs	r3, #0
 8002692:	60bb      	str	r3, [r7, #8]
 8002694:	4b27      	ldr	r3, [pc, #156]	; (8002734 <SystemClock_Config+0xc8>)
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	4a26      	ldr	r2, [pc, #152]	; (8002734 <SystemClock_Config+0xc8>)
 800269a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800269e:	6413      	str	r3, [r2, #64]	; 0x40
 80026a0:	4b24      	ldr	r3, [pc, #144]	; (8002734 <SystemClock_Config+0xc8>)
 80026a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026a8:	60bb      	str	r3, [r7, #8]
 80026aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80026ac:	2300      	movs	r3, #0
 80026ae:	607b      	str	r3, [r7, #4]
 80026b0:	4b21      	ldr	r3, [pc, #132]	; (8002738 <SystemClock_Config+0xcc>)
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a20      	ldr	r2, [pc, #128]	; (8002738 <SystemClock_Config+0xcc>)
 80026b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026ba:	6013      	str	r3, [r2, #0]
 80026bc:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <SystemClock_Config+0xcc>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80026c8:	2302      	movs	r3, #2
 80026ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026cc:	2301      	movs	r3, #1
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80026d0:	2310      	movs	r3, #16
 80026d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026d4:	2302      	movs	r3, #2
 80026d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80026d8:	2300      	movs	r3, #0
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80026dc:	2308      	movs	r3, #8
 80026de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80026e0:	2354      	movs	r3, #84	; 0x54
 80026e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80026e4:	2302      	movs	r3, #2
 80026e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80026e8:	2304      	movs	r3, #4
 80026ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ec:	f107 0320 	add.w	r3, r7, #32
 80026f0:	4618      	mov	r0, r3
 80026f2:	f7fe fb6d 	bl	8000dd0 <HAL_RCC_OscConfig>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d001      	beq.n	8002700 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80026fc:	f000 f926 	bl	800294c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002700:	230f      	movs	r3, #15
 8002702:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002704:	2302      	movs	r3, #2
 8002706:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800270c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002710:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002712:	2300      	movs	r3, #0
 8002714:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002716:	f107 030c 	add.w	r3, r7, #12
 800271a:	2102      	movs	r1, #2
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe fdc7 	bl	80012b0 <HAL_RCC_ClockConfig>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002728:	f000 f910 	bl	800294c <Error_Handler>
  }
}
 800272c:	bf00      	nop
 800272e:	3750      	adds	r7, #80	; 0x50
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40023800 	.word	0x40023800
 8002738:	40007000 	.word	0x40007000

0800273c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002740:	4b12      	ldr	r3, [pc, #72]	; (800278c <MX_I2C1_Init+0x50>)
 8002742:	4a13      	ldr	r2, [pc, #76]	; (8002790 <MX_I2C1_Init+0x54>)
 8002744:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002746:	4b11      	ldr	r3, [pc, #68]	; (800278c <MX_I2C1_Init+0x50>)
 8002748:	4a12      	ldr	r2, [pc, #72]	; (8002794 <MX_I2C1_Init+0x58>)
 800274a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800274c:	4b0f      	ldr	r3, [pc, #60]	; (800278c <MX_I2C1_Init+0x50>)
 800274e:	2200      	movs	r2, #0
 8002750:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002752:	4b0e      	ldr	r3, [pc, #56]	; (800278c <MX_I2C1_Init+0x50>)
 8002754:	2200      	movs	r2, #0
 8002756:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <MX_I2C1_Init+0x50>)
 800275a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800275e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002760:	4b0a      	ldr	r3, [pc, #40]	; (800278c <MX_I2C1_Init+0x50>)
 8002762:	2200      	movs	r2, #0
 8002764:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002766:	4b09      	ldr	r3, [pc, #36]	; (800278c <MX_I2C1_Init+0x50>)
 8002768:	2200      	movs	r2, #0
 800276a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <MX_I2C1_Init+0x50>)
 800276e:	2200      	movs	r2, #0
 8002770:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002772:	4b06      	ldr	r3, [pc, #24]	; (800278c <MX_I2C1_Init+0x50>)
 8002774:	2200      	movs	r2, #0
 8002776:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002778:	4804      	ldr	r0, [pc, #16]	; (800278c <MX_I2C1_Init+0x50>)
 800277a:	f7fe f9f1 	bl	8000b60 <HAL_I2C_Init>
 800277e:	4603      	mov	r3, r0
 8002780:	2b00      	cmp	r3, #0
 8002782:	d001      	beq.n	8002788 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002784:	f000 f8e2 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20000088 	.word	0x20000088
 8002790:	40005400 	.word	0x40005400
 8002794:	000186a0 	.word	0x000186a0

08002798 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 800279c:	4b17      	ldr	r3, [pc, #92]	; (80027fc <MX_SPI2_Init+0x64>)
 800279e:	4a18      	ldr	r2, [pc, #96]	; (8002800 <MX_SPI2_Init+0x68>)
 80027a0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80027a2:	4b16      	ldr	r3, [pc, #88]	; (80027fc <MX_SPI2_Init+0x64>)
 80027a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80027a8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80027aa:	4b14      	ldr	r3, [pc, #80]	; (80027fc <MX_SPI2_Init+0x64>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80027b0:	4b12      	ldr	r3, [pc, #72]	; (80027fc <MX_SPI2_Init+0x64>)
 80027b2:	2200      	movs	r2, #0
 80027b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <MX_SPI2_Init+0x64>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <MX_SPI2_Init+0x64>)
 80027be:	2200      	movs	r2, #0
 80027c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <MX_SPI2_Init+0x64>)
 80027c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80027ca:	4b0c      	ldr	r3, [pc, #48]	; (80027fc <MX_SPI2_Init+0x64>)
 80027cc:	2220      	movs	r2, #32
 80027ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80027d0:	4b0a      	ldr	r3, [pc, #40]	; (80027fc <MX_SPI2_Init+0x64>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80027d6:	4b09      	ldr	r3, [pc, #36]	; (80027fc <MX_SPI2_Init+0x64>)
 80027d8:	2200      	movs	r2, #0
 80027da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027dc:	4b07      	ldr	r3, [pc, #28]	; (80027fc <MX_SPI2_Init+0x64>)
 80027de:	2200      	movs	r2, #0
 80027e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80027e2:	4b06      	ldr	r3, [pc, #24]	; (80027fc <MX_SPI2_Init+0x64>)
 80027e4:	220a      	movs	r2, #10
 80027e6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80027e8:	4804      	ldr	r0, [pc, #16]	; (80027fc <MX_SPI2_Init+0x64>)
 80027ea:	f7fe ff53 	bl	8001694 <HAL_SPI_Init>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d001      	beq.n	80027f8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80027f4:	f000 f8aa 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80027f8:	bf00      	nop
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000030 	.word	0x20000030
 8002800:	40003800 	.word	0x40003800

08002804 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002808:	4b11      	ldr	r3, [pc, #68]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 800280a:	4a12      	ldr	r2, [pc, #72]	; (8002854 <MX_USART2_UART_Init+0x50>)
 800280c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800280e:	4b10      	ldr	r3, [pc, #64]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 8002810:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002814:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002816:	4b0e      	ldr	r3, [pc, #56]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 8002818:	2200      	movs	r2, #0
 800281a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 800281e:	2200      	movs	r2, #0
 8002820:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002822:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 8002824:	2200      	movs	r2, #0
 8002826:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002828:	4b09      	ldr	r3, [pc, #36]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 800282a:	220c      	movs	r2, #12
 800282c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800282e:	4b08      	ldr	r3, [pc, #32]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002834:	4b06      	ldr	r3, [pc, #24]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 8002836:	2200      	movs	r2, #0
 8002838:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800283a:	4805      	ldr	r0, [pc, #20]	; (8002850 <MX_USART2_UART_Init+0x4c>)
 800283c:	f7ff fb10 	bl	8001e60 <HAL_UART_Init>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002846:	f000 f881 	bl	800294c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	20000120 	.word	0x20000120
 8002854:	40004400 	.word	0x40004400

08002858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b08a      	sub	sp, #40	; 0x28
 800285c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285e:	f107 0314 	add.w	r3, r7, #20
 8002862:	2200      	movs	r2, #0
 8002864:	601a      	str	r2, [r3, #0]
 8002866:	605a      	str	r2, [r3, #4]
 8002868:	609a      	str	r2, [r3, #8]
 800286a:	60da      	str	r2, [r3, #12]
 800286c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	4b32      	ldr	r3, [pc, #200]	; (800293c <MX_GPIO_Init+0xe4>)
 8002874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002876:	4a31      	ldr	r2, [pc, #196]	; (800293c <MX_GPIO_Init+0xe4>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6313      	str	r3, [r2, #48]	; 0x30
 800287e:	4b2f      	ldr	r3, [pc, #188]	; (800293c <MX_GPIO_Init+0xe4>)
 8002880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002882:	f003 0304 	and.w	r3, r3, #4
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	4b2b      	ldr	r3, [pc, #172]	; (800293c <MX_GPIO_Init+0xe4>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002892:	4a2a      	ldr	r2, [pc, #168]	; (800293c <MX_GPIO_Init+0xe4>)
 8002894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002898:	6313      	str	r3, [r2, #48]	; 0x30
 800289a:	4b28      	ldr	r3, [pc, #160]	; (800293c <MX_GPIO_Init+0xe4>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800289e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60bb      	str	r3, [r7, #8]
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <MX_GPIO_Init+0xe4>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ae:	4a23      	ldr	r2, [pc, #140]	; (800293c <MX_GPIO_Init+0xe4>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6313      	str	r3, [r2, #48]	; 0x30
 80028b6:	4b21      	ldr	r3, [pc, #132]	; (800293c <MX_GPIO_Init+0xe4>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	60bb      	str	r3, [r7, #8]
 80028c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
 80028c6:	4b1d      	ldr	r3, [pc, #116]	; (800293c <MX_GPIO_Init+0xe4>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ca:	4a1c      	ldr	r2, [pc, #112]	; (800293c <MX_GPIO_Init+0xe4>)
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	6313      	str	r3, [r2, #48]	; 0x30
 80028d2:	4b1a      	ldr	r3, [pc, #104]	; (800293c <MX_GPIO_Init+0xe4>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|CE_Pin|CSN_Pin, GPIO_PIN_RESET);
 80028de:	2200      	movs	r2, #0
 80028e0:	f44f 61a4 	mov.w	r1, #1312	; 0x520
 80028e4:	4816      	ldr	r0, [pc, #88]	; (8002940 <MX_GPIO_Init+0xe8>)
 80028e6:	f7fe f8fd 	bl	8000ae4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80028ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <MX_GPIO_Init+0xec>)
 80028f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f4:	2300      	movs	r3, #0
 80028f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	4619      	mov	r1, r3
 80028fe:	4812      	ldr	r0, [pc, #72]	; (8002948 <MX_GPIO_Init+0xf0>)
 8002900:	f7fd ff6e 	bl	80007e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin CE_Pin CSN_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|CE_Pin|CSN_Pin;
 8002904:	f44f 63a4 	mov.w	r3, #1312	; 0x520
 8002908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800290a:	2301      	movs	r3, #1
 800290c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002912:	2300      	movs	r3, #0
 8002914:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002916:	f107 0314 	add.w	r3, r7, #20
 800291a:	4619      	mov	r1, r3
 800291c:	4808      	ldr	r0, [pc, #32]	; (8002940 <MX_GPIO_Init+0xe8>)
 800291e:	f7fd ff5f 	bl	80007e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002922:	2200      	movs	r2, #0
 8002924:	2101      	movs	r1, #1
 8002926:	2028      	movs	r0, #40	; 0x28
 8002928:	f7fd ff23 	bl	8000772 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800292c:	2028      	movs	r0, #40	; 0x28
 800292e:	f7fd ff3c 	bl	80007aa <HAL_NVIC_EnableIRQ>

}
 8002932:	bf00      	nop
 8002934:	3728      	adds	r7, #40	; 0x28
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	40020000 	.word	0x40020000
 8002944:	10210000 	.word	0x10210000
 8002948:	40020800 	.word	0x40020800

0800294c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <TM_NRF24L01_InitPins>:
//uint8_t TM_NRF24L01_RxFifoEmpty(void);

static TM_NRF24L01_t TM_NRF24L01_Struct;
/**********************************************************************************************************/
void TM_NRF24L01_InitPins(void) 
{
 800295c:	b580      	push	{r7, lr}
 800295e:	af00      	add	r7, sp, #0
   /* CSN high = disable SPI */
   NRF24L01_CSN_HIGH;
 8002960:	2201      	movs	r2, #1
 8002962:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002966:	4805      	ldr	r0, [pc, #20]	; (800297c <TM_NRF24L01_InitPins+0x20>)
 8002968:	f7fe f8bc 	bl	8000ae4 <HAL_GPIO_WritePin>
   
   /* CE low = disable TX/RX */
   NRF24L01_CE_LOW;
 800296c:	2200      	movs	r2, #0
 800296e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002972:	4802      	ldr	r0, [pc, #8]	; (800297c <TM_NRF24L01_InitPins+0x20>)
 8002974:	f7fe f8b6 	bl	8000ae4 <HAL_GPIO_WritePin>
}
 8002978:	bf00      	nop
 800297a:	bd80      	pop	{r7, pc}
 800297c:	40020000 	.word	0x40020000

08002980 <NRF24L01_FlushTX>:
/**********************************************************************************************************/
void NRF24L01_FlushTX(SPI_HandleTypeDef *hspi)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
	uint8_t pData = NRF24L01_FLUSH_TX_MASK;
 8002988:	23e1      	movs	r3, #225	; 0xe1
 800298a:	73fb      	strb	r3, [r7, #15]
	do{
				NRF24L01_CSN_LOW;
 800298c:	2200      	movs	r2, #0
 800298e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002992:	480a      	ldr	r0, [pc, #40]	; (80029bc <NRF24L01_FlushTX+0x3c>)
 8002994:	f7fe f8a6 	bl	8000ae4 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(hspi, &pData, 1, 200);
 8002998:	f107 010f 	add.w	r1, r7, #15
 800299c:	23c8      	movs	r3, #200	; 0xc8
 800299e:	2201      	movs	r2, #1
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7fe fedb 	bl	800175c <HAL_SPI_Transmit>
				NRF24L01_CSN_HIGH;
 80029a6:	2201      	movs	r2, #1
 80029a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029ac:	4803      	ldr	r0, [pc, #12]	; (80029bc <NRF24L01_FlushTX+0x3c>)
 80029ae:	f7fe f899 	bl	8000ae4 <HAL_GPIO_WritePin>
	}while(0);
	
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40020000 	.word	0x40020000

080029c0 <NRF24L01_FlushRX>:
/**********************************************************************************************************/
void NRF24L01_FlushRX(SPI_HandleTypeDef *hspi)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
	uint8_t pData = NRF24L01_FLUSH_RX_MASK;
 80029c8:	23e2      	movs	r3, #226	; 0xe2
 80029ca:	73fb      	strb	r3, [r7, #15]
	do{
				NRF24L01_CSN_LOW;
 80029cc:	2200      	movs	r2, #0
 80029ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029d2:	480a      	ldr	r0, [pc, #40]	; (80029fc <NRF24L01_FlushRX+0x3c>)
 80029d4:	f7fe f886 	bl	8000ae4 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(hspi, &pData, 1, 200);
 80029d8:	f107 010f 	add.w	r1, r7, #15
 80029dc:	23c8      	movs	r3, #200	; 0xc8
 80029de:	2201      	movs	r2, #1
 80029e0:	6878      	ldr	r0, [r7, #4]
 80029e2:	f7fe febb 	bl	800175c <HAL_SPI_Transmit>
				NRF24L01_CSN_HIGH;
 80029e6:	2201      	movs	r2, #1
 80029e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029ec:	4803      	ldr	r0, [pc, #12]	; (80029fc <NRF24L01_FlushRX+0x3c>)
 80029ee:	f7fe f879 	bl	8000ae4 <HAL_GPIO_WritePin>
	}while(0);
}
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	40020000 	.word	0x40020000

08002a00 <TM_NRF24L01_WriteRegister>:
/**********************************************************************************************************/
void TM_NRF24L01_WriteRegister(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t value) 
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	70fb      	strb	r3, [r7, #3]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	70bb      	strb	r3, [r7, #2]
	 NRF24L01_CSN_LOW;
 8002a10:	2200      	movs	r2, #0
 8002a12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a16:	4811      	ldr	r0, [pc, #68]	; (8002a5c <TM_NRF24L01_WriteRegister+0x5c>)
 8002a18:	f7fe f864 	bl	8000ae4 <HAL_GPIO_WritePin>
	
	 uint8_t pData = NRF24L01_WRITE_REGISTER_MASK(reg);
 8002a1c:	78fb      	ldrb	r3, [r7, #3]
 8002a1e:	f003 031f 	and.w	r3, r3, #31
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f043 0320 	orr.w	r3, r3, #32
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	73fb      	strb	r3, [r7, #15]
	 HAL_SPI_Transmit(hspi, &pData, 1, 200);
 8002a2c:	f107 010f 	add.w	r1, r7, #15
 8002a30:	23c8      	movs	r3, #200	; 0xc8
 8002a32:	2201      	movs	r2, #1
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7fe fe91 	bl	800175c <HAL_SPI_Transmit>
   HAL_SPI_Transmit(hspi, &value, 1, 200);
 8002a3a:	1cb9      	adds	r1, r7, #2
 8002a3c:	23c8      	movs	r3, #200	; 0xc8
 8002a3e:	2201      	movs	r2, #1
 8002a40:	6878      	ldr	r0, [r7, #4]
 8002a42:	f7fe fe8b 	bl	800175c <HAL_SPI_Transmit>
	
   NRF24L01_CSN_HIGH;
 8002a46:	2201      	movs	r2, #1
 8002a48:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a4c:	4803      	ldr	r0, [pc, #12]	; (8002a5c <TM_NRF24L01_WriteRegister+0x5c>)
 8002a4e:	f7fe f849 	bl	8000ae4 <HAL_GPIO_WritePin>
}
 8002a52:	bf00      	nop
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	40020000 	.word	0x40020000

08002a60 <TM_NRF24L01_WriteRegisterMulti>:
/**********************************************************************************************************/
void TM_NRF24L01_WriteRegisterMulti(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t *data, uint8_t count) 
{ 
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b086      	sub	sp, #24
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	607a      	str	r2, [r7, #4]
 8002a6a:	461a      	mov	r2, r3
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	72fb      	strb	r3, [r7, #11]
 8002a70:	4613      	mov	r3, r2
 8002a72:	72bb      	strb	r3, [r7, #10]
	 NRF24L01_CSN_LOW;
 8002a74:	2200      	movs	r2, #0
 8002a76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002a7a:	4811      	ldr	r0, [pc, #68]	; (8002ac0 <TM_NRF24L01_WriteRegisterMulti+0x60>)
 8002a7c:	f7fe f832 	bl	8000ae4 <HAL_GPIO_WritePin>
	
	 uint8_t pData = NRF24L01_WRITE_REGISTER_MASK(reg);
 8002a80:	7afb      	ldrb	r3, [r7, #11]
 8002a82:	f003 031f 	and.w	r3, r3, #31
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	f043 0320 	orr.w	r3, r3, #32
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	75fb      	strb	r3, [r7, #23]
	 HAL_SPI_Transmit(hspi, &pData, 1, 200);
 8002a90:	f107 0117 	add.w	r1, r7, #23
 8002a94:	23c8      	movs	r3, #200	; 0xc8
 8002a96:	2201      	movs	r2, #1
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f7fe fe5f 	bl	800175c <HAL_SPI_Transmit>
   HAL_SPI_Transmit(hspi, data, count, 200);
 8002a9e:	7abb      	ldrb	r3, [r7, #10]
 8002aa0:	b29a      	uxth	r2, r3
 8002aa2:	23c8      	movs	r3, #200	; 0xc8
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	68f8      	ldr	r0, [r7, #12]
 8002aa8:	f7fe fe58 	bl	800175c <HAL_SPI_Transmit>
	
   NRF24L01_CSN_HIGH;
 8002aac:	2201      	movs	r2, #1
 8002aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ab2:	4803      	ldr	r0, [pc, #12]	; (8002ac0 <TM_NRF24L01_WriteRegisterMulti+0x60>)
 8002ab4:	f7fe f816 	bl	8000ae4 <HAL_GPIO_WritePin>
}
 8002ab8:	bf00      	nop
 8002aba:	3718      	adds	r7, #24
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40020000 	.word	0x40020000

08002ac4 <TM_NRF24L01_ReadRegister>:
/**********************************************************************************************************/
uint8_t TM_NRF24L01_ReadRegister(SPI_HandleTypeDef *hspi, uint8_t reg) 
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	460b      	mov	r3, r1
 8002ace:	70fb      	strb	r3, [r7, #3]
	 NRF24L01_CSN_LOW;
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ad6:	4813      	ldr	r0, [pc, #76]	; (8002b24 <TM_NRF24L01_ReadRegister+0x60>)
 8002ad8:	f7fe f804 	bl	8000ae4 <HAL_GPIO_WritePin>
	
   uint8_t value;
	 uint8_t pData = NRF24L01_READ_REGISTER_MASK(reg);
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	f003 031f 	and.w	r3, r3, #31
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	73bb      	strb	r3, [r7, #14]
   HAL_SPI_Transmit(hspi, &pData, 1, 200);
 8002ae6:	f107 010e 	add.w	r1, r7, #14
 8002aea:	23c8      	movs	r3, #200	; 0xc8
 8002aec:	2201      	movs	r2, #1
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fe fe34 	bl	800175c <HAL_SPI_Transmit>
	
	 pData = NRF24L01_NOP_MASK;
 8002af4:	23ff      	movs	r3, #255	; 0xff
 8002af6:	73bb      	strb	r3, [r7, #14]
	 HAL_SPI_TransmitReceive(hspi, &pData, &value, 1, 200);
 8002af8:	f107 020f 	add.w	r2, r7, #15
 8002afc:	f107 010e 	add.w	r1, r7, #14
 8002b00:	23c8      	movs	r3, #200	; 0xc8
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2301      	movs	r3, #1
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fe ff5c 	bl	80019c4 <HAL_SPI_TransmitReceive>
	
   NRF24L01_CSN_HIGH;
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002b12:	4804      	ldr	r0, [pc, #16]	; (8002b24 <TM_NRF24L01_ReadRegister+0x60>)
 8002b14:	f7fd ffe6 	bl	8000ae4 <HAL_GPIO_WritePin>
   
   return value;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	bf00      	nop
 8002b24:	40020000 	.word	0x40020000

08002b28 <TM_NRF24L01_Init>:
   }
   return 1;
}
/**********************************************************************************************************/
uint8_t TM_NRF24L01_Init(SPI_HandleTypeDef *hspi, uint8_t channel, uint8_t payload_size) 
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	70fb      	strb	r3, [r7, #3]
 8002b34:	4613      	mov	r3, r2
 8002b36:	70bb      	strb	r3, [r7, #2]
   /* Initialize CE and CSN pins */
   TM_NRF24L01_InitPins();
 8002b38:	f7ff ff10 	bl	800295c <TM_NRF24L01_InitPins>
   
   /* Max payload is 32bytes */
   if (payload_size > 32) {
 8002b3c:	78bb      	ldrb	r3, [r7, #2]
 8002b3e:	2b20      	cmp	r3, #32
 8002b40:	d901      	bls.n	8002b46 <TM_NRF24L01_Init+0x1e>
      payload_size = 32;
 8002b42:	2320      	movs	r3, #32
 8002b44:	70bb      	strb	r3, [r7, #2]
   }
   
   /* Fill structure */
   TM_NRF24L01_Struct.Channel = !channel; /* Set channel to some different value for TM_NRF24L01_SetChannel() function */
 8002b46:	78fb      	ldrb	r3, [r7, #3]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	461a      	mov	r2, r3
 8002b54:	4b37      	ldr	r3, [pc, #220]	; (8002c34 <TM_NRF24L01_Init+0x10c>)
 8002b56:	705a      	strb	r2, [r3, #1]
   TM_NRF24L01_Struct.PayloadSize = payload_size;
 8002b58:	4a36      	ldr	r2, [pc, #216]	; (8002c34 <TM_NRF24L01_Init+0x10c>)
 8002b5a:	78bb      	ldrb	r3, [r7, #2]
 8002b5c:	7013      	strb	r3, [r2, #0]
   TM_NRF24L01_Struct.OutPwr = TM_NRF24L01_OutputPower_0dBm;
 8002b5e:	4b35      	ldr	r3, [pc, #212]	; (8002c34 <TM_NRF24L01_Init+0x10c>)
 8002b60:	2203      	movs	r2, #3
 8002b62:	709a      	strb	r2, [r3, #2]
   TM_NRF24L01_Struct.DataRate = TM_NRF24L01_DataRate_2M;
 8002b64:	4b33      	ldr	r3, [pc, #204]	; (8002c34 <TM_NRF24L01_Init+0x10c>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	70da      	strb	r2, [r3, #3]
   
   /* Reset nRF24L01+ to power on registers values */
   TM_NRF24L01_SoftwareReset(hspi);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f9aa 	bl	8002ec4 <TM_NRF24L01_SoftwareReset>
   
   /* Channel select */
   TM_NRF24L01_SetChannel(hspi, channel);
 8002b70:	78fb      	ldrb	r3, [r7, #3]
 8002b72:	4619      	mov	r1, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 fa53 	bl	8003020 <TM_NRF24L01_SetChannel>
   
   /* Set pipeline to max possible 32 bytes */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P0, TM_NRF24L01_Struct.PayloadSize); // Auto-ACK pipe
 8002b7a:	4b2e      	ldr	r3, [pc, #184]	; (8002c34 <TM_NRF24L01_Init+0x10c>)
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	461a      	mov	r2, r3
 8002b80:	2111      	movs	r1, #17
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ff3c 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P1, TM_NRF24L01_Struct.PayloadSize); // Data TM_NRF24L01_SetMyAddress pipe
 8002b88:	4b2a      	ldr	r3, [pc, #168]	; (8002c34 <TM_NRF24L01_Init+0x10c>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	461a      	mov	r2, r3
 8002b8e:	2112      	movs	r1, #18
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff ff35 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P2, TM_NRF24L01_Struct.PayloadSize);
 8002b96:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <TM_NRF24L01_Init+0x10c>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	2113      	movs	r1, #19
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7ff ff2e 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P3, TM_NRF24L01_Struct.PayloadSize);
 8002ba4:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <TM_NRF24L01_Init+0x10c>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2114      	movs	r1, #20
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f7ff ff27 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P4, TM_NRF24L01_Struct.PayloadSize);
 8002bb2:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <TM_NRF24L01_Init+0x10c>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2115      	movs	r1, #21
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f7ff ff20 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P5, TM_NRF24L01_Struct.PayloadSize);
 8002bc0:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <TM_NRF24L01_Init+0x10c>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	2116      	movs	r1, #22
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f7ff ff19 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   
   /* Set RF settings (2mbps, output power) */
   TM_NRF24L01_SetRF(hspi, TM_NRF24L01_Struct.DataRate, TM_NRF24L01_Struct.OutPwr);
 8002bce:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <TM_NRF24L01_Init+0x10c>)
 8002bd0:	78d9      	ldrb	r1, [r3, #3]
 8002bd2:	4b18      	ldr	r3, [pc, #96]	; (8002c34 <TM_NRF24L01_Init+0x10c>)
 8002bd4:	789b      	ldrb	r3, [r3, #2]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f000 fa3f 	bl	800305c <TM_NRF24L01_SetRF>
   
   /* Config register */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_CONFIG, NRF24L01_CONFIG);
 8002bde:	2208      	movs	r2, #8
 8002be0:	2100      	movs	r1, #0
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f7ff ff0c 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   
   /* Enable auto-acknowledgment for all pipes */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_EN_AA, 0x3F);
 8002be8:	223f      	movs	r2, #63	; 0x3f
 8002bea:	2101      	movs	r1, #1
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f7ff ff07 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   
   /* Enable RX addresses */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_EN_RXADDR, 0x3F);
 8002bf2:	223f      	movs	r2, #63	; 0x3f
 8002bf4:	2102      	movs	r1, #2
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7ff ff02 	bl	8002a00 <TM_NRF24L01_WriteRegister>

   /* Auto retransmit delay: 200 (4x250) us and Up to 15 retransmit trials */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_SETUP_RETR, 0x4F);
 8002bfc:	224f      	movs	r2, #79	; 0x4f
 8002bfe:	2104      	movs	r1, #4
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f7ff fefd 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   
   /* Dynamic length configurations: No dynamic length */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_DYNPD, (0 << NRF24L01_DPL_P0) | (0 << NRF24L01_DPL_P1) | (0 << NRF24L01_DPL_P2) | (0 << NRF24L01_DPL_P3) | (0 << NRF24L01_DPL_P4) | (0 << NRF24L01_DPL_P5));
 8002c06:	2200      	movs	r2, #0
 8002c08:	211c      	movs	r1, #28
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f7ff fef8 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   
   /* Clear FIFOs */
   NRF24L01_FlushTX(hspi);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7ff feb5 	bl	8002980 <NRF24L01_FlushTX>
   NRF24L01_FlushRX(hspi);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff fed2 	bl	80029c0 <NRF24L01_FlushRX>
   
   /* Clear interrupts */
   TM_NRF24L01_Clear_Interrupts(hspi);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 fa5f 	bl	80030e0 <TM_NRF24L01_Clear_Interrupts>
   
   /* Go to RX mode */
   TM_NRF24L01_PowerUpRx(hspi);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f84c 	bl	8002cc0 <TM_NRF24L01_PowerUpRx>
   
   /* Return OK */
   return 1;
 8002c28:	2301      	movs	r3, #1
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000028 	.word	0x20000028

08002c38 <TM_NRF24L01_SetMyAddress>:
/**********************************************************************************************************/
void TM_NRF24L01_SetMyAddress(SPI_HandleTypeDef *hspi, uint8_t *adr) 
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
   NRF24L01_CE_LOW;
 8002c42:	2200      	movs	r2, #0
 8002c44:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c48:	4809      	ldr	r0, [pc, #36]	; (8002c70 <TM_NRF24L01_SetMyAddress+0x38>)
 8002c4a:	f7fd ff4b 	bl	8000ae4 <HAL_GPIO_WritePin>
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_RX_ADDR_P1, adr, 5);
 8002c4e:	2305      	movs	r3, #5
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	210b      	movs	r1, #11
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff03 	bl	8002a60 <TM_NRF24L01_WriteRegisterMulti>
   NRF24L01_CE_HIGH;
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c60:	4803      	ldr	r0, [pc, #12]	; (8002c70 <TM_NRF24L01_SetMyAddress+0x38>)
 8002c62:	f7fd ff3f 	bl	8000ae4 <HAL_GPIO_WritePin>
}
 8002c66:	bf00      	nop
 8002c68:	3708      	adds	r7, #8
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	40020000 	.word	0x40020000

08002c74 <TM_NRF24L01_SetTxAddress>:
/**********************************************************************************************************/
void TM_NRF24L01_SetTxAddress(SPI_HandleTypeDef *hspi, uint8_t *adr)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_RX_ADDR_P0, adr, 5);
 8002c7e:	2305      	movs	r3, #5
 8002c80:	683a      	ldr	r2, [r7, #0]
 8002c82:	210a      	movs	r1, #10
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff feeb 	bl	8002a60 <TM_NRF24L01_WriteRegisterMulti>
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_TX_ADDR, adr, 5);
 8002c8a:	2305      	movs	r3, #5
 8002c8c:	683a      	ldr	r2, [r7, #0]
 8002c8e:	2110      	movs	r1, #16
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff fee5 	bl	8002a60 <TM_NRF24L01_WriteRegisterMulti>
}
 8002c96:	bf00      	nop
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <TM_NRF24L01_PowerUpTx>:
/**********************************************************************************************************/
void TM_NRF24L01_PowerUpTx(SPI_HandleTypeDef *hspi) 
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
   TM_NRF24L01_Clear_Interrupts(hspi);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fa1a 	bl	80030e0 <TM_NRF24L01_Clear_Interrupts>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_CONFIG, NRF24L01_CONFIG | (0 << NRF24L01_PRIM_RX) | (1 << NRF24L01_PWR_UP));
 8002cac:	220a      	movs	r2, #10
 8002cae:	2100      	movs	r1, #0
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f7ff fea5 	bl	8002a00 <TM_NRF24L01_WriteRegister>
}
 8002cb6:	bf00      	nop
 8002cb8:	3708      	adds	r7, #8
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
	...

08002cc0 <TM_NRF24L01_PowerUpRx>:
/**********************************************************************************************************/
void TM_NRF24L01_PowerUpRx(SPI_HandleTypeDef *hspi) 
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
   /* Disable RX/TX mode */
   NRF24L01_CE_LOW;
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cce:	480c      	ldr	r0, [pc, #48]	; (8002d00 <TM_NRF24L01_PowerUpRx+0x40>)
 8002cd0:	f7fd ff08 	bl	8000ae4 <HAL_GPIO_WritePin>
   /* Clear RX buffer */
   NRF24L01_FlushRX(hspi);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff fe73 	bl	80029c0 <NRF24L01_FlushRX>
   /* Clear interrupts */
   TM_NRF24L01_Clear_Interrupts(hspi);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fa00 	bl	80030e0 <TM_NRF24L01_Clear_Interrupts>
   /* Setup RX mode */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_CONFIG, NRF24L01_CONFIG | 1 << NRF24L01_PWR_UP | 1 << NRF24L01_PRIM_RX);
 8002ce0:	220b      	movs	r2, #11
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f7ff fe8b 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   /* Start listening */
   NRF24L01_CE_HIGH;
 8002cea:	2201      	movs	r2, #1
 8002cec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002cf0:	4803      	ldr	r0, [pc, #12]	; (8002d00 <TM_NRF24L01_PowerUpRx+0x40>)
 8002cf2:	f7fd fef7 	bl	8000ae4 <HAL_GPIO_WritePin>
}
 8002cf6:	bf00      	nop
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40020000 	.word	0x40020000

08002d04 <TM_NRF24L01_Transmit>:
   NRF24L01_CE_LOW;
   TM_NRF24L01_WriteBit(hspi, NRF24L01_REG_CONFIG, NRF24L01_PWR_UP, 0);
}
/**********************************************************************************************************/
void TM_NRF24L01_Transmit(SPI_HandleTypeDef *hspi, uint8_t *data) 
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
	 uint8_t pData = NRF24L01_W_TX_PAYLOAD_MASK;
 8002d0e:	23a0      	movs	r3, #160	; 0xa0
 8002d10:	73bb      	strb	r3, [r7, #14]
   uint8_t count = TM_NRF24L01_Struct.PayloadSize;
 8002d12:	4b19      	ldr	r3, [pc, #100]	; (8002d78 <TM_NRF24L01_Transmit+0x74>)
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	73fb      	strb	r3, [r7, #15]

   /* Chip enable put to low, disable it */
   NRF24L01_CE_LOW;
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d1e:	4817      	ldr	r0, [pc, #92]	; (8002d7c <TM_NRF24L01_Transmit+0x78>)
 8002d20:	f7fd fee0 	bl	8000ae4 <HAL_GPIO_WritePin>
   
   /* Go to power up tx mode */
   TM_NRF24L01_PowerUpTx(hspi);
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	f7ff ffba 	bl	8002c9e <TM_NRF24L01_PowerUpTx>
   
   /* Clear TX FIFO from NRF24L01+ */
   NRF24L01_FlushTX(hspi);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff fe28 	bl	8002980 <NRF24L01_FlushTX>
   
   /* Send payload to nRF24L01+ */
   NRF24L01_CSN_LOW;
 8002d30:	2200      	movs	r2, #0
 8002d32:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d36:	4811      	ldr	r0, [pc, #68]	; (8002d7c <TM_NRF24L01_Transmit+0x78>)
 8002d38:	f7fd fed4 	bl	8000ae4 <HAL_GPIO_WritePin>
   /* Send write payload command */
	 HAL_SPI_Transmit(hspi, &pData, 1, 200);
 8002d3c:	f107 010e 	add.w	r1, r7, #14
 8002d40:	23c8      	movs	r3, #200	; 0xc8
 8002d42:	2201      	movs	r2, #1
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f7fe fd09 	bl	800175c <HAL_SPI_Transmit>
   /* Fill payload with data*/
	 HAL_SPI_Transmit(hspi, data, count, 200);
 8002d4a:	7bfb      	ldrb	r3, [r7, #15]
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	23c8      	movs	r3, #200	; 0xc8
 8002d50:	6839      	ldr	r1, [r7, #0]
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f7fe fd02 	bl	800175c <HAL_SPI_Transmit>
   /* Disable SPI */
   NRF24L01_CSN_HIGH;
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d5e:	4807      	ldr	r0, [pc, #28]	; (8002d7c <TM_NRF24L01_Transmit+0x78>)
 8002d60:	f7fd fec0 	bl	8000ae4 <HAL_GPIO_WritePin>
   
   /* Send data! */
   NRF24L01_CE_HIGH;
 8002d64:	2201      	movs	r2, #1
 8002d66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d6a:	4804      	ldr	r0, [pc, #16]	; (8002d7c <TM_NRF24L01_Transmit+0x78>)
 8002d6c:	f7fd feba 	bl	8000ae4 <HAL_GPIO_WritePin>
}
 8002d70:	bf00      	nop
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	20000028 	.word	0x20000028
 8002d7c:	40020000 	.word	0x40020000

08002d80 <TM_NRF24L01_GetData>:
/**********************************************************************************************************/
void TM_NRF24L01_GetData(SPI_HandleTypeDef *hspi, uint8_t* data) 
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b086      	sub	sp, #24
 8002d84:	af02      	add	r7, sp, #8
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
   /* Pull down chip select */
   NRF24L01_CSN_LOW;
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d90:	4812      	ldr	r0, [pc, #72]	; (8002ddc <TM_NRF24L01_GetData+0x5c>)
 8002d92:	f7fd fea7 	bl	8000ae4 <HAL_GPIO_WritePin>
   /* Send read payload command*/
	 uint8_t pData = NRF24L01_R_RX_PAYLOAD_MASK;
 8002d96:	2361      	movs	r3, #97	; 0x61
 8002d98:	73fb      	strb	r3, [r7, #15]
	 HAL_SPI_Transmit(hspi, &pData, 1, 200);
 8002d9a:	f107 010f 	add.w	r1, r7, #15
 8002d9e:	23c8      	movs	r3, #200	; 0xc8
 8002da0:	2201      	movs	r2, #1
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f7fe fcda 	bl	800175c <HAL_SPI_Transmit>
   /* Read payload */
   //for (int i=0;i<TM_NRF24L01_Struct.PayloadSize; i++){
	 HAL_SPI_TransmitReceive(hspi, data, data,	TM_NRF24L01_Struct.PayloadSize, 200);
 8002da8:	4b0d      	ldr	r3, [pc, #52]	; (8002de0 <TM_NRF24L01_GetData+0x60>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	b29a      	uxth	r2, r3
 8002dae:	23c8      	movs	r3, #200	; 0xc8
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	4613      	mov	r3, r2
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	6839      	ldr	r1, [r7, #0]
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7fe fe03 	bl	80019c4 <HAL_SPI_TransmitReceive>
   //}
   /* Pull up chip select */
   NRF24L01_CSN_HIGH;
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002dc4:	4805      	ldr	r0, [pc, #20]	; (8002ddc <TM_NRF24L01_GetData+0x5c>)
 8002dc6:	f7fd fe8d 	bl	8000ae4 <HAL_GPIO_WritePin>
   
   /* Reset status register, clear RX_DR interrupt flag */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_STATUS, (1 << NRF24L01_RX_DR));
 8002dca:	2240      	movs	r2, #64	; 0x40
 8002dcc:	2107      	movs	r1, #7
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff fe16 	bl	8002a00 <TM_NRF24L01_WriteRegister>
}
 8002dd4:	bf00      	nop
 8002dd6:	3710      	adds	r7, #16
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40020000 	.word	0x40020000
 8002de0:	20000028 	.word	0x20000028

08002de4 <TM_NRF24L01_DataReady>:



/**********************************************************************************************************/
uint8_t TM_NRF24L01_DataReady(SPI_HandleTypeDef *hspi) 
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b084      	sub	sp, #16
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
   uint8_t status = TM_NRF24L01_GetStatus(hspi);
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 f829 	bl	8002e44 <TM_NRF24L01_GetStatus>
 8002df2:	4603      	mov	r3, r0
 8002df4:	73fb      	strb	r3, [r7, #15]
   
   if (NRF24L01_CHECK_BIT(status, NRF24L01_RX_DR)) 
 8002df6:	7bfb      	ldrb	r3, [r7, #15]
 8002df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <TM_NRF24L01_DataReady+0x20>
	 {
      return 1;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e008      	b.n	8002e16 <TM_NRF24L01_DataReady+0x32>
   }
   return !TM_NRF24L01_RxFifoEmpty(hspi);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f000 f80a 	bl	8002e1e <TM_NRF24L01_RxFifoEmpty>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf0c      	ite	eq
 8002e10:	2301      	moveq	r3, #1
 8002e12:	2300      	movne	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <TM_NRF24L01_RxFifoEmpty>:
/**********************************************************************************************************/
uint8_t TM_NRF24L01_RxFifoEmpty(SPI_HandleTypeDef *hspi) 
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b084      	sub	sp, #16
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
   uint8_t reg = TM_NRF24L01_ReadRegister(hspi, NRF24L01_REG_FIFO_STATUS);
 8002e26:	2117      	movs	r1, #23
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f7ff fe4b 	bl	8002ac4 <TM_NRF24L01_ReadRegister>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	73fb      	strb	r3, [r7, #15]
   return NRF24L01_CHECK_BIT(reg, NRF24L01_RX_EMPTY);
 8002e32:	7bfb      	ldrb	r3, [r7, #15]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	b2db      	uxtb	r3, r3
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <TM_NRF24L01_GetStatus>:
/**********************************************************************************************************/
uint8_t TM_NRF24L01_GetStatus(SPI_HandleTypeDef *hspi) 
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	6078      	str	r0, [r7, #4]
   uint8_t status;
   
   NRF24L01_CSN_LOW;
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e52:	480d      	ldr	r0, [pc, #52]	; (8002e88 <TM_NRF24L01_GetStatus+0x44>)
 8002e54:	f7fd fe46 	bl	8000ae4 <HAL_GPIO_WritePin>
   /* First received byte is always status register */
	 uint8_t pData = NRF24L01_NOP_MASK;
 8002e58:	23ff      	movs	r3, #255	; 0xff
 8002e5a:	73bb      	strb	r3, [r7, #14]
	 //uint8_t pData = NRF24L01_NOP_MASK;
	 HAL_SPI_TransmitReceive(hspi, &pData, &status,	1, 200);
 8002e5c:	f107 020f 	add.w	r2, r7, #15
 8002e60:	f107 010e 	add.w	r1, r7, #14
 8002e64:	23c8      	movs	r3, #200	; 0xc8
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	2301      	movs	r3, #1
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f7fe fdaa 	bl	80019c4 <HAL_SPI_TransmitReceive>
   /* Pull up chip select */
   NRF24L01_CSN_HIGH;
 8002e70:	2201      	movs	r2, #1
 8002e72:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e76:	4804      	ldr	r0, [pc, #16]	; (8002e88 <TM_NRF24L01_GetStatus+0x44>)
 8002e78:	f7fd fe34 	bl	8000ae4 <HAL_GPIO_WritePin>
   
   return status;
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40020000 	.word	0x40020000

08002e8c <TM_NRF24L01_GetTransmissionStatus>:
/**********************************************************************************************************/
TM_NRF24L01_Transmit_Status_t TM_NRF24L01_GetTransmissionStatus(SPI_HandleTypeDef *hspi) 
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
   uint8_t status = TM_NRF24L01_GetStatus(hspi);
 8002e94:	6878      	ldr	r0, [r7, #4]
 8002e96:	f7ff ffd5 	bl	8002e44 <TM_NRF24L01_GetStatus>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	73fb      	strb	r3, [r7, #15]
   if (NRF24L01_CHECK_BIT(status, NRF24L01_TX_DS)) {
 8002e9e:	7bfb      	ldrb	r3, [r7, #15]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <TM_NRF24L01_GetTransmissionStatus+0x20>
      /* Successfully sent */
      return TM_NRF24L01_Transmit_Status_Ok;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e007      	b.n	8002ebc <TM_NRF24L01_GetTransmissionStatus+0x30>
   } else if (NRF24L01_CHECK_BIT(status, NRF24L01_MAX_RT)) {
 8002eac:	7bfb      	ldrb	r3, [r7, #15]
 8002eae:	f003 0310 	and.w	r3, r3, #16
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <TM_NRF24L01_GetTransmissionStatus+0x2e>
      /* Message lost */
      return TM_NRF24L01_Transmit_Status_Lost;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	e000      	b.n	8002ebc <TM_NRF24L01_GetTransmissionStatus+0x30>
   }
   
   /* Still sending */
   return TM_NRF24L01_Transmit_Status_Sending;
 8002eba:	23ff      	movs	r3, #255	; 0xff
}
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	3710      	adds	r7, #16
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <TM_NRF24L01_SoftwareReset>:
/**********************************************************************************************************/
void TM_NRF24L01_SoftwareReset(SPI_HandleTypeDef *hspi) 
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
   uint8_t data[5];
   
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_CONFIG,       NRF24L01_REG_DEFAULT_VAL_CONFIG);
 8002ecc:	2208      	movs	r2, #8
 8002ece:	2100      	movs	r1, #0
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f7ff fd95 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_EN_AA,      NRF24L01_REG_DEFAULT_VAL_EN_AA);
 8002ed6:	223f      	movs	r2, #63	; 0x3f
 8002ed8:	2101      	movs	r1, #1
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff fd90 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_EN_RXADDR,    NRF24L01_REG_DEFAULT_VAL_EN_RXADDR);
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	2102      	movs	r1, #2
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f7ff fd8b 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_SETUP_AW,    NRF24L01_REG_DEFAULT_VAL_SETUP_AW);
 8002eea:	2203      	movs	r2, #3
 8002eec:	2103      	movs	r1, #3
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff fd86 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_SETUP_RETR,    NRF24L01_REG_DEFAULT_VAL_SETUP_RETR);
 8002ef4:	2203      	movs	r2, #3
 8002ef6:	2104      	movs	r1, #4
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff fd81 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RF_CH,       NRF24L01_REG_DEFAULT_VAL_RF_CH);
 8002efe:	2205      	movs	r2, #5
 8002f00:	2105      	movs	r1, #5
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f7ff fd7c 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RF_SETUP,    NRF24L01_REG_DEFAULT_VAL_RF_SETUP);
 8002f08:	220e      	movs	r2, #14
 8002f0a:	2106      	movs	r1, #6
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	f7ff fd77 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_STATUS,       NRF24L01_REG_DEFAULT_VAL_STATUS);
 8002f12:	220e      	movs	r2, #14
 8002f14:	2107      	movs	r1, #7
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7ff fd72 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_OBSERVE_TX,    NRF24L01_REG_DEFAULT_VAL_OBSERVE_TX);
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	2108      	movs	r1, #8
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f7ff fd6d 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RPD,       NRF24L01_REG_DEFAULT_VAL_RPD);
 8002f26:	2200      	movs	r2, #0
 8002f28:	2109      	movs	r1, #9
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff fd68 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   
   //P0
   data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_0;
 8002f30:	23e7      	movs	r3, #231	; 0xe7
 8002f32:	723b      	strb	r3, [r7, #8]
   data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_1;
 8002f34:	23e7      	movs	r3, #231	; 0xe7
 8002f36:	727b      	strb	r3, [r7, #9]
   data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_2;
 8002f38:	23e7      	movs	r3, #231	; 0xe7
 8002f3a:	72bb      	strb	r3, [r7, #10]
   data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_3;
 8002f3c:	23e7      	movs	r3, #231	; 0xe7
 8002f3e:	72fb      	strb	r3, [r7, #11]
   data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_4;
 8002f40:	23e7      	movs	r3, #231	; 0xe7
 8002f42:	733b      	strb	r3, [r7, #12]
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_RX_ADDR_P0, data, 5);
 8002f44:	f107 0208 	add.w	r2, r7, #8
 8002f48:	2305      	movs	r3, #5
 8002f4a:	210a      	movs	r1, #10
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff fd87 	bl	8002a60 <TM_NRF24L01_WriteRegisterMulti>
   
   //P1
   data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_0;
 8002f52:	23c2      	movs	r3, #194	; 0xc2
 8002f54:	723b      	strb	r3, [r7, #8]
   data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_1;
 8002f56:	23c2      	movs	r3, #194	; 0xc2
 8002f58:	727b      	strb	r3, [r7, #9]
   data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_2;
 8002f5a:	23c2      	movs	r3, #194	; 0xc2
 8002f5c:	72bb      	strb	r3, [r7, #10]
   data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_3;
 8002f5e:	23c2      	movs	r3, #194	; 0xc2
 8002f60:	72fb      	strb	r3, [r7, #11]
   data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_4;
 8002f62:	23c2      	movs	r3, #194	; 0xc2
 8002f64:	733b      	strb	r3, [r7, #12]
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_RX_ADDR_P1, data, 5);
 8002f66:	f107 0208 	add.w	r2, r7, #8
 8002f6a:	2305      	movs	r3, #5
 8002f6c:	210b      	movs	r1, #11
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f7ff fd76 	bl	8002a60 <TM_NRF24L01_WriteRegisterMulti>
   
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_ADDR_P2,    NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P2);
 8002f74:	22c3      	movs	r2, #195	; 0xc3
 8002f76:	210c      	movs	r1, #12
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f7ff fd41 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_ADDR_P3,    NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P3);
 8002f7e:	22c4      	movs	r2, #196	; 0xc4
 8002f80:	210d      	movs	r1, #13
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f7ff fd3c 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_ADDR_P4,    NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P4);
 8002f88:	22c5      	movs	r2, #197	; 0xc5
 8002f8a:	210e      	movs	r1, #14
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f7ff fd37 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_ADDR_P5,    NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P5);
 8002f92:	22c6      	movs	r2, #198	; 0xc6
 8002f94:	210f      	movs	r1, #15
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff fd32 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   
   //TX
   data[0] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_0;
 8002f9c:	23e7      	movs	r3, #231	; 0xe7
 8002f9e:	723b      	strb	r3, [r7, #8]
   data[1] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_1;
 8002fa0:	23e7      	movs	r3, #231	; 0xe7
 8002fa2:	727b      	strb	r3, [r7, #9]
   data[2] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_2;
 8002fa4:	23e7      	movs	r3, #231	; 0xe7
 8002fa6:	72bb      	strb	r3, [r7, #10]
   data[3] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_3;
 8002fa8:	23e7      	movs	r3, #231	; 0xe7
 8002faa:	72fb      	strb	r3, [r7, #11]
   data[4] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_4;
 8002fac:	23e7      	movs	r3, #231	; 0xe7
 8002fae:	733b      	strb	r3, [r7, #12]
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_TX_ADDR, data, 5);
 8002fb0:	f107 0208 	add.w	r2, r7, #8
 8002fb4:	2305      	movs	r3, #5
 8002fb6:	2110      	movs	r1, #16
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f7ff fd51 	bl	8002a60 <TM_NRF24L01_WriteRegisterMulti>
   
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P0,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P0);
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	2111      	movs	r1, #17
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fd1c 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P1,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P1);
 8002fc8:	2200      	movs	r2, #0
 8002fca:	2112      	movs	r1, #18
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff fd17 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P2,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P2);
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	2113      	movs	r1, #19
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7ff fd12 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P3,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P3);
 8002fdc:	2200      	movs	r2, #0
 8002fde:	2114      	movs	r1, #20
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	f7ff fd0d 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P4,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P4);
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	2115      	movs	r1, #21
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff fd08 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P5,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P5);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2116      	movs	r1, #22
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f7ff fd03 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_FIFO_STATUS, NRF24L01_REG_DEFAULT_VAL_FIFO_STATUS);
 8002ffa:	2211      	movs	r2, #17
 8002ffc:	2117      	movs	r1, #23
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f7ff fcfe 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_DYNPD,       NRF24L01_REG_DEFAULT_VAL_DYNPD);
 8003004:	2200      	movs	r2, #0
 8003006:	211c      	movs	r1, #28
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff fcf9 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_FEATURE,    NRF24L01_REG_DEFAULT_VAL_FEATURE);
 800300e:	2200      	movs	r2, #0
 8003010:	211d      	movs	r1, #29
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f7ff fcf4 	bl	8002a00 <TM_NRF24L01_WriteRegister>
}
 8003018:	bf00      	nop
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <TM_NRF24L01_SetChannel>:
   /* Low 4 bits */
   return TM_NRF24L01_ReadRegister(hspi, NRF24L01_REG_OBSERVE_TX) & 0x0F;
}
/**********************************************************************************************************/
void TM_NRF24L01_SetChannel(SPI_HandleTypeDef *hspi, uint8_t channel) 
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
   if (channel <= 125 && channel != TM_NRF24L01_Struct.Channel) 
 800302c:	78fb      	ldrb	r3, [r7, #3]
 800302e:	2b7d      	cmp	r3, #125	; 0x7d
 8003030:	d80d      	bhi.n	800304e <TM_NRF24L01_SetChannel+0x2e>
 8003032:	4b09      	ldr	r3, [pc, #36]	; (8003058 <TM_NRF24L01_SetChannel+0x38>)
 8003034:	785b      	ldrb	r3, [r3, #1]
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	429a      	cmp	r2, r3
 800303a:	d008      	beq.n	800304e <TM_NRF24L01_SetChannel+0x2e>
	 {
      /* Store new channel setting */
      TM_NRF24L01_Struct.Channel = channel;
 800303c:	4a06      	ldr	r2, [pc, #24]	; (8003058 <TM_NRF24L01_SetChannel+0x38>)
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	7053      	strb	r3, [r2, #1]
      /* Write channel */
      TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RF_CH, channel);
 8003042:	78fb      	ldrb	r3, [r7, #3]
 8003044:	461a      	mov	r2, r3
 8003046:	2105      	movs	r1, #5
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff fcd9 	bl	8002a00 <TM_NRF24L01_WriteRegister>
   }
}
 800304e:	bf00      	nop
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	20000028 	.word	0x20000028

0800305c <TM_NRF24L01_SetRF>:
/**********************************************************************************************************/
void TM_NRF24L01_SetRF(SPI_HandleTypeDef *hspi, TM_NRF24L01_DataRate_t DataRate, TM_NRF24L01_OutputPower_t OutPwr) 
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b084      	sub	sp, #16
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
 8003064:	460b      	mov	r3, r1
 8003066:	70fb      	strb	r3, [r7, #3]
 8003068:	4613      	mov	r3, r2
 800306a:	70bb      	strb	r3, [r7, #2]
   uint8_t tmp = 0;
 800306c:	2300      	movs	r3, #0
 800306e:	73fb      	strb	r3, [r7, #15]
   TM_NRF24L01_Struct.DataRate = DataRate;
 8003070:	4a1a      	ldr	r2, [pc, #104]	; (80030dc <TM_NRF24L01_SetRF+0x80>)
 8003072:	78fb      	ldrb	r3, [r7, #3]
 8003074:	70d3      	strb	r3, [r2, #3]
   TM_NRF24L01_Struct.OutPwr = OutPwr;
 8003076:	4a19      	ldr	r2, [pc, #100]	; (80030dc <TM_NRF24L01_SetRF+0x80>)
 8003078:	78bb      	ldrb	r3, [r7, #2]
 800307a:	7093      	strb	r3, [r2, #2]
   
   if (DataRate == TM_NRF24L01_DataRate_2M) {
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d104      	bne.n	800308c <TM_NRF24L01_SetRF+0x30>
      tmp |= 1 << NRF24L01_RF_DR_HIGH;
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	f043 0308 	orr.w	r3, r3, #8
 8003088:	73fb      	strb	r3, [r7, #15]
 800308a:	e006      	b.n	800309a <TM_NRF24L01_SetRF+0x3e>
   } else if (DataRate == TM_NRF24L01_DataRate_250k) {
 800308c:	78fb      	ldrb	r3, [r7, #3]
 800308e:	2b02      	cmp	r3, #2
 8003090:	d103      	bne.n	800309a <TM_NRF24L01_SetRF+0x3e>
      tmp |= 1 << NRF24L01_RF_DR_LOW;
 8003092:	7bfb      	ldrb	r3, [r7, #15]
 8003094:	f043 0320 	orr.w	r3, r3, #32
 8003098:	73fb      	strb	r3, [r7, #15]
   }
   /* If 1Mbps, all bits set to 0 */
   
   if (OutPwr == TM_NRF24L01_OutputPower_0dBm) {
 800309a:	78bb      	ldrb	r3, [r7, #2]
 800309c:	2b03      	cmp	r3, #3
 800309e:	d104      	bne.n	80030aa <TM_NRF24L01_SetRF+0x4e>
      tmp |= 3 << NRF24L01_RF_PWR;
 80030a0:	7bfb      	ldrb	r3, [r7, #15]
 80030a2:	f043 0306 	orr.w	r3, r3, #6
 80030a6:	73fb      	strb	r3, [r7, #15]
 80030a8:	e00e      	b.n	80030c8 <TM_NRF24L01_SetRF+0x6c>
   } else if (OutPwr == TM_NRF24L01_OutputPower_M6dBm) {
 80030aa:	78bb      	ldrb	r3, [r7, #2]
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d104      	bne.n	80030ba <TM_NRF24L01_SetRF+0x5e>
      tmp |= 2 << NRF24L01_RF_PWR;
 80030b0:	7bfb      	ldrb	r3, [r7, #15]
 80030b2:	f043 0304 	orr.w	r3, r3, #4
 80030b6:	73fb      	strb	r3, [r7, #15]
 80030b8:	e006      	b.n	80030c8 <TM_NRF24L01_SetRF+0x6c>
   } else if (OutPwr == TM_NRF24L01_OutputPower_M12dBm) {
 80030ba:	78bb      	ldrb	r3, [r7, #2]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d103      	bne.n	80030c8 <TM_NRF24L01_SetRF+0x6c>
      tmp |= 1 << NRF24L01_RF_PWR;
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	f043 0302 	orr.w	r3, r3, #2
 80030c6:	73fb      	strb	r3, [r7, #15]
   }
   
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RF_SETUP, tmp);
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	461a      	mov	r2, r3
 80030cc:	2106      	movs	r1, #6
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f7ff fc96 	bl	8002a00 <TM_NRF24L01_WriteRegister>
}
 80030d4:	bf00      	nop
 80030d6:	3710      	adds	r7, #16
 80030d8:	46bd      	mov	sp, r7
 80030da:	bd80      	pop	{r7, pc}
 80030dc:	20000028 	.word	0x20000028

080030e0 <TM_NRF24L01_Clear_Interrupts>:
   IRQ->Status = TM_NRF24L01_GetStatus(hspi);
   return IRQ->Status;
}
/**********************************************************************************************************/
void TM_NRF24L01_Clear_Interrupts(SPI_HandleTypeDef *hspi) 
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
   TM_NRF24L01_WriteRegister(hspi, 0x07, 0x70);
 80030e8:	2270      	movs	r2, #112	; 0x70
 80030ea:	2107      	movs	r1, #7
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f7ff fc87 	bl	8002a00 <TM_NRF24L01_WriteRegister>
}
 80030f2:	bf00      	nop
 80030f4:	3708      	adds	r7, #8
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}

080030fa <TM_NRF24L01_setCrcWidth>:

/**********************************************************************************************************/
void TM_NRF24L01_setCrcWidth(SPI_HandleTypeDef *hspi, uint8_t width) {
 80030fa:	b580      	push	{r7, lr}
 80030fc:	b084      	sub	sp, #16
 80030fe:	af00      	add	r7, sp, #0
 8003100:	6078      	str	r0, [r7, #4]
 8003102:	460b      	mov	r3, r1
 8003104:	70fb      	strb	r3, [r7, #3]

	uint8_t config = TM_NRF24L01_ReadRegister(hspi,NRF24L01_REG_CONFIG) & ~_NRF24L01P_CONFIG_CRC_MASK;
 8003106:	2100      	movs	r1, #0
 8003108:	6878      	ldr	r0, [r7, #4]
 800310a:	f7ff fcdb 	bl	8002ac4 <TM_NRF24L01_ReadRegister>
 800310e:	4603      	mov	r3, r0
 8003110:	f023 0303 	bic.w	r3, r3, #3
 8003114:	73fb      	strb	r3, [r7, #15]

    switch ( width ) {
 8003116:	78fb      	ldrb	r3, [r7, #3]
 8003118:	2b08      	cmp	r3, #8
 800311a:	d004      	beq.n	8003126 <TM_NRF24L01_setCrcWidth+0x2c>
 800311c:	2b10      	cmp	r3, #16
 800311e:	d007      	beq.n	8003130 <TM_NRF24L01_setCrcWidth+0x36>
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <TM_NRF24L01_setCrcWidth+0x40>
            config |= _NRF24L01P_CONFIG_CRC_16BIT;
            break;

        default:
            //error( "nRF24L01P: Invalid CRC Width setting %d\r\n", width );
            return;
 8003124:	e010      	b.n	8003148 <TM_NRF24L01_setCrcWidth+0x4e>
            config |= _NRF24L01P_CONFIG_CRC_8BIT;
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	f043 0303 	orr.w	r3, r3, #3
 800312c:	73fb      	strb	r3, [r7, #15]
            break;
 800312e:	e005      	b.n	800313c <TM_NRF24L01_setCrcWidth+0x42>
            config |= _NRF24L01P_CONFIG_CRC_16BIT;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	f043 0303 	orr.w	r3, r3, #3
 8003136:	73fb      	strb	r3, [r7, #15]
            break;
 8003138:	e000      	b.n	800313c <TM_NRF24L01_setCrcWidth+0x42>
            break;
 800313a:	bf00      	nop

    }

    TM_NRF24L01_WriteRegister(hspi,NRF24L01_REG_CONFIG, config);
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	461a      	mov	r2, r3
 8003140:	2100      	movs	r1, #0
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f7ff fc5c 	bl	8002a00 <TM_NRF24L01_WriteRegister>
    //setRegister(_NRF24L01P_REG_CONFIG, config);

}
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <TM_NRF24L01_disableAutoAcknowledge>:

/**********************************************************************************************************/
void TM_NRF24L01_disableAutoAcknowledge(SPI_HandleTypeDef *hspi) {
 800314e:	b580      	push	{r7, lr}
 8003150:	b082      	sub	sp, #8
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]

	TM_NRF24L01_WriteRegister(hspi,NRF24L01_REG_EN_AA, _NRF24L01P_EN_AA_NONE);
 8003156:	2200      	movs	r2, #0
 8003158:	2101      	movs	r1, #1
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7ff fc50 	bl	8002a00 <TM_NRF24L01_WriteRegister>

}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}

08003168 <initRadioLink>:

/**********************************************************************************************************/
void initRadioLink(void) {
 8003168:	b580      	push	{r7, lr}
 800316a:	b084      	sub	sp, #16
 800316c:	af00      	add	r7, sp, #0

	uint8_t TxAddress[] = {
 800316e:	4a1c      	ldr	r2, [pc, #112]	; (80031e0 <initRadioLink+0x78>)
 8003170:	f107 0308 	add.w	r3, r7, #8
 8003174:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003178:	6018      	str	r0, [r3, #0]
 800317a:	3304      	adds	r3, #4
 800317c:	7019      	strb	r1, [r3, #0]
	    0xE7,
	    0xE7
	};

	/* Receiver address */
	uint8_t MyAddress[] = {
 800317e:	4a19      	ldr	r2, [pc, #100]	; (80031e4 <initRadioLink+0x7c>)
 8003180:	463b      	mov	r3, r7
 8003182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003186:	6018      	str	r0, [r3, #0]
 8003188:	3304      	adds	r3, #4
 800318a:	7019      	strb	r1, [r3, #0]
	    0x7E,
	    0x7E
	};

	// init of the NRF module :
	    TM_NRF24L01_SoftwareReset(&hspi2);							// reset logiciel du module
 800318c:	4816      	ldr	r0, [pc, #88]	; (80031e8 <initRadioLink+0x80>)
 800318e:	f7ff fe99 	bl	8002ec4 <TM_NRF24L01_SoftwareReset>
	    TM_NRF24L01_Init(&hspi2, 50, 32);							// param�trage de la bande radio 2.4Ghz + 50Mhz, 32 bit de payload
 8003192:	2220      	movs	r2, #32
 8003194:	2132      	movs	r1, #50	; 0x32
 8003196:	4814      	ldr	r0, [pc, #80]	; (80031e8 <initRadioLink+0x80>)
 8003198:	f7ff fcc6 	bl	8002b28 <TM_NRF24L01_Init>
	    TM_NRF24L01_setCrcWidth(&hspi2, 8);							// param�trage du crc : 8 bits
 800319c:	2108      	movs	r1, #8
 800319e:	4812      	ldr	r0, [pc, #72]	; (80031e8 <initRadioLink+0x80>)
 80031a0:	f7ff ffab 	bl	80030fa <TM_NRF24L01_setCrcWidth>
	    TM_NRF24L01_disableAutoAcknowledge(&hspi2);					// d�sactivation de l'auto acknowledge
 80031a4:	4810      	ldr	r0, [pc, #64]	; (80031e8 <initRadioLink+0x80>)
 80031a6:	f7ff ffd2 	bl	800314e <TM_NRF24L01_disableAutoAcknowledge>
	    TM_NRF24L01_SetMyAddress(&hspi2, MyAddress);					// param�trage de l'adresse de r�ception
 80031aa:	463b      	mov	r3, r7
 80031ac:	4619      	mov	r1, r3
 80031ae:	480e      	ldr	r0, [pc, #56]	; (80031e8 <initRadioLink+0x80>)
 80031b0:	f7ff fd42 	bl	8002c38 <TM_NRF24L01_SetMyAddress>
	    TM_NRF24L01_SetTxAddress(&hspi2, TxAddress);					// param�trage de l'adresse de transmission
 80031b4:	f107 0308 	add.w	r3, r7, #8
 80031b8:	4619      	mov	r1, r3
 80031ba:	480b      	ldr	r0, [pc, #44]	; (80031e8 <initRadioLink+0x80>)
 80031bc:	f7ff fd5a 	bl	8002c74 <TM_NRF24L01_SetTxAddress>
	    TM_NRF24L01_SetChannel(&hspi2, 50);							// param�trage de la bande radio 2.4Ghz + 50Mhz, redondant
 80031c0:	2132      	movs	r1, #50	; 0x32
 80031c2:	4809      	ldr	r0, [pc, #36]	; (80031e8 <initRadioLink+0x80>)
 80031c4:	f7ff ff2c 	bl	8003020 <TM_NRF24L01_SetChannel>
	    TM_NRF24L01_SetRF(&hspi2, TM_NRF24L01_DataRate_1M, TM_NRF24L01_OutputPower_0dBm);	// param�trage de la vitesse de transmission radio et puissance d'�mission
 80031c8:	2203      	movs	r2, #3
 80031ca:	2101      	movs	r1, #1
 80031cc:	4806      	ldr	r0, [pc, #24]	; (80031e8 <initRadioLink+0x80>)
 80031ce:	f7ff ff45 	bl	800305c <TM_NRF24L01_SetRF>
	    TM_NRF24L01_PowerUpRx(&hspi2);								// mise en mode r�ception.( faible consommation dans ce mode )
 80031d2:	4805      	ldr	r0, [pc, #20]	; (80031e8 <initRadioLink+0x80>)
 80031d4:	f7ff fd74 	bl	8002cc0 <TM_NRF24L01_PowerUpRx>

}
 80031d8:	bf00      	nop
 80031da:	3710      	adds	r7, #16
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	08003594 	.word	0x08003594
 80031e4:	0800359c 	.word	0x0800359c
 80031e8:	20000030 	.word	0x20000030

080031ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	607b      	str	r3, [r7, #4]
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <HAL_MspInit+0x4c>)
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	4a0f      	ldr	r2, [pc, #60]	; (8003238 <HAL_MspInit+0x4c>)
 80031fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003200:	6453      	str	r3, [r2, #68]	; 0x44
 8003202:	4b0d      	ldr	r3, [pc, #52]	; (8003238 <HAL_MspInit+0x4c>)
 8003204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003206:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	603b      	str	r3, [r7, #0]
 8003212:	4b09      	ldr	r3, [pc, #36]	; (8003238 <HAL_MspInit+0x4c>)
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	4a08      	ldr	r2, [pc, #32]	; (8003238 <HAL_MspInit+0x4c>)
 8003218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800321c:	6413      	str	r3, [r2, #64]	; 0x40
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_MspInit+0x4c>)
 8003220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003226:	603b      	str	r3, [r7, #0]
 8003228:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_1);
 800322a:	2006      	movs	r0, #6
 800322c:	f7fd fa96 	bl	800075c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003230:	bf00      	nop
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40023800 	.word	0x40023800

0800323c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b08a      	sub	sp, #40	; 0x28
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003244:	f107 0314 	add.w	r3, r7, #20
 8003248:	2200      	movs	r2, #0
 800324a:	601a      	str	r2, [r3, #0]
 800324c:	605a      	str	r2, [r3, #4]
 800324e:	609a      	str	r2, [r3, #8]
 8003250:	60da      	str	r2, [r3, #12]
 8003252:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a19      	ldr	r2, [pc, #100]	; (80032c0 <HAL_I2C_MspInit+0x84>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d12b      	bne.n	80032b6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	613b      	str	r3, [r7, #16]
 8003262:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <HAL_I2C_MspInit+0x88>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	4a17      	ldr	r2, [pc, #92]	; (80032c4 <HAL_I2C_MspInit+0x88>)
 8003268:	f043 0302 	orr.w	r3, r3, #2
 800326c:	6313      	str	r3, [r2, #48]	; 0x30
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <HAL_I2C_MspInit+0x88>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f003 0302 	and.w	r3, r3, #2
 8003276:	613b      	str	r3, [r7, #16]
 8003278:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800327a:	23c0      	movs	r3, #192	; 0xc0
 800327c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800327e:	2312      	movs	r3, #18
 8003280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003282:	2301      	movs	r3, #1
 8003284:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003286:	2303      	movs	r3, #3
 8003288:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800328a:	2304      	movs	r3, #4
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800328e:	f107 0314 	add.w	r3, r7, #20
 8003292:	4619      	mov	r1, r3
 8003294:	480c      	ldr	r0, [pc, #48]	; (80032c8 <HAL_I2C_MspInit+0x8c>)
 8003296:	f7fd faa3 	bl	80007e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	4b09      	ldr	r3, [pc, #36]	; (80032c4 <HAL_I2C_MspInit+0x88>)
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	4a08      	ldr	r2, [pc, #32]	; (80032c4 <HAL_I2C_MspInit+0x88>)
 80032a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80032a8:	6413      	str	r3, [r2, #64]	; 0x40
 80032aa:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_I2C_MspInit+0x88>)
 80032ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80032b6:	bf00      	nop
 80032b8:	3728      	adds	r7, #40	; 0x28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40005400 	.word	0x40005400
 80032c4:	40023800 	.word	0x40023800
 80032c8:	40020400 	.word	0x40020400

080032cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b08a      	sub	sp, #40	; 0x28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032d4:	f107 0314 	add.w	r3, r7, #20
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	60da      	str	r2, [r3, #12]
 80032e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a28      	ldr	r2, [pc, #160]	; (800338c <HAL_SPI_MspInit+0xc0>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d14a      	bne.n	8003384 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	4b27      	ldr	r3, [pc, #156]	; (8003390 <HAL_SPI_MspInit+0xc4>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	4a26      	ldr	r2, [pc, #152]	; (8003390 <HAL_SPI_MspInit+0xc4>)
 80032f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80032fc:	6413      	str	r3, [r2, #64]	; 0x40
 80032fe:	4b24      	ldr	r3, [pc, #144]	; (8003390 <HAL_SPI_MspInit+0xc4>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	60fb      	str	r3, [r7, #12]
 800330e:	4b20      	ldr	r3, [pc, #128]	; (8003390 <HAL_SPI_MspInit+0xc4>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	4a1f      	ldr	r2, [pc, #124]	; (8003390 <HAL_SPI_MspInit+0xc4>)
 8003314:	f043 0304 	orr.w	r3, r3, #4
 8003318:	6313      	str	r3, [r2, #48]	; 0x30
 800331a:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <HAL_SPI_MspInit+0xc4>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331e:	f003 0304 	and.w	r3, r3, #4
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]
 800332a:	4b19      	ldr	r3, [pc, #100]	; (8003390 <HAL_SPI_MspInit+0xc4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a18      	ldr	r2, [pc, #96]	; (8003390 <HAL_SPI_MspInit+0xc4>)
 8003330:	f043 0302 	orr.w	r3, r3, #2
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	4b16      	ldr	r3, [pc, #88]	; (8003390 <HAL_SPI_MspInit+0xc4>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003342:	230c      	movs	r3, #12
 8003344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003346:	2302      	movs	r3, #2
 8003348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334a:	2300      	movs	r3, #0
 800334c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334e:	2303      	movs	r3, #3
 8003350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003352:	2305      	movs	r3, #5
 8003354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003356:	f107 0314 	add.w	r3, r7, #20
 800335a:	4619      	mov	r1, r3
 800335c:	480d      	ldr	r0, [pc, #52]	; (8003394 <HAL_SPI_MspInit+0xc8>)
 800335e:	f7fd fa3f 	bl	80007e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003366:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003368:	2302      	movs	r3, #2
 800336a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336c:	2300      	movs	r3, #0
 800336e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003370:	2303      	movs	r3, #3
 8003372:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003374:	2305      	movs	r3, #5
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003378:	f107 0314 	add.w	r3, r7, #20
 800337c:	4619      	mov	r1, r3
 800337e:	4806      	ldr	r0, [pc, #24]	; (8003398 <HAL_SPI_MspInit+0xcc>)
 8003380:	f7fd fa2e 	bl	80007e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003384:	bf00      	nop
 8003386:	3728      	adds	r7, #40	; 0x28
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}
 800338c:	40003800 	.word	0x40003800
 8003390:	40023800 	.word	0x40023800
 8003394:	40020800 	.word	0x40020800
 8003398:	40020400 	.word	0x40020400

0800339c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a4:	f107 0314 	add.w	r3, r7, #20
 80033a8:	2200      	movs	r2, #0
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	605a      	str	r2, [r3, #4]
 80033ae:	609a      	str	r2, [r3, #8]
 80033b0:	60da      	str	r2, [r3, #12]
 80033b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a19      	ldr	r2, [pc, #100]	; (8003420 <HAL_UART_MspInit+0x84>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d12b      	bne.n	8003416 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80033be:	2300      	movs	r3, #0
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	4b18      	ldr	r3, [pc, #96]	; (8003424 <HAL_UART_MspInit+0x88>)
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	4a17      	ldr	r2, [pc, #92]	; (8003424 <HAL_UART_MspInit+0x88>)
 80033c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033cc:	6413      	str	r3, [r2, #64]	; 0x40
 80033ce:	4b15      	ldr	r3, [pc, #84]	; (8003424 <HAL_UART_MspInit+0x88>)
 80033d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	613b      	str	r3, [r7, #16]
 80033d8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	60fb      	str	r3, [r7, #12]
 80033de:	4b11      	ldr	r3, [pc, #68]	; (8003424 <HAL_UART_MspInit+0x88>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a10      	ldr	r2, [pc, #64]	; (8003424 <HAL_UART_MspInit+0x88>)
 80033e4:	f043 0301 	orr.w	r3, r3, #1
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	4b0e      	ldr	r3, [pc, #56]	; (8003424 <HAL_UART_MspInit+0x88>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	60fb      	str	r3, [r7, #12]
 80033f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80033f6:	230c      	movs	r3, #12
 80033f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033fa:	2302      	movs	r3, #2
 80033fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80033fe:	2301      	movs	r3, #1
 8003400:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003402:	2303      	movs	r3, #3
 8003404:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003406:	2307      	movs	r3, #7
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800340a:	f107 0314 	add.w	r3, r7, #20
 800340e:	4619      	mov	r1, r3
 8003410:	4805      	ldr	r0, [pc, #20]	; (8003428 <HAL_UART_MspInit+0x8c>)
 8003412:	f7fd f9e5 	bl	80007e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003416:	bf00      	nop
 8003418:	3728      	adds	r7, #40	; 0x28
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	40004400 	.word	0x40004400
 8003424:	40023800 	.word	0x40023800
 8003428:	40020000 	.word	0x40020000

0800342c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003430:	bf00      	nop
 8003432:	46bd      	mov	sp, r7
 8003434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003438:	4770      	bx	lr

0800343a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800343a:	b480      	push	{r7}
 800343c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800343e:	e7fe      	b.n	800343e <HardFault_Handler+0x4>

08003440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003444:	e7fe      	b.n	8003444 <MemManage_Handler+0x4>

08003446 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003446:	b480      	push	{r7}
 8003448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800344a:	e7fe      	b.n	800344a <BusFault_Handler+0x4>

0800344c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800344c:	b480      	push	{r7}
 800344e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003450:	e7fe      	b.n	8003450 <UsageFault_Handler+0x4>

08003452 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003452:	b480      	push	{r7}
 8003454:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003456:	bf00      	nop
 8003458:	46bd      	mov	sp, r7
 800345a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345e:	4770      	bx	lr

08003460 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003464:	bf00      	nop
 8003466:	46bd      	mov	sp, r7
 8003468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346c:	4770      	bx	lr

0800346e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800346e:	b480      	push	{r7}
 8003470:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003472:	bf00      	nop
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003480:	f7fd f87c 	bl	800057c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003484:	bf00      	nop
 8003486:	bd80      	pop	{r7, pc}

08003488 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800348c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003490:	f7fd fb42 	bl	8000b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003494:	bf00      	nop
 8003496:	bd80      	pop	{r7, pc}

08003498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003498:	b480      	push	{r7}
 800349a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800349c:	4b08      	ldr	r3, [pc, #32]	; (80034c0 <SystemInit+0x28>)
 800349e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034a2:	4a07      	ldr	r2, [pc, #28]	; (80034c0 <SystemInit+0x28>)
 80034a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80034ac:	4b04      	ldr	r3, [pc, #16]	; (80034c0 <SystemInit+0x28>)
 80034ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034b2:	609a      	str	r2, [r3, #8]
#endif
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034fc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034c8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034ca:	e003      	b.n	80034d4 <LoopCopyDataInit>

080034cc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034ce:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034d0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034d2:	3104      	adds	r1, #4

080034d4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034d4:	480b      	ldr	r0, [pc, #44]	; (8003504 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034d6:	4b0c      	ldr	r3, [pc, #48]	; (8003508 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034d8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034da:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034dc:	d3f6      	bcc.n	80034cc <CopyDataInit>
  ldr  r2, =_sbss
 80034de:	4a0b      	ldr	r2, [pc, #44]	; (800350c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034e0:	e002      	b.n	80034e8 <LoopFillZerobss>

080034e2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034e2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034e4:	f842 3b04 	str.w	r3, [r2], #4

080034e8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034e8:	4b09      	ldr	r3, [pc, #36]	; (8003510 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034ea:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034ec:	d3f9      	bcc.n	80034e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034ee:	f7ff ffd3 	bl	8003498 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034f2:	f000 f811 	bl	8003518 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034f6:	f7ff f87d 	bl	80025f4 <main>
  bx  lr    
 80034fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034fc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003500:	080035cc 	.word	0x080035cc
  ldr  r0, =_sdata
 8003504:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003508:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800350c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8003510:	20000160 	.word	0x20000160

08003514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003514:	e7fe      	b.n	8003514 <ADC_IRQHandler>
	...

08003518 <__libc_init_array>:
 8003518:	b570      	push	{r4, r5, r6, lr}
 800351a:	4e0d      	ldr	r6, [pc, #52]	; (8003550 <__libc_init_array+0x38>)
 800351c:	4c0d      	ldr	r4, [pc, #52]	; (8003554 <__libc_init_array+0x3c>)
 800351e:	1ba4      	subs	r4, r4, r6
 8003520:	10a4      	asrs	r4, r4, #2
 8003522:	2500      	movs	r5, #0
 8003524:	42a5      	cmp	r5, r4
 8003526:	d109      	bne.n	800353c <__libc_init_array+0x24>
 8003528:	4e0b      	ldr	r6, [pc, #44]	; (8003558 <__libc_init_array+0x40>)
 800352a:	4c0c      	ldr	r4, [pc, #48]	; (800355c <__libc_init_array+0x44>)
 800352c:	f000 f820 	bl	8003570 <_init>
 8003530:	1ba4      	subs	r4, r4, r6
 8003532:	10a4      	asrs	r4, r4, #2
 8003534:	2500      	movs	r5, #0
 8003536:	42a5      	cmp	r5, r4
 8003538:	d105      	bne.n	8003546 <__libc_init_array+0x2e>
 800353a:	bd70      	pop	{r4, r5, r6, pc}
 800353c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003540:	4798      	blx	r3
 8003542:	3501      	adds	r5, #1
 8003544:	e7ee      	b.n	8003524 <__libc_init_array+0xc>
 8003546:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800354a:	4798      	blx	r3
 800354c:	3501      	adds	r5, #1
 800354e:	e7f2      	b.n	8003536 <__libc_init_array+0x1e>
 8003550:	080035c4 	.word	0x080035c4
 8003554:	080035c4 	.word	0x080035c4
 8003558:	080035c4 	.word	0x080035c4
 800355c:	080035c8 	.word	0x080035c8

08003560 <memset>:
 8003560:	4402      	add	r2, r0
 8003562:	4603      	mov	r3, r0
 8003564:	4293      	cmp	r3, r2
 8003566:	d100      	bne.n	800356a <memset+0xa>
 8003568:	4770      	bx	lr
 800356a:	f803 1b01 	strb.w	r1, [r3], #1
 800356e:	e7f9      	b.n	8003564 <memset+0x4>

08003570 <_init>:
 8003570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003572:	bf00      	nop
 8003574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003576:	bc08      	pop	{r3}
 8003578:	469e      	mov	lr, r3
 800357a:	4770      	bx	lr

0800357c <_fini>:
 800357c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357e:	bf00      	nop
 8003580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003582:	bc08      	pop	{r3}
 8003584:	469e      	mov	lr, r3
 8003586:	4770      	bx	lr
