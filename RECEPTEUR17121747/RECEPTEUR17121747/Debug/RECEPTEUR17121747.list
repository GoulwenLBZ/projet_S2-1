
RECEPTEUR17121747.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f28  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080040c0  080040c0  000140c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040e4  080040e4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  080040e4  080040e4  000140e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080040ec  080040ec  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040ec  080040ec  000140ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040f0  080040f0  000140f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  080040f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000194  2000001c  08004110  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08004110  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000101ad  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001fc3  00000000  00000000  000301f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001128  00000000  00000000  000321c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001050  00000000  00000000  000332e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017146  00000000  00000000  00034338  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ba61  00000000  00000000  0004b47e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00091edd  00000000  00000000  00056edf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e8dbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049c4  00000000  00000000  000e8e38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000001c 	.word	0x2000001c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080040a8 	.word	0x080040a8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000020 	.word	0x20000020
 80001d4:	080040a8 	.word	0x080040a8

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 ff5a 	bl	8001394 <HAL_Init>

  /* USER CODE BEGIN Init */
  sprintf(dataOut, "WorldHello");
 80004e0:	4a10      	ldr	r2, [pc, #64]	; (8000524 <main+0x4c>)
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <main+0x50>)
 80004e4:	cb03      	ldmia	r3!, {r0, r1}
 80004e6:	6010      	str	r0, [r2, #0]
 80004e8:	6051      	str	r1, [r2, #4]
 80004ea:	8819      	ldrh	r1, [r3, #0]
 80004ec:	789b      	ldrb	r3, [r3, #2]
 80004ee:	8111      	strh	r1, [r2, #8]
 80004f0:	7293      	strb	r3, [r2, #10]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f2:	f000 f81f 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f6:	f000 f965 	bl	80007c4 <MX_GPIO_Init>
  MX_SPI2_Init();
 80004fa:	f000 f8b1 	bl	8000660 <MX_SPI2_Init>
  MX_I2C1_Init();
 80004fe:	f000 f881 	bl	8000604 <MX_I2C1_Init>
  MX_TIM1_Init();
 8000502:	f000 f8e3 	bl	80006cc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000506:	f000 f933 	bl	8000770 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  initRadioLink();
 800050a:	f000 f9ad 	bl	8000868 <initRadioLink>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(TM_NRF24L01_DataReady(&hspi2)) {
 800050e:	4807      	ldr	r0, [pc, #28]	; (800052c <main+0x54>)
 8000510:	f000 fbca 	bl	8000ca8 <TM_NRF24L01_DataReady>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d0f9      	beq.n	800050e <main+0x36>

		  TM_NRF24L01_GetData(&hspi2, dataIn);
 800051a:	4905      	ldr	r1, [pc, #20]	; (8000530 <main+0x58>)
 800051c:	4803      	ldr	r0, [pc, #12]	; (800052c <main+0x54>)
 800051e:	f000 fb93 	bl	8000c48 <TM_NRF24L01_GetData>
	  if(TM_NRF24L01_DataReady(&hspi2)) {
 8000522:	e7f4      	b.n	800050e <main+0x36>
 8000524:	2000018c 	.word	0x2000018c
 8000528:	080040c0 	.word	0x080040c0
 800052c:	2000003c 	.word	0x2000003c
 8000530:	2000012c 	.word	0x2000012c

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	; 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	; 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f003 fda8 	bl	8004098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b27      	ldr	r3, [pc, #156]	; (80005fc <SystemClock_Config+0xc8>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000560:	4a26      	ldr	r2, [pc, #152]	; (80005fc <SystemClock_Config+0xc8>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	; 0x40
 8000568:	4b24      	ldr	r3, [pc, #144]	; (80005fc <SystemClock_Config+0xc8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b21      	ldr	r3, [pc, #132]	; (8000600 <SystemClock_Config+0xcc>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a20      	ldr	r2, [pc, #128]	; (8000600 <SystemClock_Config+0xcc>)
 800057e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <SystemClock_Config+0xcc>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2310      	movs	r3, #16
 800059a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a4:	2308      	movs	r3, #8
 80005a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 80005a8:	2354      	movs	r3, #84	; 0x54
 80005aa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 fb65 	bl	8001c88 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c4:	f000 f97e 	bl	80008c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005de:	f107 030c 	add.w	r3, r7, #12
 80005e2:	2102      	movs	r1, #2
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 fdbf 	bl	8002168 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80005f0:	f000 f968 	bl	80008c4 <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3750      	adds	r7, #80	; 0x50
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <MX_I2C1_Init+0x50>)
 800060a:	4a13      	ldr	r2, [pc, #76]	; (8000658 <MX_I2C1_Init+0x54>)
 800060c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_I2C1_Init+0x50>)
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <MX_I2C1_Init+0x58>)
 8000612:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000614:	4b0f      	ldr	r3, [pc, #60]	; (8000654 <MX_I2C1_Init+0x50>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_I2C1_Init+0x50>)
 800061c:	2200      	movs	r2, #0
 800061e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_I2C1_Init+0x50>)
 8000622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000626:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000628:	4b0a      	ldr	r3, [pc, #40]	; (8000654 <MX_I2C1_Init+0x50>)
 800062a:	2200      	movs	r2, #0
 800062c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_I2C1_Init+0x50>)
 8000630:	2200      	movs	r2, #0
 8000632:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000634:	4b07      	ldr	r3, [pc, #28]	; (8000654 <MX_I2C1_Init+0x50>)
 8000636:	2200      	movs	r2, #0
 8000638:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800063a:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_I2C1_Init+0x50>)
 800063c:	2200      	movs	r2, #0
 800063e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000640:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_I2C1_Init+0x50>)
 8000642:	f001 f9e9 	bl	8001a18 <HAL_I2C_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800064c:	f000 f93a 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000650:	bf00      	nop
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000094 	.word	0x20000094
 8000658:	40005400 	.word	0x40005400
 800065c:	000186a0 	.word	0x000186a0

08000660 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <MX_SPI2_Init+0x64>)
 8000666:	4a18      	ldr	r2, [pc, #96]	; (80006c8 <MX_SPI2_Init+0x68>)
 8000668:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800066a:	4b16      	ldr	r3, [pc, #88]	; (80006c4 <MX_SPI2_Init+0x64>)
 800066c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000670:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <MX_SPI2_Init+0x64>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000678:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <MX_SPI2_Init+0x64>)
 800067a:	2200      	movs	r2, #0
 800067c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800067e:	4b11      	ldr	r3, [pc, #68]	; (80006c4 <MX_SPI2_Init+0x64>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_SPI2_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800068a:	4b0e      	ldr	r3, [pc, #56]	; (80006c4 <MX_SPI2_Init+0x64>)
 800068c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000690:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_SPI2_Init+0x64>)
 8000694:	2220      	movs	r2, #32
 8000696:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000698:	4b0a      	ldr	r3, [pc, #40]	; (80006c4 <MX_SPI2_Init+0x64>)
 800069a:	2200      	movs	r2, #0
 800069c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_SPI2_Init+0x64>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006a4:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <MX_SPI2_Init+0x64>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_SPI2_Init+0x64>)
 80006ac:	220a      	movs	r2, #10
 80006ae:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006b0:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_SPI2_Init+0x64>)
 80006b2:	f001 ff25 	bl	8002500 <HAL_SPI_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80006bc:	f000 f902 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	2000003c 	.word	0x2000003c
 80006c8:	40003800 	.word	0x40003800

080006cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b086      	sub	sp, #24
 80006d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e0:	463b      	mov	r3, r7
 80006e2:	2200      	movs	r2, #0
 80006e4:	601a      	str	r2, [r3, #0]
 80006e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_TIM1_Init+0x9c>)
 80006ea:	4a20      	ldr	r2, [pc, #128]	; (800076c <MX_TIM1_Init+0xa0>)
 80006ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50000;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_TIM1_Init+0x9c>)
 80006f0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80006f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006f6:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_TIM1_Init+0x9c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50500;
 80006fc:	4b1a      	ldr	r3, [pc, #104]	; (8000768 <MX_TIM1_Init+0x9c>)
 80006fe:	f24c 5244 	movw	r2, #50500	; 0xc544
 8000702:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000704:	4b18      	ldr	r3, [pc, #96]	; (8000768 <MX_TIM1_Init+0x9c>)
 8000706:	2200      	movs	r2, #0
 8000708:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800070a:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_TIM1_Init+0x9c>)
 800070c:	2200      	movs	r2, #0
 800070e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000710:	4b15      	ldr	r3, [pc, #84]	; (8000768 <MX_TIM1_Init+0x9c>)
 8000712:	2200      	movs	r2, #0
 8000714:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000716:	4814      	ldr	r0, [pc, #80]	; (8000768 <MX_TIM1_Init+0x9c>)
 8000718:	f002 fad8 	bl	8002ccc <HAL_TIM_Base_Init>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000722:	f000 f8cf 	bl	80008c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000726:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	4619      	mov	r1, r3
 8000732:	480d      	ldr	r0, [pc, #52]	; (8000768 <MX_TIM1_Init+0x9c>)
 8000734:	f002 fbfd 	bl	8002f32 <HAL_TIM_ConfigClockSource>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800073e:	f000 f8c1 	bl	80008c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <MX_TIM1_Init+0x9c>)
 8000750:	f002 fdf2 	bl	8003338 <HAL_TIMEx_MasterConfigSynchronization>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800075a:	f000 f8b3 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3718      	adds	r7, #24
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	2000014c 	.word	0x2000014c
 800076c:	40010000 	.word	0x40010000

08000770 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000774:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 8000776:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_USART1_UART_Init+0x50>)
 8000778:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800077a:	4b10      	ldr	r3, [pc, #64]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 800077c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000780:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b08      	ldr	r3, [pc, #32]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_USART1_UART_Init+0x4c>)
 80007a8:	f002 fe48 	bl	800343c <HAL_UART_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007b2:	f000 f887 	bl	80008c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	200000e8 	.word	0x200000e8
 80007c0:	40011000 	.word	0x40011000

080007c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b088      	sub	sp, #32
 80007c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	2300      	movs	r3, #0
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	4b20      	ldr	r3, [pc, #128]	; (8000860 <MX_GPIO_Init+0x9c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a1f      	ldr	r2, [pc, #124]	; (8000860 <MX_GPIO_Init+0x9c>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b1d      	ldr	r3, [pc, #116]	; (8000860 <MX_GPIO_Init+0x9c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <MX_GPIO_Init+0x9c>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a18      	ldr	r2, [pc, #96]	; (8000860 <MX_GPIO_Init+0x9c>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <MX_GPIO_Init+0x9c>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4b12      	ldr	r3, [pc, #72]	; (8000860 <MX_GPIO_Init+0x9c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a11      	ldr	r2, [pc, #68]	; (8000860 <MX_GPIO_Init+0x9c>)
 800081c:	f043 0302 	orr.w	r3, r3, #2
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <MX_GPIO_Init+0x9c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0302 	and.w	r3, r3, #2
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSN_Pin|GPIO_PIN_5|CE_Pin, GPIO_PIN_RESET);
 800082e:	2200      	movs	r2, #0
 8000830:	f44f 7191 	mov.w	r1, #290	; 0x122
 8000834:	480b      	ldr	r0, [pc, #44]	; (8000864 <MX_GPIO_Init+0xa0>)
 8000836:	f001 f8d5 	bl	80019e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSN_Pin PA5 CE_Pin */
  GPIO_InitStruct.Pin = CSN_Pin|GPIO_PIN_5|CE_Pin;
 800083a:	f44f 7391 	mov.w	r3, #290	; 0x122
 800083e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000840:	2301      	movs	r3, #1
 8000842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000848:	2300      	movs	r3, #0
 800084a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800084c:	f107 030c 	add.w	r3, r7, #12
 8000850:	4619      	mov	r1, r3
 8000852:	4804      	ldr	r0, [pc, #16]	; (8000864 <MX_GPIO_Init+0xa0>)
 8000854:	f000 ff44 	bl	80016e0 <HAL_GPIO_Init>

}
 8000858:	bf00      	nop
 800085a:	3720      	adds	r7, #32
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40020000 	.word	0x40020000

08000868 <initRadioLink>:

/* USER CODE BEGIN 4 */
void initRadioLink(void) {										// fonction d'initialisation du module radio NRF24L01
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
    // init of the NRF module :
    TM_NRF24L01_SoftwareReset(&hspi2);							// reset logiciel du module
 800086c:	4812      	ldr	r0, [pc, #72]	; (80008b8 <initRadioLink+0x50>)
 800086e:	f000 fa6d 	bl	8000d4c <TM_NRF24L01_SoftwareReset>
    TM_NRF24L01_Init(&hspi2, 50, 32);							// param�trage de la bande radio 2.4Ghz + 50Mhz, 32 bit de payload
 8000872:	2220      	movs	r2, #32
 8000874:	2132      	movs	r1, #50	; 0x32
 8000876:	4810      	ldr	r0, [pc, #64]	; (80008b8 <initRadioLink+0x50>)
 8000878:	f000 f908 	bl	8000a8c <TM_NRF24L01_Init>
    TM_NRF24L01_setCrcWidth(&hspi2, 8);							// param�trage du crc : 8 bits
 800087c:	2108      	movs	r1, #8
 800087e:	480e      	ldr	r0, [pc, #56]	; (80008b8 <initRadioLink+0x50>)
 8000880:	f000 fb7f 	bl	8000f82 <TM_NRF24L01_setCrcWidth>
    TM_NRF24L01_disableAutoAcknowledge(&hspi2);					// d�sactivation de l'auto acknowledge
 8000884:	480c      	ldr	r0, [pc, #48]	; (80008b8 <initRadioLink+0x50>)
 8000886:	f000 fba6 	bl	8000fd6 <TM_NRF24L01_disableAutoAcknowledge>
    TM_NRF24L01_SetMyAddress(&hspi2, MyAddress);					// param�trage de l'adresse de r�ception
 800088a:	490c      	ldr	r1, [pc, #48]	; (80008bc <initRadioLink+0x54>)
 800088c:	480a      	ldr	r0, [pc, #40]	; (80008b8 <initRadioLink+0x50>)
 800088e:	f000 f985 	bl	8000b9c <TM_NRF24L01_SetMyAddress>
    TM_NRF24L01_SetTxAddress(&hspi2, TxAddress);					// param�trage de l'adresse de transmission
 8000892:	490b      	ldr	r1, [pc, #44]	; (80008c0 <initRadioLink+0x58>)
 8000894:	4808      	ldr	r0, [pc, #32]	; (80008b8 <initRadioLink+0x50>)
 8000896:	f000 f99f 	bl	8000bd8 <TM_NRF24L01_SetTxAddress>
    TM_NRF24L01_SetChannel(&hspi2, 50);							// param�trage de la bande radio 2.4Ghz + 50Mhz, redondant
 800089a:	2132      	movs	r1, #50	; 0x32
 800089c:	4806      	ldr	r0, [pc, #24]	; (80008b8 <initRadioLink+0x50>)
 800089e:	f000 fb03 	bl	8000ea8 <TM_NRF24L01_SetChannel>
    TM_NRF24L01_SetRF(&hspi2, TM_NRF24L01_DataRate_1M, TM_NRF24L01_OutputPower_0dBm);	// param�trage de la vitesse de transmission radio et puissance d'�mission
 80008a2:	2203      	movs	r2, #3
 80008a4:	2101      	movs	r1, #1
 80008a6:	4804      	ldr	r0, [pc, #16]	; (80008b8 <initRadioLink+0x50>)
 80008a8:	f000 fb1c 	bl	8000ee4 <TM_NRF24L01_SetRF>
    TM_NRF24L01_PowerUpRx(&hspi2);								// mise en mode r�ception.( faible consommation dans ce mode )
 80008ac:	4802      	ldr	r0, [pc, #8]	; (80008b8 <initRadioLink+0x50>)
 80008ae:	f000 f9a9 	bl	8000c04 <TM_NRF24L01_PowerUpRx>
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000003c 	.word	0x2000003c
 80008bc:	20000000 	.word	0x20000000
 80008c0:	20000008 	.word	0x20000008

080008c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <TM_NRF24L01_InitPins>:
//uint8_t TM_NRF24L01_RxFifoEmpty(void);

static TM_NRF24L01_t TM_NRF24L01_Struct;
/**********************************************************************************************************/
void TM_NRF24L01_InitPins(void) 
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
   /* CSN high = disable SPI */
   NRF24L01_CSN_HIGH;
 80008d8:	2201      	movs	r2, #1
 80008da:	2102      	movs	r1, #2
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <TM_NRF24L01_InitPins+0x20>)
 80008de:	f001 f881 	bl	80019e4 <HAL_GPIO_WritePin>
   
   /* CE low = disable TX/RX */
   NRF24L01_CE_LOW;
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008e8:	4802      	ldr	r0, [pc, #8]	; (80008f4 <TM_NRF24L01_InitPins+0x20>)
 80008ea:	f001 f87b 	bl	80019e4 <HAL_GPIO_WritePin>
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40020000 	.word	0x40020000

080008f8 <NRF24L01_FlushTX>:
/**********************************************************************************************************/
void NRF24L01_FlushTX(SPI_HandleTypeDef *hspi)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b084      	sub	sp, #16
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	uint8_t pData = NRF24L01_FLUSH_TX_MASK;
 8000900:	23e1      	movs	r3, #225	; 0xe1
 8000902:	73fb      	strb	r3, [r7, #15]
	do{
				NRF24L01_CSN_LOW;
 8000904:	2200      	movs	r2, #0
 8000906:	2102      	movs	r1, #2
 8000908:	4809      	ldr	r0, [pc, #36]	; (8000930 <NRF24L01_FlushTX+0x38>)
 800090a:	f001 f86b 	bl	80019e4 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(hspi, &pData, 1, 200);
 800090e:	f107 010f 	add.w	r1, r7, #15
 8000912:	23c8      	movs	r3, #200	; 0xc8
 8000914:	2201      	movs	r2, #1
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f001 fe56 	bl	80025c8 <HAL_SPI_Transmit>
				NRF24L01_CSN_HIGH;
 800091c:	2201      	movs	r2, #1
 800091e:	2102      	movs	r1, #2
 8000920:	4803      	ldr	r0, [pc, #12]	; (8000930 <NRF24L01_FlushTX+0x38>)
 8000922:	f001 f85f 	bl	80019e4 <HAL_GPIO_WritePin>
	}while(0);
	
}
 8000926:	bf00      	nop
 8000928:	3710      	adds	r7, #16
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40020000 	.word	0x40020000

08000934 <NRF24L01_FlushRX>:
/**********************************************************************************************************/
void NRF24L01_FlushRX(SPI_HandleTypeDef *hspi)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	uint8_t pData = NRF24L01_FLUSH_RX_MASK;
 800093c:	23e2      	movs	r3, #226	; 0xe2
 800093e:	73fb      	strb	r3, [r7, #15]
	do{
				NRF24L01_CSN_LOW;
 8000940:	2200      	movs	r2, #0
 8000942:	2102      	movs	r1, #2
 8000944:	4809      	ldr	r0, [pc, #36]	; (800096c <NRF24L01_FlushRX+0x38>)
 8000946:	f001 f84d 	bl	80019e4 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(hspi, &pData, 1, 200);
 800094a:	f107 010f 	add.w	r1, r7, #15
 800094e:	23c8      	movs	r3, #200	; 0xc8
 8000950:	2201      	movs	r2, #1
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f001 fe38 	bl	80025c8 <HAL_SPI_Transmit>
				NRF24L01_CSN_HIGH;
 8000958:	2201      	movs	r2, #1
 800095a:	2102      	movs	r1, #2
 800095c:	4803      	ldr	r0, [pc, #12]	; (800096c <NRF24L01_FlushRX+0x38>)
 800095e:	f001 f841 	bl	80019e4 <HAL_GPIO_WritePin>
	}while(0);
}
 8000962:	bf00      	nop
 8000964:	3710      	adds	r7, #16
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40020000 	.word	0x40020000

08000970 <TM_NRF24L01_WriteRegister>:
/**********************************************************************************************************/
void TM_NRF24L01_WriteRegister(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t value) 
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b084      	sub	sp, #16
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
 8000978:	460b      	mov	r3, r1
 800097a:	70fb      	strb	r3, [r7, #3]
 800097c:	4613      	mov	r3, r2
 800097e:	70bb      	strb	r3, [r7, #2]
	 NRF24L01_CSN_LOW;
 8000980:	2200      	movs	r2, #0
 8000982:	2102      	movs	r1, #2
 8000984:	4810      	ldr	r0, [pc, #64]	; (80009c8 <TM_NRF24L01_WriteRegister+0x58>)
 8000986:	f001 f82d 	bl	80019e4 <HAL_GPIO_WritePin>
	
	 uint8_t pData = NRF24L01_WRITE_REGISTER_MASK(reg);
 800098a:	78fb      	ldrb	r3, [r7, #3]
 800098c:	f003 031f 	and.w	r3, r3, #31
 8000990:	b2db      	uxtb	r3, r3
 8000992:	f043 0320 	orr.w	r3, r3, #32
 8000996:	b2db      	uxtb	r3, r3
 8000998:	73fb      	strb	r3, [r7, #15]
	 HAL_SPI_Transmit(hspi, &pData, 1, 200);
 800099a:	f107 010f 	add.w	r1, r7, #15
 800099e:	23c8      	movs	r3, #200	; 0xc8
 80009a0:	2201      	movs	r2, #1
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f001 fe10 	bl	80025c8 <HAL_SPI_Transmit>
   HAL_SPI_Transmit(hspi, &value, 1, 200);
 80009a8:	1cb9      	adds	r1, r7, #2
 80009aa:	23c8      	movs	r3, #200	; 0xc8
 80009ac:	2201      	movs	r2, #1
 80009ae:	6878      	ldr	r0, [r7, #4]
 80009b0:	f001 fe0a 	bl	80025c8 <HAL_SPI_Transmit>
	
   NRF24L01_CSN_HIGH;
 80009b4:	2201      	movs	r2, #1
 80009b6:	2102      	movs	r1, #2
 80009b8:	4803      	ldr	r0, [pc, #12]	; (80009c8 <TM_NRF24L01_WriteRegister+0x58>)
 80009ba:	f001 f813 	bl	80019e4 <HAL_GPIO_WritePin>
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40020000 	.word	0x40020000

080009cc <TM_NRF24L01_WriteRegisterMulti>:
/**********************************************************************************************************/
void TM_NRF24L01_WriteRegisterMulti(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t *data, uint8_t count) 
{ 
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b086      	sub	sp, #24
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	60f8      	str	r0, [r7, #12]
 80009d4:	607a      	str	r2, [r7, #4]
 80009d6:	461a      	mov	r2, r3
 80009d8:	460b      	mov	r3, r1
 80009da:	72fb      	strb	r3, [r7, #11]
 80009dc:	4613      	mov	r3, r2
 80009de:	72bb      	strb	r3, [r7, #10]
	 NRF24L01_CSN_LOW;
 80009e0:	2200      	movs	r2, #0
 80009e2:	2102      	movs	r1, #2
 80009e4:	4810      	ldr	r0, [pc, #64]	; (8000a28 <TM_NRF24L01_WriteRegisterMulti+0x5c>)
 80009e6:	f000 fffd 	bl	80019e4 <HAL_GPIO_WritePin>
	
	 uint8_t pData = NRF24L01_WRITE_REGISTER_MASK(reg);
 80009ea:	7afb      	ldrb	r3, [r7, #11]
 80009ec:	f003 031f 	and.w	r3, r3, #31
 80009f0:	b2db      	uxtb	r3, r3
 80009f2:	f043 0320 	orr.w	r3, r3, #32
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	75fb      	strb	r3, [r7, #23]
	 HAL_SPI_Transmit(hspi, &pData, 1, 200);
 80009fa:	f107 0117 	add.w	r1, r7, #23
 80009fe:	23c8      	movs	r3, #200	; 0xc8
 8000a00:	2201      	movs	r2, #1
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f001 fde0 	bl	80025c8 <HAL_SPI_Transmit>
   HAL_SPI_Transmit(hspi, data, count, 200);
 8000a08:	7abb      	ldrb	r3, [r7, #10]
 8000a0a:	b29a      	uxth	r2, r3
 8000a0c:	23c8      	movs	r3, #200	; 0xc8
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	68f8      	ldr	r0, [r7, #12]
 8000a12:	f001 fdd9 	bl	80025c8 <HAL_SPI_Transmit>
	
   NRF24L01_CSN_HIGH;
 8000a16:	2201      	movs	r2, #1
 8000a18:	2102      	movs	r1, #2
 8000a1a:	4803      	ldr	r0, [pc, #12]	; (8000a28 <TM_NRF24L01_WriteRegisterMulti+0x5c>)
 8000a1c:	f000 ffe2 	bl	80019e4 <HAL_GPIO_WritePin>
}
 8000a20:	bf00      	nop
 8000a22:	3718      	adds	r7, #24
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40020000 	.word	0x40020000

08000a2c <TM_NRF24L01_ReadRegister>:
/**********************************************************************************************************/
uint8_t TM_NRF24L01_ReadRegister(SPI_HandleTypeDef *hspi, uint8_t reg) 
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af02      	add	r7, sp, #8
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	70fb      	strb	r3, [r7, #3]
	 NRF24L01_CSN_LOW;
 8000a38:	2200      	movs	r2, #0
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	4812      	ldr	r0, [pc, #72]	; (8000a88 <TM_NRF24L01_ReadRegister+0x5c>)
 8000a3e:	f000 ffd1 	bl	80019e4 <HAL_GPIO_WritePin>
	
   uint8_t value;
	 uint8_t pData = NRF24L01_READ_REGISTER_MASK(reg);
 8000a42:	78fb      	ldrb	r3, [r7, #3]
 8000a44:	f003 031f 	and.w	r3, r3, #31
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	73bb      	strb	r3, [r7, #14]
   HAL_SPI_Transmit(hspi, &pData, 1, 200);
 8000a4c:	f107 010e 	add.w	r1, r7, #14
 8000a50:	23c8      	movs	r3, #200	; 0xc8
 8000a52:	2201      	movs	r2, #1
 8000a54:	6878      	ldr	r0, [r7, #4]
 8000a56:	f001 fdb7 	bl	80025c8 <HAL_SPI_Transmit>
	
	 pData = NRF24L01_NOP_MASK;
 8000a5a:	23ff      	movs	r3, #255	; 0xff
 8000a5c:	73bb      	strb	r3, [r7, #14]
	 HAL_SPI_TransmitReceive(hspi, &pData, &value, 1, 200);
 8000a5e:	f107 020f 	add.w	r2, r7, #15
 8000a62:	f107 010e 	add.w	r1, r7, #14
 8000a66:	23c8      	movs	r3, #200	; 0xc8
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	6878      	ldr	r0, [r7, #4]
 8000a6e:	f001 fedf 	bl	8002830 <HAL_SPI_TransmitReceive>
	
   NRF24L01_CSN_HIGH;
 8000a72:	2201      	movs	r2, #1
 8000a74:	2102      	movs	r1, #2
 8000a76:	4804      	ldr	r0, [pc, #16]	; (8000a88 <TM_NRF24L01_ReadRegister+0x5c>)
 8000a78:	f000 ffb4 	bl	80019e4 <HAL_GPIO_WritePin>
   
   return value;
 8000a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3710      	adds	r7, #16
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40020000 	.word	0x40020000

08000a8c <TM_NRF24L01_Init>:
   }
   return 1;
}
/**********************************************************************************************************/
uint8_t TM_NRF24L01_Init(SPI_HandleTypeDef *hspi, uint8_t channel, uint8_t payload_size) 
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	460b      	mov	r3, r1
 8000a96:	70fb      	strb	r3, [r7, #3]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	70bb      	strb	r3, [r7, #2]
   /* Initialize CE and CSN pins */
   TM_NRF24L01_InitPins();
 8000a9c:	f7ff ff1a 	bl	80008d4 <TM_NRF24L01_InitPins>
   
   /* Max payload is 32bytes */
   if (payload_size > 32) {
 8000aa0:	78bb      	ldrb	r3, [r7, #2]
 8000aa2:	2b20      	cmp	r3, #32
 8000aa4:	d901      	bls.n	8000aaa <TM_NRF24L01_Init+0x1e>
      payload_size = 32;
 8000aa6:	2320      	movs	r3, #32
 8000aa8:	70bb      	strb	r3, [r7, #2]
   }
   
   /* Fill structure */
   TM_NRF24L01_Struct.Channel = !channel; /* Set channel to some different value for TM_NRF24L01_SetChannel() function */
 8000aaa:	78fb      	ldrb	r3, [r7, #3]
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	bf0c      	ite	eq
 8000ab0:	2301      	moveq	r3, #1
 8000ab2:	2300      	movne	r3, #0
 8000ab4:	b2db      	uxtb	r3, r3
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <TM_NRF24L01_Init+0x10c>)
 8000aba:	705a      	strb	r2, [r3, #1]
   TM_NRF24L01_Struct.PayloadSize = payload_size;
 8000abc:	4a36      	ldr	r2, [pc, #216]	; (8000b98 <TM_NRF24L01_Init+0x10c>)
 8000abe:	78bb      	ldrb	r3, [r7, #2]
 8000ac0:	7013      	strb	r3, [r2, #0]
   TM_NRF24L01_Struct.OutPwr = TM_NRF24L01_OutputPower_0dBm;
 8000ac2:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <TM_NRF24L01_Init+0x10c>)
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	709a      	strb	r2, [r3, #2]
   TM_NRF24L01_Struct.DataRate = TM_NRF24L01_DataRate_2M;
 8000ac8:	4b33      	ldr	r3, [pc, #204]	; (8000b98 <TM_NRF24L01_Init+0x10c>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	70da      	strb	r2, [r3, #3]
   
   /* Reset nRF24L01+ to power on registers values */
   TM_NRF24L01_SoftwareReset(hspi);
 8000ace:	6878      	ldr	r0, [r7, #4]
 8000ad0:	f000 f93c 	bl	8000d4c <TM_NRF24L01_SoftwareReset>
   
   /* Channel select */
   TM_NRF24L01_SetChannel(hspi, channel);
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	6878      	ldr	r0, [r7, #4]
 8000ada:	f000 f9e5 	bl	8000ea8 <TM_NRF24L01_SetChannel>
   
   /* Set pipeline to max possible 32 bytes */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P0, TM_NRF24L01_Struct.PayloadSize); // Auto-ACK pipe
 8000ade:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <TM_NRF24L01_Init+0x10c>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	2111      	movs	r1, #17
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ff42 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P1, TM_NRF24L01_Struct.PayloadSize); // Data TM_NRF24L01_SetMyAddress pipe
 8000aec:	4b2a      	ldr	r3, [pc, #168]	; (8000b98 <TM_NRF24L01_Init+0x10c>)
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	461a      	mov	r2, r3
 8000af2:	2112      	movs	r1, #18
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f7ff ff3b 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P2, TM_NRF24L01_Struct.PayloadSize);
 8000afa:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <TM_NRF24L01_Init+0x10c>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	461a      	mov	r2, r3
 8000b00:	2113      	movs	r1, #19
 8000b02:	6878      	ldr	r0, [r7, #4]
 8000b04:	f7ff ff34 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P3, TM_NRF24L01_Struct.PayloadSize);
 8000b08:	4b23      	ldr	r3, [pc, #140]	; (8000b98 <TM_NRF24L01_Init+0x10c>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	461a      	mov	r2, r3
 8000b0e:	2114      	movs	r1, #20
 8000b10:	6878      	ldr	r0, [r7, #4]
 8000b12:	f7ff ff2d 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P4, TM_NRF24L01_Struct.PayloadSize);
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <TM_NRF24L01_Init+0x10c>)
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	2115      	movs	r1, #21
 8000b1e:	6878      	ldr	r0, [r7, #4]
 8000b20:	f7ff ff26 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P5, TM_NRF24L01_Struct.PayloadSize);
 8000b24:	4b1c      	ldr	r3, [pc, #112]	; (8000b98 <TM_NRF24L01_Init+0x10c>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	461a      	mov	r2, r3
 8000b2a:	2116      	movs	r1, #22
 8000b2c:	6878      	ldr	r0, [r7, #4]
 8000b2e:	f7ff ff1f 	bl	8000970 <TM_NRF24L01_WriteRegister>
   
   /* Set RF settings (2mbps, output power) */
   TM_NRF24L01_SetRF(hspi, TM_NRF24L01_Struct.DataRate, TM_NRF24L01_Struct.OutPwr);
 8000b32:	4b19      	ldr	r3, [pc, #100]	; (8000b98 <TM_NRF24L01_Init+0x10c>)
 8000b34:	78d9      	ldrb	r1, [r3, #3]
 8000b36:	4b18      	ldr	r3, [pc, #96]	; (8000b98 <TM_NRF24L01_Init+0x10c>)
 8000b38:	789b      	ldrb	r3, [r3, #2]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	6878      	ldr	r0, [r7, #4]
 8000b3e:	f000 f9d1 	bl	8000ee4 <TM_NRF24L01_SetRF>
   
   /* Config register */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_CONFIG, NRF24L01_CONFIG);
 8000b42:	2208      	movs	r2, #8
 8000b44:	2100      	movs	r1, #0
 8000b46:	6878      	ldr	r0, [r7, #4]
 8000b48:	f7ff ff12 	bl	8000970 <TM_NRF24L01_WriteRegister>
   
   /* Enable auto-acknowledgment for all pipes */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_EN_AA, 0x3F);
 8000b4c:	223f      	movs	r2, #63	; 0x3f
 8000b4e:	2101      	movs	r1, #1
 8000b50:	6878      	ldr	r0, [r7, #4]
 8000b52:	f7ff ff0d 	bl	8000970 <TM_NRF24L01_WriteRegister>
   
   /* Enable RX addresses */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_EN_RXADDR, 0x3F);
 8000b56:	223f      	movs	r2, #63	; 0x3f
 8000b58:	2102      	movs	r1, #2
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f7ff ff08 	bl	8000970 <TM_NRF24L01_WriteRegister>

   /* Auto retransmit delay: 200 (4x250) us and Up to 15 retransmit trials */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_SETUP_RETR, 0x4F);
 8000b60:	224f      	movs	r2, #79	; 0x4f
 8000b62:	2104      	movs	r1, #4
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ff03 	bl	8000970 <TM_NRF24L01_WriteRegister>
   
   /* Dynamic length configurations: No dynamic length */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_DYNPD, (0 << NRF24L01_DPL_P0) | (0 << NRF24L01_DPL_P1) | (0 << NRF24L01_DPL_P2) | (0 << NRF24L01_DPL_P3) | (0 << NRF24L01_DPL_P4) | (0 << NRF24L01_DPL_P5));
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	211c      	movs	r1, #28
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f7ff fefe 	bl	8000970 <TM_NRF24L01_WriteRegister>
   
   /* Clear FIFOs */
   NRF24L01_FlushTX(hspi);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff febf 	bl	80008f8 <NRF24L01_FlushTX>
   NRF24L01_FlushRX(hspi);
 8000b7a:	6878      	ldr	r0, [r7, #4]
 8000b7c:	f7ff feda 	bl	8000934 <NRF24L01_FlushRX>
   
   /* Clear interrupts */
   TM_NRF24L01_Clear_Interrupts(hspi);
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 f9f1 	bl	8000f68 <TM_NRF24L01_Clear_Interrupts>
   
   /* Go to RX mode */
   TM_NRF24L01_PowerUpRx(hspi);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 f83c 	bl	8000c04 <TM_NRF24L01_PowerUpRx>
   
   /* Return OK */
   return 1;
 8000b8c:	2301      	movs	r3, #1
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000038 	.word	0x20000038

08000b9c <TM_NRF24L01_SetMyAddress>:
/**********************************************************************************************************/
void TM_NRF24L01_SetMyAddress(SPI_HandleTypeDef *hspi, uint8_t *adr) 
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	6039      	str	r1, [r7, #0]
   NRF24L01_CE_LOW;
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bac:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <TM_NRF24L01_SetMyAddress+0x38>)
 8000bae:	f000 ff19 	bl	80019e4 <HAL_GPIO_WritePin>
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_RX_ADDR_P1, adr, 5);
 8000bb2:	2305      	movs	r3, #5
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	210b      	movs	r1, #11
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f7ff ff07 	bl	80009cc <TM_NRF24L01_WriteRegisterMulti>
   NRF24L01_CE_HIGH;
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <TM_NRF24L01_SetMyAddress+0x38>)
 8000bc6:	f000 ff0d 	bl	80019e4 <HAL_GPIO_WritePin>
}
 8000bca:	bf00      	nop
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <TM_NRF24L01_SetTxAddress>:
/**********************************************************************************************************/
void TM_NRF24L01_SetTxAddress(SPI_HandleTypeDef *hspi, uint8_t *adr)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
 8000be0:	6039      	str	r1, [r7, #0]
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_RX_ADDR_P0, adr, 5);
 8000be2:	2305      	movs	r3, #5
 8000be4:	683a      	ldr	r2, [r7, #0]
 8000be6:	210a      	movs	r1, #10
 8000be8:	6878      	ldr	r0, [r7, #4]
 8000bea:	f7ff feef 	bl	80009cc <TM_NRF24L01_WriteRegisterMulti>
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_TX_ADDR, adr, 5);
 8000bee:	2305      	movs	r3, #5
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	2110      	movs	r1, #16
 8000bf4:	6878      	ldr	r0, [r7, #4]
 8000bf6:	f7ff fee9 	bl	80009cc <TM_NRF24L01_WriteRegisterMulti>
}
 8000bfa:	bf00      	nop
 8000bfc:	3708      	adds	r7, #8
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
	...

08000c04 <TM_NRF24L01_PowerUpRx>:
   TM_NRF24L01_Clear_Interrupts(hspi);
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_CONFIG, NRF24L01_CONFIG | (0 << NRF24L01_PRIM_RX) | (1 << NRF24L01_PWR_UP));
}
/**********************************************************************************************************/
void TM_NRF24L01_PowerUpRx(SPI_HandleTypeDef *hspi) 
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
   /* Disable RX/TX mode */
   NRF24L01_CE_LOW;
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c12:	480c      	ldr	r0, [pc, #48]	; (8000c44 <TM_NRF24L01_PowerUpRx+0x40>)
 8000c14:	f000 fee6 	bl	80019e4 <HAL_GPIO_WritePin>
   /* Clear RX buffer */
   NRF24L01_FlushRX(hspi);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff fe8b 	bl	8000934 <NRF24L01_FlushRX>
   /* Clear interrupts */
   TM_NRF24L01_Clear_Interrupts(hspi);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 f9a2 	bl	8000f68 <TM_NRF24L01_Clear_Interrupts>
   /* Setup RX mode */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_CONFIG, NRF24L01_CONFIG | 1 << NRF24L01_PWR_UP | 1 << NRF24L01_PRIM_RX);
 8000c24:	220b      	movs	r2, #11
 8000c26:	2100      	movs	r1, #0
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f7ff fea1 	bl	8000970 <TM_NRF24L01_WriteRegister>
   /* Start listening */
   NRF24L01_CE_HIGH;
 8000c2e:	2201      	movs	r2, #1
 8000c30:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c34:	4803      	ldr	r0, [pc, #12]	; (8000c44 <TM_NRF24L01_PowerUpRx+0x40>)
 8000c36:	f000 fed5 	bl	80019e4 <HAL_GPIO_WritePin>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	40020000 	.word	0x40020000

08000c48 <TM_NRF24L01_GetData>:
   /* Send data! */
   NRF24L01_CE_HIGH;
}
/**********************************************************************************************************/
void TM_NRF24L01_GetData(SPI_HandleTypeDef *hspi, uint8_t* data) 
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
   /* Pull down chip select */
   NRF24L01_CSN_LOW;
 8000c52:	2200      	movs	r2, #0
 8000c54:	2102      	movs	r1, #2
 8000c56:	4812      	ldr	r0, [pc, #72]	; (8000ca0 <TM_NRF24L01_GetData+0x58>)
 8000c58:	f000 fec4 	bl	80019e4 <HAL_GPIO_WritePin>
   /* Send read payload command*/
	 uint8_t pData = NRF24L01_R_RX_PAYLOAD_MASK;
 8000c5c:	2361      	movs	r3, #97	; 0x61
 8000c5e:	73fb      	strb	r3, [r7, #15]
	 HAL_SPI_Transmit(hspi, &pData, 1, 200);
 8000c60:	f107 010f 	add.w	r1, r7, #15
 8000c64:	23c8      	movs	r3, #200	; 0xc8
 8000c66:	2201      	movs	r2, #1
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f001 fcad 	bl	80025c8 <HAL_SPI_Transmit>
   /* Read payload */
   //for (int i=0;i<TM_NRF24L01_Struct.PayloadSize; i++){
	 HAL_SPI_TransmitReceive(hspi, data, data,	TM_NRF24L01_Struct.PayloadSize, 200);
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <TM_NRF24L01_GetData+0x5c>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	b29a      	uxth	r2, r3
 8000c74:	23c8      	movs	r3, #200	; 0xc8
 8000c76:	9300      	str	r3, [sp, #0]
 8000c78:	4613      	mov	r3, r2
 8000c7a:	683a      	ldr	r2, [r7, #0]
 8000c7c:	6839      	ldr	r1, [r7, #0]
 8000c7e:	6878      	ldr	r0, [r7, #4]
 8000c80:	f001 fdd6 	bl	8002830 <HAL_SPI_TransmitReceive>
   //}
   /* Pull up chip select */
   NRF24L01_CSN_HIGH;
 8000c84:	2201      	movs	r2, #1
 8000c86:	2102      	movs	r1, #2
 8000c88:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <TM_NRF24L01_GetData+0x58>)
 8000c8a:	f000 feab 	bl	80019e4 <HAL_GPIO_WritePin>
   
   /* Reset status register, clear RX_DR interrupt flag */
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_STATUS, (1 << NRF24L01_RX_DR));
 8000c8e:	2240      	movs	r2, #64	; 0x40
 8000c90:	2107      	movs	r1, #7
 8000c92:	6878      	ldr	r0, [r7, #4]
 8000c94:	f7ff fe6c 	bl	8000970 <TM_NRF24L01_WriteRegister>
}
 8000c98:	bf00      	nop
 8000c9a:	3710      	adds	r7, #16
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	20000038 	.word	0x20000038

08000ca8 <TM_NRF24L01_DataReady>:



/**********************************************************************************************************/
uint8_t TM_NRF24L01_DataReady(SPI_HandleTypeDef *hspi) 
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
   uint8_t status = TM_NRF24L01_GetStatus(hspi);
 8000cb0:	6878      	ldr	r0, [r7, #4]
 8000cb2:	f000 f829 	bl	8000d08 <TM_NRF24L01_GetStatus>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	73fb      	strb	r3, [r7, #15]
   
   if (NRF24L01_CHECK_BIT(status, NRF24L01_RX_DR)) 
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <TM_NRF24L01_DataReady+0x20>
	 {
      return 1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	e008      	b.n	8000cda <TM_NRF24L01_DataReady+0x32>
   }
   return !TM_NRF24L01_RxFifoEmpty(hspi);
 8000cc8:	6878      	ldr	r0, [r7, #4]
 8000cca:	f000 f80a 	bl	8000ce2 <TM_NRF24L01_RxFifoEmpty>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	bf0c      	ite	eq
 8000cd4:	2301      	moveq	r3, #1
 8000cd6:	2300      	movne	r3, #0
 8000cd8:	b2db      	uxtb	r3, r3
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}

08000ce2 <TM_NRF24L01_RxFifoEmpty>:
/**********************************************************************************************************/
uint8_t TM_NRF24L01_RxFifoEmpty(SPI_HandleTypeDef *hspi) 
{
 8000ce2:	b580      	push	{r7, lr}
 8000ce4:	b084      	sub	sp, #16
 8000ce6:	af00      	add	r7, sp, #0
 8000ce8:	6078      	str	r0, [r7, #4]
   uint8_t reg = TM_NRF24L01_ReadRegister(hspi, NRF24L01_REG_FIFO_STATUS);
 8000cea:	2117      	movs	r1, #23
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fe9d 	bl	8000a2c <TM_NRF24L01_ReadRegister>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	73fb      	strb	r3, [r7, #15]
   return NRF24L01_CHECK_BIT(reg, NRF24L01_RX_EMPTY);
 8000cf6:	7bfb      	ldrb	r3, [r7, #15]
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	b2db      	uxtb	r3, r3
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3710      	adds	r7, #16
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
	...

08000d08 <TM_NRF24L01_GetStatus>:
/**********************************************************************************************************/
uint8_t TM_NRF24L01_GetStatus(SPI_HandleTypeDef *hspi) 
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b086      	sub	sp, #24
 8000d0c:	af02      	add	r7, sp, #8
 8000d0e:	6078      	str	r0, [r7, #4]
   uint8_t status;
   
   NRF24L01_CSN_LOW;
 8000d10:	2200      	movs	r2, #0
 8000d12:	2102      	movs	r1, #2
 8000d14:	480c      	ldr	r0, [pc, #48]	; (8000d48 <TM_NRF24L01_GetStatus+0x40>)
 8000d16:	f000 fe65 	bl	80019e4 <HAL_GPIO_WritePin>
   /* First received byte is always status register */
	 uint8_t pData = NRF24L01_NOP_MASK;
 8000d1a:	23ff      	movs	r3, #255	; 0xff
 8000d1c:	73bb      	strb	r3, [r7, #14]
	 //uint8_t pData = NRF24L01_NOP_MASK;
	 HAL_SPI_TransmitReceive(hspi, &pData, &status,	1, 200);
 8000d1e:	f107 020f 	add.w	r2, r7, #15
 8000d22:	f107 010e 	add.w	r1, r7, #14
 8000d26:	23c8      	movs	r3, #200	; 0xc8
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f001 fd7f 	bl	8002830 <HAL_SPI_TransmitReceive>
   /* Pull up chip select */
   NRF24L01_CSN_HIGH;
 8000d32:	2201      	movs	r2, #1
 8000d34:	2102      	movs	r1, #2
 8000d36:	4804      	ldr	r0, [pc, #16]	; (8000d48 <TM_NRF24L01_GetStatus+0x40>)
 8000d38:	f000 fe54 	bl	80019e4 <HAL_GPIO_WritePin>
   
   return status;
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40020000 	.word	0x40020000

08000d4c <TM_NRF24L01_SoftwareReset>:
   /* Still sending */
   return TM_NRF24L01_Transmit_Status_Sending;
}
/**********************************************************************************************************/
void TM_NRF24L01_SoftwareReset(SPI_HandleTypeDef *hspi) 
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
   uint8_t data[5];
   
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_CONFIG,       NRF24L01_REG_DEFAULT_VAL_CONFIG);
 8000d54:	2208      	movs	r2, #8
 8000d56:	2100      	movs	r1, #0
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f7ff fe09 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_EN_AA,      NRF24L01_REG_DEFAULT_VAL_EN_AA);
 8000d5e:	223f      	movs	r2, #63	; 0x3f
 8000d60:	2101      	movs	r1, #1
 8000d62:	6878      	ldr	r0, [r7, #4]
 8000d64:	f7ff fe04 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_EN_RXADDR,    NRF24L01_REG_DEFAULT_VAL_EN_RXADDR);
 8000d68:	2203      	movs	r2, #3
 8000d6a:	2102      	movs	r1, #2
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff fdff 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_SETUP_AW,    NRF24L01_REG_DEFAULT_VAL_SETUP_AW);
 8000d72:	2203      	movs	r2, #3
 8000d74:	2103      	movs	r1, #3
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	f7ff fdfa 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_SETUP_RETR,    NRF24L01_REG_DEFAULT_VAL_SETUP_RETR);
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	2104      	movs	r1, #4
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f7ff fdf5 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RF_CH,       NRF24L01_REG_DEFAULT_VAL_RF_CH);
 8000d86:	2205      	movs	r2, #5
 8000d88:	2105      	movs	r1, #5
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fdf0 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RF_SETUP,    NRF24L01_REG_DEFAULT_VAL_RF_SETUP);
 8000d90:	220e      	movs	r2, #14
 8000d92:	2106      	movs	r1, #6
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f7ff fdeb 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_STATUS,       NRF24L01_REG_DEFAULT_VAL_STATUS);
 8000d9a:	220e      	movs	r2, #14
 8000d9c:	2107      	movs	r1, #7
 8000d9e:	6878      	ldr	r0, [r7, #4]
 8000da0:	f7ff fde6 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_OBSERVE_TX,    NRF24L01_REG_DEFAULT_VAL_OBSERVE_TX);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2108      	movs	r1, #8
 8000da8:	6878      	ldr	r0, [r7, #4]
 8000daa:	f7ff fde1 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RPD,       NRF24L01_REG_DEFAULT_VAL_RPD);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2109      	movs	r1, #9
 8000db2:	6878      	ldr	r0, [r7, #4]
 8000db4:	f7ff fddc 	bl	8000970 <TM_NRF24L01_WriteRegister>
   
   //P0
   data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_0;
 8000db8:	23e7      	movs	r3, #231	; 0xe7
 8000dba:	723b      	strb	r3, [r7, #8]
   data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_1;
 8000dbc:	23e7      	movs	r3, #231	; 0xe7
 8000dbe:	727b      	strb	r3, [r7, #9]
   data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_2;
 8000dc0:	23e7      	movs	r3, #231	; 0xe7
 8000dc2:	72bb      	strb	r3, [r7, #10]
   data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_3;
 8000dc4:	23e7      	movs	r3, #231	; 0xe7
 8000dc6:	72fb      	strb	r3, [r7, #11]
   data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P0_4;
 8000dc8:	23e7      	movs	r3, #231	; 0xe7
 8000dca:	733b      	strb	r3, [r7, #12]
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_RX_ADDR_P0, data, 5);
 8000dcc:	f107 0208 	add.w	r2, r7, #8
 8000dd0:	2305      	movs	r3, #5
 8000dd2:	210a      	movs	r1, #10
 8000dd4:	6878      	ldr	r0, [r7, #4]
 8000dd6:	f7ff fdf9 	bl	80009cc <TM_NRF24L01_WriteRegisterMulti>
   
   //P1
   data[0] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_0;
 8000dda:	23c2      	movs	r3, #194	; 0xc2
 8000ddc:	723b      	strb	r3, [r7, #8]
   data[1] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_1;
 8000dde:	23c2      	movs	r3, #194	; 0xc2
 8000de0:	727b      	strb	r3, [r7, #9]
   data[2] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_2;
 8000de2:	23c2      	movs	r3, #194	; 0xc2
 8000de4:	72bb      	strb	r3, [r7, #10]
   data[3] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_3;
 8000de6:	23c2      	movs	r3, #194	; 0xc2
 8000de8:	72fb      	strb	r3, [r7, #11]
   data[4] = NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P1_4;
 8000dea:	23c2      	movs	r3, #194	; 0xc2
 8000dec:	733b      	strb	r3, [r7, #12]
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_RX_ADDR_P1, data, 5);
 8000dee:	f107 0208 	add.w	r2, r7, #8
 8000df2:	2305      	movs	r3, #5
 8000df4:	210b      	movs	r1, #11
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f7ff fde8 	bl	80009cc <TM_NRF24L01_WriteRegisterMulti>
   
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_ADDR_P2,    NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P2);
 8000dfc:	22c3      	movs	r2, #195	; 0xc3
 8000dfe:	210c      	movs	r1, #12
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff fdb5 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_ADDR_P3,    NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P3);
 8000e06:	22c4      	movs	r2, #196	; 0xc4
 8000e08:	210d      	movs	r1, #13
 8000e0a:	6878      	ldr	r0, [r7, #4]
 8000e0c:	f7ff fdb0 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_ADDR_P4,    NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P4);
 8000e10:	22c5      	movs	r2, #197	; 0xc5
 8000e12:	210e      	movs	r1, #14
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f7ff fdab 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_ADDR_P5,    NRF24L01_REG_DEFAULT_VAL_RX_ADDR_P5);
 8000e1a:	22c6      	movs	r2, #198	; 0xc6
 8000e1c:	210f      	movs	r1, #15
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fda6 	bl	8000970 <TM_NRF24L01_WriteRegister>
   
   //TX
   data[0] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_0;
 8000e24:	23e7      	movs	r3, #231	; 0xe7
 8000e26:	723b      	strb	r3, [r7, #8]
   data[1] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_1;
 8000e28:	23e7      	movs	r3, #231	; 0xe7
 8000e2a:	727b      	strb	r3, [r7, #9]
   data[2] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_2;
 8000e2c:	23e7      	movs	r3, #231	; 0xe7
 8000e2e:	72bb      	strb	r3, [r7, #10]
   data[3] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_3;
 8000e30:	23e7      	movs	r3, #231	; 0xe7
 8000e32:	72fb      	strb	r3, [r7, #11]
   data[4] = NRF24L01_REG_DEFAULT_VAL_TX_ADDR_4;
 8000e34:	23e7      	movs	r3, #231	; 0xe7
 8000e36:	733b      	strb	r3, [r7, #12]
   TM_NRF24L01_WriteRegisterMulti(hspi, NRF24L01_REG_TX_ADDR, data, 5);
 8000e38:	f107 0208 	add.w	r2, r7, #8
 8000e3c:	2305      	movs	r3, #5
 8000e3e:	2110      	movs	r1, #16
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff fdc3 	bl	80009cc <TM_NRF24L01_WriteRegisterMulti>
   
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P0,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2111      	movs	r1, #17
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f7ff fd90 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P1,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P1);
 8000e50:	2200      	movs	r2, #0
 8000e52:	2112      	movs	r1, #18
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff fd8b 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P2,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P2);
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	2113      	movs	r1, #19
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff fd86 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P3,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P3);
 8000e64:	2200      	movs	r2, #0
 8000e66:	2114      	movs	r1, #20
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff fd81 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P4,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P4);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2115      	movs	r1, #21
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff fd7c 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RX_PW_P5,    NRF24L01_REG_DEFAULT_VAL_RX_PW_P5);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2116      	movs	r1, #22
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff fd77 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_FIFO_STATUS, NRF24L01_REG_DEFAULT_VAL_FIFO_STATUS);
 8000e82:	2211      	movs	r2, #17
 8000e84:	2117      	movs	r1, #23
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f7ff fd72 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_DYNPD,       NRF24L01_REG_DEFAULT_VAL_DYNPD);
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	211c      	movs	r1, #28
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f7ff fd6d 	bl	8000970 <TM_NRF24L01_WriteRegister>
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_FEATURE,    NRF24L01_REG_DEFAULT_VAL_FEATURE);
 8000e96:	2200      	movs	r2, #0
 8000e98:	211d      	movs	r1, #29
 8000e9a:	6878      	ldr	r0, [r7, #4]
 8000e9c:	f7ff fd68 	bl	8000970 <TM_NRF24L01_WriteRegister>
}
 8000ea0:	bf00      	nop
 8000ea2:	3710      	adds	r7, #16
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <TM_NRF24L01_SetChannel>:
   /* Low 4 bits */
   return TM_NRF24L01_ReadRegister(hspi, NRF24L01_REG_OBSERVE_TX) & 0x0F;
}
/**********************************************************************************************************/
void TM_NRF24L01_SetChannel(SPI_HandleTypeDef *hspi, uint8_t channel) 
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	70fb      	strb	r3, [r7, #3]
   if (channel <= 125 && channel != TM_NRF24L01_Struct.Channel) 
 8000eb4:	78fb      	ldrb	r3, [r7, #3]
 8000eb6:	2b7d      	cmp	r3, #125	; 0x7d
 8000eb8:	d80d      	bhi.n	8000ed6 <TM_NRF24L01_SetChannel+0x2e>
 8000eba:	4b09      	ldr	r3, [pc, #36]	; (8000ee0 <TM_NRF24L01_SetChannel+0x38>)
 8000ebc:	785b      	ldrb	r3, [r3, #1]
 8000ebe:	78fa      	ldrb	r2, [r7, #3]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d008      	beq.n	8000ed6 <TM_NRF24L01_SetChannel+0x2e>
	 {
      /* Store new channel setting */
      TM_NRF24L01_Struct.Channel = channel;
 8000ec4:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <TM_NRF24L01_SetChannel+0x38>)
 8000ec6:	78fb      	ldrb	r3, [r7, #3]
 8000ec8:	7053      	strb	r3, [r2, #1]
      /* Write channel */
      TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RF_CH, channel);
 8000eca:	78fb      	ldrb	r3, [r7, #3]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	2105      	movs	r1, #5
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f7ff fd4d 	bl	8000970 <TM_NRF24L01_WriteRegister>
   }
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000038 	.word	0x20000038

08000ee4 <TM_NRF24L01_SetRF>:
/**********************************************************************************************************/
void TM_NRF24L01_SetRF(SPI_HandleTypeDef *hspi, TM_NRF24L01_DataRate_t DataRate, TM_NRF24L01_OutputPower_t OutPwr) 
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
 8000ef0:	4613      	mov	r3, r2
 8000ef2:	70bb      	strb	r3, [r7, #2]
   uint8_t tmp = 0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	73fb      	strb	r3, [r7, #15]
   TM_NRF24L01_Struct.DataRate = DataRate;
 8000ef8:	4a1a      	ldr	r2, [pc, #104]	; (8000f64 <TM_NRF24L01_SetRF+0x80>)
 8000efa:	78fb      	ldrb	r3, [r7, #3]
 8000efc:	70d3      	strb	r3, [r2, #3]
   TM_NRF24L01_Struct.OutPwr = OutPwr;
 8000efe:	4a19      	ldr	r2, [pc, #100]	; (8000f64 <TM_NRF24L01_SetRF+0x80>)
 8000f00:	78bb      	ldrb	r3, [r7, #2]
 8000f02:	7093      	strb	r3, [r2, #2]
   
   if (DataRate == TM_NRF24L01_DataRate_2M) {
 8000f04:	78fb      	ldrb	r3, [r7, #3]
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d104      	bne.n	8000f14 <TM_NRF24L01_SetRF+0x30>
      tmp |= 1 << NRF24L01_RF_DR_HIGH;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	f043 0308 	orr.w	r3, r3, #8
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e006      	b.n	8000f22 <TM_NRF24L01_SetRF+0x3e>
   } else if (DataRate == TM_NRF24L01_DataRate_250k) {
 8000f14:	78fb      	ldrb	r3, [r7, #3]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d103      	bne.n	8000f22 <TM_NRF24L01_SetRF+0x3e>
      tmp |= 1 << NRF24L01_RF_DR_LOW;
 8000f1a:	7bfb      	ldrb	r3, [r7, #15]
 8000f1c:	f043 0320 	orr.w	r3, r3, #32
 8000f20:	73fb      	strb	r3, [r7, #15]
   }
   /* If 1Mbps, all bits set to 0 */
   
   if (OutPwr == TM_NRF24L01_OutputPower_0dBm) {
 8000f22:	78bb      	ldrb	r3, [r7, #2]
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d104      	bne.n	8000f32 <TM_NRF24L01_SetRF+0x4e>
      tmp |= 3 << NRF24L01_RF_PWR;
 8000f28:	7bfb      	ldrb	r3, [r7, #15]
 8000f2a:	f043 0306 	orr.w	r3, r3, #6
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	e00e      	b.n	8000f50 <TM_NRF24L01_SetRF+0x6c>
   } else if (OutPwr == TM_NRF24L01_OutputPower_M6dBm) {
 8000f32:	78bb      	ldrb	r3, [r7, #2]
 8000f34:	2b02      	cmp	r3, #2
 8000f36:	d104      	bne.n	8000f42 <TM_NRF24L01_SetRF+0x5e>
      tmp |= 2 << NRF24L01_RF_PWR;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	73fb      	strb	r3, [r7, #15]
 8000f40:	e006      	b.n	8000f50 <TM_NRF24L01_SetRF+0x6c>
   } else if (OutPwr == TM_NRF24L01_OutputPower_M12dBm) {
 8000f42:	78bb      	ldrb	r3, [r7, #2]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d103      	bne.n	8000f50 <TM_NRF24L01_SetRF+0x6c>
      tmp |= 1 << NRF24L01_RF_PWR;
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	f043 0302 	orr.w	r3, r3, #2
 8000f4e:	73fb      	strb	r3, [r7, #15]
   }
   
   TM_NRF24L01_WriteRegister(hspi, NRF24L01_REG_RF_SETUP, tmp);
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	461a      	mov	r2, r3
 8000f54:	2106      	movs	r1, #6
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff fd0a 	bl	8000970 <TM_NRF24L01_WriteRegister>
}
 8000f5c:	bf00      	nop
 8000f5e:	3710      	adds	r7, #16
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	20000038 	.word	0x20000038

08000f68 <TM_NRF24L01_Clear_Interrupts>:
   IRQ->Status = TM_NRF24L01_GetStatus(hspi);
   return IRQ->Status;
}
/**********************************************************************************************************/
void TM_NRF24L01_Clear_Interrupts(SPI_HandleTypeDef *hspi) 
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
   TM_NRF24L01_WriteRegister(hspi, 0x07, 0x70);
 8000f70:	2270      	movs	r2, #112	; 0x70
 8000f72:	2107      	movs	r1, #7
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff fcfb 	bl	8000970 <TM_NRF24L01_WriteRegister>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <TM_NRF24L01_setCrcWidth>:

/**********************************************************************************************************/
void TM_NRF24L01_setCrcWidth(SPI_HandleTypeDef *hspi, uint8_t width) {
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b084      	sub	sp, #16
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	70fb      	strb	r3, [r7, #3]

	uint8_t config = TM_NRF24L01_ReadRegister(hspi,NRF24L01_REG_CONFIG) & ~_NRF24L01P_CONFIG_CRC_MASK;
 8000f8e:	2100      	movs	r1, #0
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fd4b 	bl	8000a2c <TM_NRF24L01_ReadRegister>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f023 0303 	bic.w	r3, r3, #3
 8000f9c:	73fb      	strb	r3, [r7, #15]

    switch ( width ) {
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	2b08      	cmp	r3, #8
 8000fa2:	d004      	beq.n	8000fae <TM_NRF24L01_setCrcWidth+0x2c>
 8000fa4:	2b10      	cmp	r3, #16
 8000fa6:	d007      	beq.n	8000fb8 <TM_NRF24L01_setCrcWidth+0x36>
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d00a      	beq.n	8000fc2 <TM_NRF24L01_setCrcWidth+0x40>
            config |= _NRF24L01P_CONFIG_CRC_16BIT;
            break;

        default:
            //error( "nRF24L01P: Invalid CRC Width setting %d\r\n", width );
            return;
 8000fac:	e010      	b.n	8000fd0 <TM_NRF24L01_setCrcWidth+0x4e>
            config |= _NRF24L01P_CONFIG_CRC_8BIT;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	f043 0303 	orr.w	r3, r3, #3
 8000fb4:	73fb      	strb	r3, [r7, #15]
            break;
 8000fb6:	e005      	b.n	8000fc4 <TM_NRF24L01_setCrcWidth+0x42>
            config |= _NRF24L01P_CONFIG_CRC_16BIT;
 8000fb8:	7bfb      	ldrb	r3, [r7, #15]
 8000fba:	f043 0303 	orr.w	r3, r3, #3
 8000fbe:	73fb      	strb	r3, [r7, #15]
            break;
 8000fc0:	e000      	b.n	8000fc4 <TM_NRF24L01_setCrcWidth+0x42>
            break;
 8000fc2:	bf00      	nop

    }

    TM_NRF24L01_WriteRegister(hspi,NRF24L01_REG_CONFIG, config);
 8000fc4:	7bfb      	ldrb	r3, [r7, #15]
 8000fc6:	461a      	mov	r2, r3
 8000fc8:	2100      	movs	r1, #0
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff fcd0 	bl	8000970 <TM_NRF24L01_WriteRegister>
    //setRegister(_NRF24L01P_REG_CONFIG, config);

}
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <TM_NRF24L01_disableAutoAcknowledge>:

/**********************************************************************************************************/
void TM_NRF24L01_disableAutoAcknowledge(SPI_HandleTypeDef *hspi) {
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]

	TM_NRF24L01_WriteRegister(hspi,NRF24L01_REG_EN_AA, _NRF24L01P_EN_AA_NONE);
 8000fde:	2200      	movs	r2, #0
 8000fe0:	2101      	movs	r1, #1
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fcc4 	bl	8000970 <TM_NRF24L01_WriteRegister>

}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}

08000ff0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <HAL_MspInit+0x4c>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a0f      	ldr	r2, [pc, #60]	; (800103c <HAL_MspInit+0x4c>)
 8001000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <HAL_MspInit+0x4c>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	603b      	str	r3, [r7, #0]
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_MspInit+0x4c>)
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	4a08      	ldr	r2, [pc, #32]	; (800103c <HAL_MspInit+0x4c>)
 800101c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001020:	6413      	str	r3, [r2, #64]	; 0x40
 8001022:	4b06      	ldr	r3, [pc, #24]	; (800103c <HAL_MspInit+0x4c>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800102a:	603b      	str	r3, [r7, #0]
 800102c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023800 	.word	0x40023800

08001040 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]
 8001052:	609a      	str	r2, [r3, #8]
 8001054:	60da      	str	r2, [r3, #12]
 8001056:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <HAL_I2C_MspInit+0x84>)
 800105e:	4293      	cmp	r3, r2
 8001060:	d12b      	bne.n	80010ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
 8001066:	4b18      	ldr	r3, [pc, #96]	; (80010c8 <HAL_I2C_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <HAL_I2C_MspInit+0x88>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b15      	ldr	r3, [pc, #84]	; (80010c8 <HAL_I2C_MspInit+0x88>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	613b      	str	r3, [r7, #16]
 800107c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800107e:	23c0      	movs	r3, #192	; 0xc0
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001082:	2312      	movs	r3, #18
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001086:	2301      	movs	r3, #1
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800108e:	2304      	movs	r3, #4
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	480c      	ldr	r0, [pc, #48]	; (80010cc <HAL_I2C_MspInit+0x8c>)
 800109a:	f000 fb21 	bl	80016e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_I2C_MspInit+0x88>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_I2C_MspInit+0x88>)
 80010a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010ac:	6413      	str	r3, [r2, #64]	; 0x40
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_I2C_MspInit+0x88>)
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010ba:	bf00      	nop
 80010bc:	3728      	adds	r7, #40	; 0x28
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	40005400 	.word	0x40005400
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020400 	.word	0x40020400

080010d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b08a      	sub	sp, #40	; 0x28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a28      	ldr	r2, [pc, #160]	; (8001190 <HAL_SPI_MspInit+0xc0>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d14a      	bne.n	8001188 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	4b27      	ldr	r3, [pc, #156]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a26      	ldr	r2, [pc, #152]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 80010fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b24      	ldr	r3, [pc, #144]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b20      	ldr	r3, [pc, #128]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a1f      	ldr	r2, [pc, #124]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b1d      	ldr	r3, [pc, #116]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	4b19      	ldr	r3, [pc, #100]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a18      	ldr	r2, [pc, #96]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 8001134:	f043 0302 	orr.w	r3, r3, #2
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b16      	ldr	r3, [pc, #88]	; (8001194 <HAL_SPI_MspInit+0xc4>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f003 0302 	and.w	r3, r3, #2
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001146:	230c      	movs	r3, #12
 8001148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114a:	2302      	movs	r3, #2
 800114c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001152:	2303      	movs	r3, #3
 8001154:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001156:	2305      	movs	r3, #5
 8001158:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	4619      	mov	r1, r3
 8001160:	480d      	ldr	r0, [pc, #52]	; (8001198 <HAL_SPI_MspInit+0xc8>)
 8001162:	f000 fabd 	bl	80016e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800116a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116c:	2302      	movs	r3, #2
 800116e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001178:	2305      	movs	r3, #5
 800117a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	f107 0314 	add.w	r3, r7, #20
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <HAL_SPI_MspInit+0xcc>)
 8001184:	f000 faac 	bl	80016e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40003800 	.word	0x40003800
 8001194:	40023800 	.word	0x40023800
 8001198:	40020800 	.word	0x40020800
 800119c:	40020400 	.word	0x40020400

080011a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0e      	ldr	r2, [pc, #56]	; (80011e8 <HAL_TIM_Base_MspInit+0x48>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d115      	bne.n	80011de <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	4b0d      	ldr	r3, [pc, #52]	; (80011ec <HAL_TIM_Base_MspInit+0x4c>)
 80011b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ba:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <HAL_TIM_Base_MspInit+0x4c>)
 80011bc:	f043 0301 	orr.w	r3, r3, #1
 80011c0:	6453      	str	r3, [r2, #68]	; 0x44
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_TIM_Base_MspInit+0x4c>)
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2101      	movs	r1, #1
 80011d2:	2019      	movs	r0, #25
 80011d4:	f000 fa2b 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80011d8:	2019      	movs	r0, #25
 80011da:	f000 fa44 	bl	8001666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40010000 	.word	0x40010000
 80011ec:	40023800 	.word	0x40023800

080011f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_UART_MspInit+0x94>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d134      	bne.n	800127c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	613b      	str	r3, [r7, #16]
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <HAL_UART_MspInit+0x98>)
 8001218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800121a:	4a1b      	ldr	r2, [pc, #108]	; (8001288 <HAL_UART_MspInit+0x98>)
 800121c:	f043 0310 	orr.w	r3, r3, #16
 8001220:	6453      	str	r3, [r2, #68]	; 0x44
 8001222:	4b19      	ldr	r3, [pc, #100]	; (8001288 <HAL_UART_MspInit+0x98>)
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f003 0310 	and.w	r3, r3, #16
 800122a:	613b      	str	r3, [r7, #16]
 800122c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_UART_MspInit+0x98>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	4a14      	ldr	r2, [pc, #80]	; (8001288 <HAL_UART_MspInit+0x98>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	6313      	str	r3, [r2, #48]	; 0x30
 800123e:	4b12      	ldr	r3, [pc, #72]	; (8001288 <HAL_UART_MspInit+0x98>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800124a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800124e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001250:	2302      	movs	r3, #2
 8001252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001254:	2301      	movs	r3, #1
 8001256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001258:	2303      	movs	r3, #3
 800125a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800125c:	2307      	movs	r3, #7
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001260:	f107 0314 	add.w	r3, r7, #20
 8001264:	4619      	mov	r1, r3
 8001266:	4809      	ldr	r0, [pc, #36]	; (800128c <HAL_UART_MspInit+0x9c>)
 8001268:	f000 fa3a 	bl	80016e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 800126c:	2200      	movs	r2, #0
 800126e:	2102      	movs	r1, #2
 8001270:	2025      	movs	r0, #37	; 0x25
 8001272:	f000 f9dc 	bl	800162e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001276:	2025      	movs	r0, #37	; 0x25
 8001278:	f000 f9f5 	bl	8001666 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40011000 	.word	0x40011000
 8001288:	40023800 	.word	0x40023800
 800128c:	40020000 	.word	0x40020000

08001290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800129e:	b480      	push	{r7}
 80012a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012a2:	e7fe      	b.n	80012a2 <HardFault_Handler+0x4>

080012a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012a8:	e7fe      	b.n	80012a8 <MemManage_Handler+0x4>

080012aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012aa:	b480      	push	{r7}
 80012ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ae:	e7fe      	b.n	80012ae <BusFault_Handler+0x4>

080012b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012b0:	b480      	push	{r7}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012b4:	e7fe      	b.n	80012b4 <UsageFault_Handler+0x4>

080012b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012d2:	b480      	push	{r7}
 80012d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012e4:	f000 f8a8 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */
  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80012f2:	f001 fd16 	bl	8002d22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000014c 	.word	0x2000014c

08001300 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001304:	4802      	ldr	r0, [pc, #8]	; (8001310 <USART1_IRQHandler+0x10>)
 8001306:	f002 f8e7 	bl	80034d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200000e8 	.word	0x200000e8

08001314 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <SystemInit+0x28>)
 800131a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800131e:	4a07      	ldr	r2, [pc, #28]	; (800133c <SystemInit+0x28>)
 8001320:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001324:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <SystemInit+0x28>)
 800132a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800132e:	609a      	str	r2, [r3, #8]
#endif
}
 8001330:	bf00      	nop
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	e000ed00 	.word	0xe000ed00

08001340 <Reset_Handler>:
 8001340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001378 <LoopFillZerobss+0x14>
 8001344:	2100      	movs	r1, #0
 8001346:	e003      	b.n	8001350 <LoopCopyDataInit>

08001348 <CopyDataInit>:
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <LoopFillZerobss+0x18>)
 800134a:	585b      	ldr	r3, [r3, r1]
 800134c:	5043      	str	r3, [r0, r1]
 800134e:	3104      	adds	r1, #4

08001350 <LoopCopyDataInit>:
 8001350:	480b      	ldr	r0, [pc, #44]	; (8001380 <LoopFillZerobss+0x1c>)
 8001352:	4b0c      	ldr	r3, [pc, #48]	; (8001384 <LoopFillZerobss+0x20>)
 8001354:	1842      	adds	r2, r0, r1
 8001356:	429a      	cmp	r2, r3
 8001358:	d3f6      	bcc.n	8001348 <CopyDataInit>
 800135a:	4a0b      	ldr	r2, [pc, #44]	; (8001388 <LoopFillZerobss+0x24>)
 800135c:	e002      	b.n	8001364 <LoopFillZerobss>

0800135e <FillZerobss>:
 800135e:	2300      	movs	r3, #0
 8001360:	f842 3b04 	str.w	r3, [r2], #4

08001364 <LoopFillZerobss>:
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <LoopFillZerobss+0x28>)
 8001366:	429a      	cmp	r2, r3
 8001368:	d3f9      	bcc.n	800135e <FillZerobss>
 800136a:	f7ff ffd3 	bl	8001314 <SystemInit>
 800136e:	f002 fe6f 	bl	8004050 <__libc_init_array>
 8001372:	f7ff f8b1 	bl	80004d8 <main>
 8001376:	4770      	bx	lr
 8001378:	20020000 	.word	0x20020000
 800137c:	080040f4 	.word	0x080040f4
 8001380:	20000000 	.word	0x20000000
 8001384:	2000001c 	.word	0x2000001c
 8001388:	2000001c 	.word	0x2000001c
 800138c:	200001b0 	.word	0x200001b0

08001390 <ADC_IRQHandler>:
 8001390:	e7fe      	b.n	8001390 <ADC_IRQHandler>
	...

08001394 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001398:	4b0e      	ldr	r3, [pc, #56]	; (80013d4 <HAL_Init+0x40>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0d      	ldr	r2, [pc, #52]	; (80013d4 <HAL_Init+0x40>)
 800139e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_Init+0x40>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a0a      	ldr	r2, [pc, #40]	; (80013d4 <HAL_Init+0x40>)
 80013aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <HAL_Init+0x40>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a07      	ldr	r2, [pc, #28]	; (80013d4 <HAL_Init+0x40>)
 80013b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013bc:	2003      	movs	r0, #3
 80013be:	f000 f92b 	bl	8001618 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013c2:	2000      	movs	r0, #0
 80013c4:	f000 f808 	bl	80013d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013c8:	f7ff fe12 	bl	8000ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40023c00 	.word	0x40023c00

080013d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013e0:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_InitTick+0x54>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <HAL_InitTick+0x58>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f943 	bl	8001682 <HAL_SYSTICK_Config>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e00e      	b.n	8001424 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d80a      	bhi.n	8001422 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f000 f90b 	bl	800162e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001418:	4a06      	ldr	r2, [pc, #24]	; (8001434 <HAL_InitTick+0x5c>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	20000010 	.word	0x20000010
 8001430:	20000018 	.word	0x20000018
 8001434:	20000014 	.word	0x20000014

08001438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800143c:	4b06      	ldr	r3, [pc, #24]	; (8001458 <HAL_IncTick+0x20>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_IncTick+0x24>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	; (800145c <HAL_IncTick+0x24>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	20000018 	.word	0x20000018
 800145c:	200001ac 	.word	0x200001ac

08001460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b03      	ldr	r3, [pc, #12]	; (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	200001ac 	.word	0x200001ac

08001478 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001488:	4b0c      	ldr	r3, [pc, #48]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001494:	4013      	ands	r3, r2
 8001496:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014aa:	4a04      	ldr	r2, [pc, #16]	; (80014bc <__NVIC_SetPriorityGrouping+0x44>)
 80014ac:	68bb      	ldr	r3, [r7, #8]
 80014ae:	60d3      	str	r3, [r2, #12]
}
 80014b0:	bf00      	nop
 80014b2:	3714      	adds	r7, #20
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr
 80014bc:	e000ed00 	.word	0xe000ed00

080014c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c4:	4b04      	ldr	r3, [pc, #16]	; (80014d8 <__NVIC_GetPriorityGrouping+0x18>)
 80014c6:	68db      	ldr	r3, [r3, #12]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	f003 0307 	and.w	r3, r3, #7
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	4603      	mov	r3, r0
 80014e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	db0b      	blt.n	8001506 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014ee:	79fb      	ldrb	r3, [r7, #7]
 80014f0:	f003 021f 	and.w	r2, r3, #31
 80014f4:	4907      	ldr	r1, [pc, #28]	; (8001514 <__NVIC_EnableIRQ+0x38>)
 80014f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fa:	095b      	lsrs	r3, r3, #5
 80014fc:	2001      	movs	r0, #1
 80014fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001502:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001506:	bf00      	nop
 8001508:	370c      	adds	r7, #12
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
	...

080015d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	3b01      	subs	r3, #1
 80015e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e4:	d301      	bcc.n	80015ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00f      	b.n	800160a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015ea:	4a0a      	ldr	r2, [pc, #40]	; (8001614 <SysTick_Config+0x40>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	3b01      	subs	r3, #1
 80015f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015f2:	210f      	movs	r1, #15
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f7ff ff8e 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <SysTick_Config+0x40>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001602:	4b04      	ldr	r3, [pc, #16]	; (8001614 <SysTick_Config+0x40>)
 8001604:	2207      	movs	r2, #7
 8001606:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	e000e010 	.word	0xe000e010

08001618 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	f7ff ff29 	bl	8001478 <__NVIC_SetPriorityGrouping>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af00      	add	r7, sp, #0
 8001634:	4603      	mov	r3, r0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800163c:	2300      	movs	r3, #0
 800163e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001640:	f7ff ff3e 	bl	80014c0 <__NVIC_GetPriorityGrouping>
 8001644:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001646:	687a      	ldr	r2, [r7, #4]
 8001648:	68b9      	ldr	r1, [r7, #8]
 800164a:	6978      	ldr	r0, [r7, #20]
 800164c:	f7ff ff8e 	bl	800156c <NVIC_EncodePriority>
 8001650:	4602      	mov	r2, r0
 8001652:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001656:	4611      	mov	r1, r2
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff ff5d 	bl	8001518 <__NVIC_SetPriority>
}
 800165e:	bf00      	nop
 8001660:	3718      	adds	r7, #24
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}

08001666 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b082      	sub	sp, #8
 800166a:	af00      	add	r7, sp, #0
 800166c:	4603      	mov	r3, r0
 800166e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff31 	bl	80014dc <__NVIC_EnableIRQ>
}
 800167a:	bf00      	nop
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168a:	6878      	ldr	r0, [r7, #4]
 800168c:	f7ff ffa2 	bl	80015d4 <SysTick_Config>
 8001690:	4603      	mov	r3, r0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800169a:	b480      	push	{r7}
 800169c:	b083      	sub	sp, #12
 800169e:	af00      	add	r7, sp, #0
 80016a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d004      	beq.n	80016b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2280      	movs	r2, #128	; 0x80
 80016b2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e00c      	b.n	80016d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2205      	movs	r2, #5
 80016bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0201 	bic.w	r2, r2, #1
 80016ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr
	...

080016e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b089      	sub	sp, #36	; 0x24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	e159      	b.n	80019b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	429a      	cmp	r2, r3
 8001716:	f040 8148 	bne.w	80019aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d00b      	beq.n	800173a <HAL_GPIO_Init+0x5a>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b02      	cmp	r3, #2
 8001728:	d007      	beq.n	800173a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800172e:	2b11      	cmp	r3, #17
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	2b12      	cmp	r3, #18
 8001738:	d130      	bne.n	800179c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	2203      	movs	r2, #3
 8001746:	fa02 f303 	lsl.w	r3, r2, r3
 800174a:	43db      	mvns	r3, r3
 800174c:	69ba      	ldr	r2, [r7, #24]
 800174e:	4013      	ands	r3, r2
 8001750:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	68da      	ldr	r2, [r3, #12]
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	005b      	lsls	r3, r3, #1
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001770:	2201      	movs	r2, #1
 8001772:	69fb      	ldr	r3, [r7, #28]
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	f003 0201 	and.w	r2, r3, #1
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	fa02 f303 	lsl.w	r3, r2, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0xfc>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	2b12      	cmp	r3, #18
 80017da:	d123      	bne.n	8001824 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	08da      	lsrs	r2, r3, #3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	3208      	adds	r2, #8
 80017e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	f003 0307 	and.w	r3, r3, #7
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	220f      	movs	r2, #15
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	691a      	ldr	r2, [r3, #16]
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	08da      	lsrs	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3208      	adds	r2, #8
 800181e:	69b9      	ldr	r1, [r7, #24]
 8001820:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0203 	and.w	r2, r3, #3
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80a2 	beq.w	80019aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b56      	ldr	r3, [pc, #344]	; (80019c4 <HAL_GPIO_Init+0x2e4>)
 800186c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186e:	4a55      	ldr	r2, [pc, #340]	; (80019c4 <HAL_GPIO_Init+0x2e4>)
 8001870:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001874:	6453      	str	r3, [r2, #68]	; 0x44
 8001876:	4b53      	ldr	r3, [pc, #332]	; (80019c4 <HAL_GPIO_Init+0x2e4>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001882:	4a51      	ldr	r2, [pc, #324]	; (80019c8 <HAL_GPIO_Init+0x2e8>)
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a48      	ldr	r2, [pc, #288]	; (80019cc <HAL_GPIO_Init+0x2ec>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d019      	beq.n	80018e2 <HAL_GPIO_Init+0x202>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a47      	ldr	r2, [pc, #284]	; (80019d0 <HAL_GPIO_Init+0x2f0>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d013      	beq.n	80018de <HAL_GPIO_Init+0x1fe>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a46      	ldr	r2, [pc, #280]	; (80019d4 <HAL_GPIO_Init+0x2f4>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d00d      	beq.n	80018da <HAL_GPIO_Init+0x1fa>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a45      	ldr	r2, [pc, #276]	; (80019d8 <HAL_GPIO_Init+0x2f8>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d007      	beq.n	80018d6 <HAL_GPIO_Init+0x1f6>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a44      	ldr	r2, [pc, #272]	; (80019dc <HAL_GPIO_Init+0x2fc>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d101      	bne.n	80018d2 <HAL_GPIO_Init+0x1f2>
 80018ce:	2304      	movs	r3, #4
 80018d0:	e008      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018d2:	2307      	movs	r3, #7
 80018d4:	e006      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018d6:	2303      	movs	r3, #3
 80018d8:	e004      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018da:	2302      	movs	r3, #2
 80018dc:	e002      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018de:	2301      	movs	r3, #1
 80018e0:	e000      	b.n	80018e4 <HAL_GPIO_Init+0x204>
 80018e2:	2300      	movs	r3, #0
 80018e4:	69fa      	ldr	r2, [r7, #28]
 80018e6:	f002 0203 	and.w	r2, r2, #3
 80018ea:	0092      	lsls	r2, r2, #2
 80018ec:	4093      	lsls	r3, r2
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018f4:	4934      	ldr	r1, [pc, #208]	; (80019c8 <HAL_GPIO_Init+0x2e8>)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	089b      	lsrs	r3, r3, #2
 80018fa:	3302      	adds	r3, #2
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001902:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <HAL_GPIO_Init+0x300>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	43db      	mvns	r3, r3
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	4013      	ands	r3, r2
 8001910:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800191e:	69ba      	ldr	r2, [r7, #24]
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	4313      	orrs	r3, r2
 8001924:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001926:	4a2e      	ldr	r2, [pc, #184]	; (80019e0 <HAL_GPIO_Init+0x300>)
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800192c:	4b2c      	ldr	r3, [pc, #176]	; (80019e0 <HAL_GPIO_Init+0x300>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	43db      	mvns	r3, r3
 8001936:	69ba      	ldr	r2, [r7, #24]
 8001938:	4013      	ands	r3, r2
 800193a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d003      	beq.n	8001950 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	4313      	orrs	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001950:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <HAL_GPIO_Init+0x300>)
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001956:	4b22      	ldr	r3, [pc, #136]	; (80019e0 <HAL_GPIO_Init+0x300>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	43db      	mvns	r3, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4013      	ands	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800196e:	2b00      	cmp	r3, #0
 8001970:	d003      	beq.n	800197a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800197a:	4a19      	ldr	r2, [pc, #100]	; (80019e0 <HAL_GPIO_Init+0x300>)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001980:	4b17      	ldr	r3, [pc, #92]	; (80019e0 <HAL_GPIO_Init+0x300>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001986:	693b      	ldr	r3, [r7, #16]
 8001988:	43db      	mvns	r3, r3
 800198a:	69ba      	ldr	r2, [r7, #24]
 800198c:	4013      	ands	r3, r2
 800198e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001998:	2b00      	cmp	r3, #0
 800199a:	d003      	beq.n	80019a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	4313      	orrs	r3, r2
 80019a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019a4:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <HAL_GPIO_Init+0x300>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3301      	adds	r3, #1
 80019ae:	61fb      	str	r3, [r7, #28]
 80019b0:	69fb      	ldr	r3, [r7, #28]
 80019b2:	2b0f      	cmp	r3, #15
 80019b4:	f67f aea2 	bls.w	80016fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019b8:	bf00      	nop
 80019ba:	3724      	adds	r7, #36	; 0x24
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	40023800 	.word	0x40023800
 80019c8:	40013800 	.word	0x40013800
 80019cc:	40020000 	.word	0x40020000
 80019d0:	40020400 	.word	0x40020400
 80019d4:	40020800 	.word	0x40020800
 80019d8:	40020c00 	.word	0x40020c00
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40013c00 	.word	0x40013c00

080019e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b083      	sub	sp, #12
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	460b      	mov	r3, r1
 80019ee:	807b      	strh	r3, [r7, #2]
 80019f0:	4613      	mov	r3, r2
 80019f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f4:	787b      	ldrb	r3, [r7, #1]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fa:	887a      	ldrh	r2, [r7, #2]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a00:	e003      	b.n	8001a0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a02:	887b      	ldrh	r3, [r7, #2]
 8001a04:	041a      	lsls	r2, r3, #16
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	619a      	str	r2, [r3, #24]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
	...

08001a18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d101      	bne.n	8001a2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e11f      	b.n	8001c6a <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff fafe 	bl	8001040 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2224      	movs	r2, #36	; 0x24
 8001a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f022 0201 	bic.w	r2, r2, #1
 8001a5a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a6a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a7a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a7c:	f000 fd18 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 8001a80:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	4a7b      	ldr	r2, [pc, #492]	; (8001c74 <HAL_I2C_Init+0x25c>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d807      	bhi.n	8001a9c <HAL_I2C_Init+0x84>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4a7a      	ldr	r2, [pc, #488]	; (8001c78 <HAL_I2C_Init+0x260>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	bf94      	ite	ls
 8001a94:	2301      	movls	r3, #1
 8001a96:	2300      	movhi	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	e006      	b.n	8001aaa <HAL_I2C_Init+0x92>
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4a77      	ldr	r2, [pc, #476]	; (8001c7c <HAL_I2C_Init+0x264>)
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	bf94      	ite	ls
 8001aa4:	2301      	movls	r3, #1
 8001aa6:	2300      	movhi	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e0db      	b.n	8001c6a <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	4a72      	ldr	r2, [pc, #456]	; (8001c80 <HAL_I2C_Init+0x268>)
 8001ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aba:	0c9b      	lsrs	r3, r3, #18
 8001abc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	68ba      	ldr	r2, [r7, #8]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6a1b      	ldr	r3, [r3, #32]
 8001ad8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	4a64      	ldr	r2, [pc, #400]	; (8001c74 <HAL_I2C_Init+0x25c>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d802      	bhi.n	8001aec <HAL_I2C_Init+0xd4>
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	3301      	adds	r3, #1
 8001aea:	e009      	b.n	8001b00 <HAL_I2C_Init+0xe8>
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001af2:	fb02 f303 	mul.w	r3, r2, r3
 8001af6:	4a63      	ldr	r2, [pc, #396]	; (8001c84 <HAL_I2C_Init+0x26c>)
 8001af8:	fba2 2303 	umull	r2, r3, r2, r3
 8001afc:	099b      	lsrs	r3, r3, #6
 8001afe:	3301      	adds	r3, #1
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	430b      	orrs	r3, r1
 8001b06:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	69db      	ldr	r3, [r3, #28]
 8001b0e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b12:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	4956      	ldr	r1, [pc, #344]	; (8001c74 <HAL_I2C_Init+0x25c>)
 8001b1c:	428b      	cmp	r3, r1
 8001b1e:	d80d      	bhi.n	8001b3c <HAL_I2C_Init+0x124>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1e59      	subs	r1, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b2e:	3301      	adds	r3, #1
 8001b30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b34:	2b04      	cmp	r3, #4
 8001b36:	bf38      	it	cc
 8001b38:	2304      	movcc	r3, #4
 8001b3a:	e04f      	b.n	8001bdc <HAL_I2C_Init+0x1c4>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d111      	bne.n	8001b68 <HAL_I2C_Init+0x150>
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	1e58      	subs	r0, r3, #1
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6859      	ldr	r1, [r3, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	005b      	lsls	r3, r3, #1
 8001b50:	440b      	add	r3, r1
 8001b52:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b56:	3301      	adds	r3, #1
 8001b58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	bf0c      	ite	eq
 8001b60:	2301      	moveq	r3, #1
 8001b62:	2300      	movne	r3, #0
 8001b64:	b2db      	uxtb	r3, r3
 8001b66:	e012      	b.n	8001b8e <HAL_I2C_Init+0x176>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	1e58      	subs	r0, r3, #1
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6859      	ldr	r1, [r3, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	0099      	lsls	r1, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	bf0c      	ite	eq
 8001b88:	2301      	moveq	r3, #1
 8001b8a:	2300      	movne	r3, #0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <HAL_I2C_Init+0x17e>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e022      	b.n	8001bdc <HAL_I2C_Init+0x1c4>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10e      	bne.n	8001bbc <HAL_I2C_Init+0x1a4>
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1e58      	subs	r0, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6859      	ldr	r1, [r3, #4]
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	440b      	add	r3, r1
 8001bac:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bba:	e00f      	b.n	8001bdc <HAL_I2C_Init+0x1c4>
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	1e58      	subs	r0, r3, #1
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6859      	ldr	r1, [r3, #4]
 8001bc4:	460b      	mov	r3, r1
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	0099      	lsls	r1, r3, #2
 8001bcc:	440b      	add	r3, r1
 8001bce:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bd2:	3301      	adds	r3, #1
 8001bd4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	6809      	ldr	r1, [r1, #0]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	430a      	orrs	r2, r1
 8001bfe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c0a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	6911      	ldr	r1, [r2, #16]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	68d2      	ldr	r2, [r2, #12]
 8001c16:	4311      	orrs	r1, r2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6812      	ldr	r2, [r2, #0]
 8001c1c:	430b      	orrs	r3, r1
 8001c1e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68db      	ldr	r3, [r3, #12]
 8001c26:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695a      	ldr	r2, [r3, #20]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	431a      	orrs	r2, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	430a      	orrs	r2, r1
 8001c3a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2220      	movs	r2, #32
 8001c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	000186a0 	.word	0x000186a0
 8001c78:	001e847f 	.word	0x001e847f
 8001c7c:	003d08ff 	.word	0x003d08ff
 8001c80:	431bde83 	.word	0x431bde83
 8001c84:	10624dd3 	.word	0x10624dd3

08001c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e25b      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d075      	beq.n	8001d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ca6:	4ba3      	ldr	r3, [pc, #652]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b04      	cmp	r3, #4
 8001cb0:	d00c      	beq.n	8001ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cb2:	4ba0      	ldr	r3, [pc, #640]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001cba:	2b08      	cmp	r3, #8
 8001cbc:	d112      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001cbe:	4b9d      	ldr	r3, [pc, #628]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001cca:	d10b      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ccc:	4b99      	ldr	r3, [pc, #612]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d05b      	beq.n	8001d90 <HAL_RCC_OscConfig+0x108>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d157      	bne.n	8001d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e236      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cec:	d106      	bne.n	8001cfc <HAL_RCC_OscConfig+0x74>
 8001cee:	4b91      	ldr	r3, [pc, #580]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a90      	ldr	r2, [pc, #576]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	6013      	str	r3, [r2, #0]
 8001cfa:	e01d      	b.n	8001d38 <HAL_RCC_OscConfig+0xb0>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x98>
 8001d06:	4b8b      	ldr	r3, [pc, #556]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4a8a      	ldr	r2, [pc, #552]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	4b88      	ldr	r3, [pc, #544]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a87      	ldr	r2, [pc, #540]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	e00b      	b.n	8001d38 <HAL_RCC_OscConfig+0xb0>
 8001d20:	4b84      	ldr	r3, [pc, #528]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a83      	ldr	r2, [pc, #524]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	4b81      	ldr	r3, [pc, #516]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a80      	ldr	r2, [pc, #512]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d013      	beq.n	8001d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d40:	f7ff fb8e 	bl	8001460 <HAL_GetTick>
 8001d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	e008      	b.n	8001d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d48:	f7ff fb8a 	bl	8001460 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2b64      	cmp	r3, #100	; 0x64
 8001d54:	d901      	bls.n	8001d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d56:	2303      	movs	r3, #3
 8001d58:	e1fb      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d5a:	4b76      	ldr	r3, [pc, #472]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f0      	beq.n	8001d48 <HAL_RCC_OscConfig+0xc0>
 8001d66:	e014      	b.n	8001d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d68:	f7ff fb7a 	bl	8001460 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d70:	f7ff fb76 	bl	8001460 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b64      	cmp	r3, #100	; 0x64
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e1e7      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d82:	4b6c      	ldr	r3, [pc, #432]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f0      	bne.n	8001d70 <HAL_RCC_OscConfig+0xe8>
 8001d8e:	e000      	b.n	8001d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d063      	beq.n	8001e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d9e:	4b65      	ldr	r3, [pc, #404]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 030c 	and.w	r3, r3, #12
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d00b      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001daa:	4b62      	ldr	r3, [pc, #392]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d11c      	bne.n	8001df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001db6:	4b5f      	ldr	r3, [pc, #380]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d116      	bne.n	8001df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc2:	4b5c      	ldr	r3, [pc, #368]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d005      	beq.n	8001dda <HAL_RCC_OscConfig+0x152>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d001      	beq.n	8001dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e1bb      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dda:	4b56      	ldr	r3, [pc, #344]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	00db      	lsls	r3, r3, #3
 8001de8:	4952      	ldr	r1, [pc, #328]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001dea:	4313      	orrs	r3, r2
 8001dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dee:	e03a      	b.n	8001e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d020      	beq.n	8001e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001df8:	4b4f      	ldr	r3, [pc, #316]	; (8001f38 <HAL_RCC_OscConfig+0x2b0>)
 8001dfa:	2201      	movs	r2, #1
 8001dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7ff fb2f 	bl	8001460 <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e06:	f7ff fb2b 	bl	8001460 <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e19c      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e18:	4b46      	ldr	r3, [pc, #280]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0f0      	beq.n	8001e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e24:	4b43      	ldr	r3, [pc, #268]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	00db      	lsls	r3, r3, #3
 8001e32:	4940      	ldr	r1, [pc, #256]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001e34:	4313      	orrs	r3, r2
 8001e36:	600b      	str	r3, [r1, #0]
 8001e38:	e015      	b.n	8001e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e3a:	4b3f      	ldr	r3, [pc, #252]	; (8001f38 <HAL_RCC_OscConfig+0x2b0>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e40:	f7ff fb0e 	bl	8001460 <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e46:	e008      	b.n	8001e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e48:	f7ff fb0a 	bl	8001460 <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	2b02      	cmp	r3, #2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e17b      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e5a:	4b36      	ldr	r3, [pc, #216]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1f0      	bne.n	8001e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d030      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d016      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e7a:	4b30      	ldr	r3, [pc, #192]	; (8001f3c <HAL_RCC_OscConfig+0x2b4>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e80:	f7ff faee 	bl	8001460 <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e88:	f7ff faea 	bl	8001460 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e15b      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e9e:	f003 0302 	and.w	r3, r3, #2
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d0f0      	beq.n	8001e88 <HAL_RCC_OscConfig+0x200>
 8001ea6:	e015      	b.n	8001ed4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ea8:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_RCC_OscConfig+0x2b4>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eae:	f7ff fad7 	bl	8001460 <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001eb4:	e008      	b.n	8001ec8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eb6:	f7ff fad3 	bl	8001460 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b02      	cmp	r3, #2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e144      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec8:	4b1a      	ldr	r3, [pc, #104]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1f0      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f000 80a0 	beq.w	8002022 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ee6:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d10f      	bne.n	8001f12 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	4a0e      	ldr	r2, [pc, #56]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001efc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f00:	6413      	str	r3, [r2, #64]	; 0x40
 8001f02:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f0a:	60bb      	str	r3, [r7, #8]
 8001f0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_OscConfig+0x2b8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d121      	bne.n	8001f62 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <HAL_RCC_OscConfig+0x2b8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a07      	ldr	r2, [pc, #28]	; (8001f40 <HAL_RCC_OscConfig+0x2b8>)
 8001f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f28:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f2a:	f7ff fa99 	bl	8001460 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f30:	e011      	b.n	8001f56 <HAL_RCC_OscConfig+0x2ce>
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800
 8001f38:	42470000 	.word	0x42470000
 8001f3c:	42470e80 	.word	0x42470e80
 8001f40:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f44:	f7ff fa8c 	bl	8001460 <HAL_GetTick>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e0fd      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f56:	4b81      	ldr	r3, [pc, #516]	; (800215c <HAL_RCC_OscConfig+0x4d4>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d0f0      	beq.n	8001f44 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d106      	bne.n	8001f78 <HAL_RCC_OscConfig+0x2f0>
 8001f6a:	4b7d      	ldr	r3, [pc, #500]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f6e:	4a7c      	ldr	r2, [pc, #496]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	6713      	str	r3, [r2, #112]	; 0x70
 8001f76:	e01c      	b.n	8001fb2 <HAL_RCC_OscConfig+0x32a>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b05      	cmp	r3, #5
 8001f7e:	d10c      	bne.n	8001f9a <HAL_RCC_OscConfig+0x312>
 8001f80:	4b77      	ldr	r3, [pc, #476]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 8001f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f84:	4a76      	ldr	r2, [pc, #472]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 8001f86:	f043 0304 	orr.w	r3, r3, #4
 8001f8a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f8c:	4b74      	ldr	r3, [pc, #464]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 8001f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f90:	4a73      	ldr	r2, [pc, #460]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	6713      	str	r3, [r2, #112]	; 0x70
 8001f98:	e00b      	b.n	8001fb2 <HAL_RCC_OscConfig+0x32a>
 8001f9a:	4b71      	ldr	r3, [pc, #452]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 8001f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f9e:	4a70      	ldr	r2, [pc, #448]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 8001fa0:	f023 0301 	bic.w	r3, r3, #1
 8001fa4:	6713      	str	r3, [r2, #112]	; 0x70
 8001fa6:	4b6e      	ldr	r3, [pc, #440]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001faa:	4a6d      	ldr	r2, [pc, #436]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 8001fac:	f023 0304 	bic.w	r3, r3, #4
 8001fb0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d015      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fba:	f7ff fa51 	bl	8001460 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7ff fa4d 	bl	8001460 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e0bc      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fd8:	4b61      	ldr	r3, [pc, #388]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0ee      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x33a>
 8001fe4:	e014      	b.n	8002010 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fe6:	f7ff fa3b 	bl	8001460 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fec:	e00a      	b.n	8002004 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f7ff fa37 	bl	8001460 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d901      	bls.n	8002004 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e0a6      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002004:	4b56      	ldr	r3, [pc, #344]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 8002006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d1ee      	bne.n	8001fee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002010:	7dfb      	ldrb	r3, [r7, #23]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d105      	bne.n	8002022 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002016:	4b52      	ldr	r3, [pc, #328]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a51      	ldr	r2, [pc, #324]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 800201c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	699b      	ldr	r3, [r3, #24]
 8002026:	2b00      	cmp	r3, #0
 8002028:	f000 8092 	beq.w	8002150 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800202c:	4b4c      	ldr	r3, [pc, #304]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 030c 	and.w	r3, r3, #12
 8002034:	2b08      	cmp	r3, #8
 8002036:	d05c      	beq.n	80020f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	699b      	ldr	r3, [r3, #24]
 800203c:	2b02      	cmp	r3, #2
 800203e:	d141      	bne.n	80020c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002040:	4b48      	ldr	r3, [pc, #288]	; (8002164 <HAL_RCC_OscConfig+0x4dc>)
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002046:	f7ff fa0b 	bl	8001460 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800204e:	f7ff fa07 	bl	8001460 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e078      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002060:	4b3f      	ldr	r3, [pc, #252]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d1f0      	bne.n	800204e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	69da      	ldr	r2, [r3, #28]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207a:	019b      	lsls	r3, r3, #6
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002082:	085b      	lsrs	r3, r3, #1
 8002084:	3b01      	subs	r3, #1
 8002086:	041b      	lsls	r3, r3, #16
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	061b      	lsls	r3, r3, #24
 8002090:	4933      	ldr	r1, [pc, #204]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002096:	4b33      	ldr	r3, [pc, #204]	; (8002164 <HAL_RCC_OscConfig+0x4dc>)
 8002098:	2201      	movs	r2, #1
 800209a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209c:	f7ff f9e0 	bl	8001460 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a4:	f7ff f9dc 	bl	8001460 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e04d      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020b6:	4b2a      	ldr	r3, [pc, #168]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x41c>
 80020c2:	e045      	b.n	8002150 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c4:	4b27      	ldr	r3, [pc, #156]	; (8002164 <HAL_RCC_OscConfig+0x4dc>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ca:	f7ff f9c9 	bl	8001460 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d2:	f7ff f9c5 	bl	8001460 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e036      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e4:	4b1e      	ldr	r3, [pc, #120]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1f0      	bne.n	80020d2 <HAL_RCC_OscConfig+0x44a>
 80020f0:	e02e      	b.n	8002150 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e029      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020fe:	4b18      	ldr	r3, [pc, #96]	; (8002160 <HAL_RCC_OscConfig+0x4d8>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	429a      	cmp	r2, r3
 8002110:	d11c      	bne.n	800214c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d115      	bne.n	800214c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002126:	4013      	ands	r3, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800212c:	4293      	cmp	r3, r2
 800212e:	d10d      	bne.n	800214c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800213a:	429a      	cmp	r2, r3
 800213c:	d106      	bne.n	800214c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e000      	b.n	8002152 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	3718      	adds	r7, #24
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40007000 	.word	0x40007000
 8002160:	40023800 	.word	0x40023800
 8002164:	42470060 	.word	0x42470060

08002168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b084      	sub	sp, #16
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0cc      	b.n	8002316 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800217c:	4b68      	ldr	r3, [pc, #416]	; (8002320 <HAL_RCC_ClockConfig+0x1b8>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d90c      	bls.n	80021a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b65      	ldr	r3, [pc, #404]	; (8002320 <HAL_RCC_ClockConfig+0x1b8>)
 800218c:	683a      	ldr	r2, [r7, #0]
 800218e:	b2d2      	uxtb	r2, r2
 8002190:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b63      	ldr	r3, [pc, #396]	; (8002320 <HAL_RCC_ClockConfig+0x1b8>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 030f 	and.w	r3, r3, #15
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e0b8      	b.n	8002316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d020      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0304 	and.w	r3, r3, #4
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d005      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021bc:	4b59      	ldr	r3, [pc, #356]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	4a58      	ldr	r2, [pc, #352]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80021c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0308 	and.w	r3, r3, #8
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021d4:	4b53      	ldr	r3, [pc, #332]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	4a52      	ldr	r2, [pc, #328]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 80021da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021e0:	4b50      	ldr	r3, [pc, #320]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	494d      	ldr	r1, [pc, #308]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d044      	beq.n	8002288 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d107      	bne.n	8002216 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002206:	4b47      	ldr	r3, [pc, #284]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d119      	bne.n	8002246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e07f      	b.n	8002316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d003      	beq.n	8002226 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002222:	2b03      	cmp	r3, #3
 8002224:	d107      	bne.n	8002236 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002226:	4b3f      	ldr	r3, [pc, #252]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222e:	2b00      	cmp	r3, #0
 8002230:	d109      	bne.n	8002246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	e06f      	b.n	8002316 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002236:	4b3b      	ldr	r3, [pc, #236]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d101      	bne.n	8002246 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e067      	b.n	8002316 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002246:	4b37      	ldr	r3, [pc, #220]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	f023 0203 	bic.w	r2, r3, #3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	4934      	ldr	r1, [pc, #208]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 8002254:	4313      	orrs	r3, r2
 8002256:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002258:	f7ff f902 	bl	8001460 <HAL_GetTick>
 800225c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225e:	e00a      	b.n	8002276 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002260:	f7ff f8fe 	bl	8001460 <HAL_GetTick>
 8002264:	4602      	mov	r2, r0
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	f241 3288 	movw	r2, #5000	; 0x1388
 800226e:	4293      	cmp	r3, r2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e04f      	b.n	8002316 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	4b2b      	ldr	r3, [pc, #172]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	f003 020c 	and.w	r2, r3, #12
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	429a      	cmp	r2, r3
 8002286:	d1eb      	bne.n	8002260 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002288:	4b25      	ldr	r3, [pc, #148]	; (8002320 <HAL_RCC_ClockConfig+0x1b8>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f003 030f 	and.w	r3, r3, #15
 8002290:	683a      	ldr	r2, [r7, #0]
 8002292:	429a      	cmp	r2, r3
 8002294:	d20c      	bcs.n	80022b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002296:	4b22      	ldr	r3, [pc, #136]	; (8002320 <HAL_RCC_ClockConfig+0x1b8>)
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	b2d2      	uxtb	r2, r2
 800229c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229e:	4b20      	ldr	r3, [pc, #128]	; (8002320 <HAL_RCC_ClockConfig+0x1b8>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	683a      	ldr	r2, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d001      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e032      	b.n	8002316 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0304 	and.w	r3, r3, #4
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022bc:	4b19      	ldr	r3, [pc, #100]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4916      	ldr	r1, [pc, #88]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	4313      	orrs	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0308 	and.w	r3, r3, #8
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d009      	beq.n	80022ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022da:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	00db      	lsls	r3, r3, #3
 80022e8:	490e      	ldr	r1, [pc, #56]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022ee:	f000 f821 	bl	8002334 <HAL_RCC_GetSysClockFreq>
 80022f2:	4601      	mov	r1, r0
 80022f4:	4b0b      	ldr	r3, [pc, #44]	; (8002324 <HAL_RCC_ClockConfig+0x1bc>)
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	091b      	lsrs	r3, r3, #4
 80022fa:	f003 030f 	and.w	r3, r3, #15
 80022fe:	4a0a      	ldr	r2, [pc, #40]	; (8002328 <HAL_RCC_ClockConfig+0x1c0>)
 8002300:	5cd3      	ldrb	r3, [r2, r3]
 8002302:	fa21 f303 	lsr.w	r3, r1, r3
 8002306:	4a09      	ldr	r2, [pc, #36]	; (800232c <HAL_RCC_ClockConfig+0x1c4>)
 8002308:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800230a:	4b09      	ldr	r3, [pc, #36]	; (8002330 <HAL_RCC_ClockConfig+0x1c8>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4618      	mov	r0, r3
 8002310:	f7ff f862 	bl	80013d8 <HAL_InitTick>

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3710      	adds	r7, #16
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	40023c00 	.word	0x40023c00
 8002324:	40023800 	.word	0x40023800
 8002328:	080040cc 	.word	0x080040cc
 800232c:	20000010 	.word	0x20000010
 8002330:	20000014 	.word	0x20000014

08002334 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002336:	b085      	sub	sp, #20
 8002338:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	607b      	str	r3, [r7, #4]
 800233e:	2300      	movs	r3, #0
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	2300      	movs	r3, #0
 8002344:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800234a:	4b50      	ldr	r3, [pc, #320]	; (800248c <HAL_RCC_GetSysClockFreq+0x158>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 030c 	and.w	r3, r3, #12
 8002352:	2b04      	cmp	r3, #4
 8002354:	d007      	beq.n	8002366 <HAL_RCC_GetSysClockFreq+0x32>
 8002356:	2b08      	cmp	r3, #8
 8002358:	d008      	beq.n	800236c <HAL_RCC_GetSysClockFreq+0x38>
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 808d 	bne.w	800247a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002360:	4b4b      	ldr	r3, [pc, #300]	; (8002490 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002362:	60bb      	str	r3, [r7, #8]
       break;
 8002364:	e08c      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002366:	4b4b      	ldr	r3, [pc, #300]	; (8002494 <HAL_RCC_GetSysClockFreq+0x160>)
 8002368:	60bb      	str	r3, [r7, #8]
      break;
 800236a:	e089      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800236c:	4b47      	ldr	r3, [pc, #284]	; (800248c <HAL_RCC_GetSysClockFreq+0x158>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002374:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002376:	4b45      	ldr	r3, [pc, #276]	; (800248c <HAL_RCC_GetSysClockFreq+0x158>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d023      	beq.n	80023ca <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002382:	4b42      	ldr	r3, [pc, #264]	; (800248c <HAL_RCC_GetSysClockFreq+0x158>)
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	099b      	lsrs	r3, r3, #6
 8002388:	f04f 0400 	mov.w	r4, #0
 800238c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002390:	f04f 0200 	mov.w	r2, #0
 8002394:	ea03 0501 	and.w	r5, r3, r1
 8002398:	ea04 0602 	and.w	r6, r4, r2
 800239c:	4a3d      	ldr	r2, [pc, #244]	; (8002494 <HAL_RCC_GetSysClockFreq+0x160>)
 800239e:	fb02 f106 	mul.w	r1, r2, r6
 80023a2:	2200      	movs	r2, #0
 80023a4:	fb02 f205 	mul.w	r2, r2, r5
 80023a8:	440a      	add	r2, r1
 80023aa:	493a      	ldr	r1, [pc, #232]	; (8002494 <HAL_RCC_GetSysClockFreq+0x160>)
 80023ac:	fba5 0101 	umull	r0, r1, r5, r1
 80023b0:	1853      	adds	r3, r2, r1
 80023b2:	4619      	mov	r1, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f04f 0400 	mov.w	r4, #0
 80023ba:	461a      	mov	r2, r3
 80023bc:	4623      	mov	r3, r4
 80023be:	f7fd ff0b 	bl	80001d8 <__aeabi_uldivmod>
 80023c2:	4603      	mov	r3, r0
 80023c4:	460c      	mov	r4, r1
 80023c6:	60fb      	str	r3, [r7, #12]
 80023c8:	e049      	b.n	800245e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ca:	4b30      	ldr	r3, [pc, #192]	; (800248c <HAL_RCC_GetSysClockFreq+0x158>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	099b      	lsrs	r3, r3, #6
 80023d0:	f04f 0400 	mov.w	r4, #0
 80023d4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023d8:	f04f 0200 	mov.w	r2, #0
 80023dc:	ea03 0501 	and.w	r5, r3, r1
 80023e0:	ea04 0602 	and.w	r6, r4, r2
 80023e4:	4629      	mov	r1, r5
 80023e6:	4632      	mov	r2, r6
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	f04f 0400 	mov.w	r4, #0
 80023f0:	0154      	lsls	r4, r2, #5
 80023f2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80023f6:	014b      	lsls	r3, r1, #5
 80023f8:	4619      	mov	r1, r3
 80023fa:	4622      	mov	r2, r4
 80023fc:	1b49      	subs	r1, r1, r5
 80023fe:	eb62 0206 	sbc.w	r2, r2, r6
 8002402:	f04f 0300 	mov.w	r3, #0
 8002406:	f04f 0400 	mov.w	r4, #0
 800240a:	0194      	lsls	r4, r2, #6
 800240c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002410:	018b      	lsls	r3, r1, #6
 8002412:	1a5b      	subs	r3, r3, r1
 8002414:	eb64 0402 	sbc.w	r4, r4, r2
 8002418:	f04f 0100 	mov.w	r1, #0
 800241c:	f04f 0200 	mov.w	r2, #0
 8002420:	00e2      	lsls	r2, r4, #3
 8002422:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002426:	00d9      	lsls	r1, r3, #3
 8002428:	460b      	mov	r3, r1
 800242a:	4614      	mov	r4, r2
 800242c:	195b      	adds	r3, r3, r5
 800242e:	eb44 0406 	adc.w	r4, r4, r6
 8002432:	f04f 0100 	mov.w	r1, #0
 8002436:	f04f 0200 	mov.w	r2, #0
 800243a:	02a2      	lsls	r2, r4, #10
 800243c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002440:	0299      	lsls	r1, r3, #10
 8002442:	460b      	mov	r3, r1
 8002444:	4614      	mov	r4, r2
 8002446:	4618      	mov	r0, r3
 8002448:	4621      	mov	r1, r4
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f04f 0400 	mov.w	r4, #0
 8002450:	461a      	mov	r2, r3
 8002452:	4623      	mov	r3, r4
 8002454:	f7fd fec0 	bl	80001d8 <__aeabi_uldivmod>
 8002458:	4603      	mov	r3, r0
 800245a:	460c      	mov	r4, r1
 800245c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800245e:	4b0b      	ldr	r3, [pc, #44]	; (800248c <HAL_RCC_GetSysClockFreq+0x158>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	0c1b      	lsrs	r3, r3, #16
 8002464:	f003 0303 	and.w	r3, r3, #3
 8002468:	3301      	adds	r3, #1
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	fbb2 f3f3 	udiv	r3, r2, r3
 8002476:	60bb      	str	r3, [r7, #8]
      break;
 8002478:	e002      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <HAL_RCC_GetSysClockFreq+0x15c>)
 800247c:	60bb      	str	r3, [r7, #8]
      break;
 800247e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002480:	68bb      	ldr	r3, [r7, #8]
}
 8002482:	4618      	mov	r0, r3
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	00f42400 	.word	0x00f42400
 8002494:	017d7840 	.word	0x017d7840

08002498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800249c:	4b03      	ldr	r3, [pc, #12]	; (80024ac <HAL_RCC_GetHCLKFreq+0x14>)
 800249e:	681b      	ldr	r3, [r3, #0]
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr
 80024aa:	bf00      	nop
 80024ac:	20000010 	.word	0x20000010

080024b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024b4:	f7ff fff0 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024b8:	4601      	mov	r1, r0
 80024ba:	4b05      	ldr	r3, [pc, #20]	; (80024d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	0a9b      	lsrs	r3, r3, #10
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	4a03      	ldr	r2, [pc, #12]	; (80024d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c6:	5cd3      	ldrb	r3, [r2, r3]
 80024c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40023800 	.word	0x40023800
 80024d4:	080040dc 	.word	0x080040dc

080024d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024dc:	f7ff ffdc 	bl	8002498 <HAL_RCC_GetHCLKFreq>
 80024e0:	4601      	mov	r1, r0
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	0b5b      	lsrs	r3, r3, #13
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	4a03      	ldr	r2, [pc, #12]	; (80024fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ee:	5cd3      	ldrb	r3, [r2, r3]
 80024f0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40023800 	.word	0x40023800
 80024fc:	080040dc 	.word	0x080040dc

08002500 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d101      	bne.n	8002512 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e056      	b.n	80025c0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800251e:	b2db      	uxtb	r3, r3
 8002520:	2b00      	cmp	r3, #0
 8002522:	d106      	bne.n	8002532 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7fe fdcf 	bl	80010d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2202      	movs	r2, #2
 8002536:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002548:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	685a      	ldr	r2, [r3, #4]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	431a      	orrs	r2, r3
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	695b      	ldr	r3, [r3, #20]
 8002564:	431a      	orrs	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	699b      	ldr	r3, [r3, #24]
 800256a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	ea42 0103 	orr.w	r1, r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	430a      	orrs	r2, r1
 8002588:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	0c1b      	lsrs	r3, r3, #16
 8002590:	f003 0104 	and.w	r1, r3, #4
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	430a      	orrs	r2, r1
 800259e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	69da      	ldr	r2, [r3, #28]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2200      	movs	r2, #0
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3708      	adds	r7, #8
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	4613      	mov	r3, r2
 80025d6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_SPI_Transmit+0x22>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e11e      	b.n	8002828 <HAL_SPI_Transmit+0x260>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80025f2:	f7fe ff35 	bl	8001460 <HAL_GetTick>
 80025f6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d002      	beq.n	800260e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002608:	2302      	movs	r3, #2
 800260a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800260c:	e103      	b.n	8002816 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800260e:	68bb      	ldr	r3, [r7, #8]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d002      	beq.n	800261a <HAL_SPI_Transmit+0x52>
 8002614:	88fb      	ldrh	r3, [r7, #6]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d102      	bne.n	8002620 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800261e:	e0fa      	b.n	8002816 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2203      	movs	r2, #3
 8002624:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	2200      	movs	r2, #0
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	68ba      	ldr	r2, [r7, #8]
 8002632:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	88fa      	ldrh	r2, [r7, #6]
 8002638:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	88fa      	ldrh	r2, [r7, #6]
 800263e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	2200      	movs	r2, #0
 8002650:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2200      	movs	r2, #0
 8002656:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	2200      	movs	r2, #0
 800265c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002666:	d107      	bne.n	8002678 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002676:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002682:	2b40      	cmp	r3, #64	; 0x40
 8002684:	d007      	beq.n	8002696 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002694:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800269e:	d14b      	bne.n	8002738 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d002      	beq.n	80026ae <HAL_SPI_Transmit+0xe6>
 80026a8:	8afb      	ldrh	r3, [r7, #22]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d13e      	bne.n	800272c <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	881a      	ldrh	r2, [r3, #0]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026be:	1c9a      	adds	r2, r3, #2
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026c8:	b29b      	uxth	r3, r3
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29a      	uxth	r2, r3
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026d2:	e02b      	b.n	800272c <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d112      	bne.n	8002708 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e6:	881a      	ldrh	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f2:	1c9a      	adds	r2, r3, #2
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	3b01      	subs	r3, #1
 8002700:	b29a      	uxth	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	86da      	strh	r2, [r3, #54]	; 0x36
 8002706:	e011      	b.n	800272c <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002708:	f7fe feaa 	bl	8001460 <HAL_GetTick>
 800270c:	4602      	mov	r2, r0
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	1ad3      	subs	r3, r2, r3
 8002712:	683a      	ldr	r2, [r7, #0]
 8002714:	429a      	cmp	r2, r3
 8002716:	d803      	bhi.n	8002720 <HAL_SPI_Transmit+0x158>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271e:	d102      	bne.n	8002726 <HAL_SPI_Transmit+0x15e>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d102      	bne.n	800272c <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8002726:	2303      	movs	r3, #3
 8002728:	77fb      	strb	r3, [r7, #31]
          goto error;
 800272a:	e074      	b.n	8002816 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002730:	b29b      	uxth	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d1ce      	bne.n	80026d4 <HAL_SPI_Transmit+0x10c>
 8002736:	e04c      	b.n	80027d2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d002      	beq.n	8002746 <HAL_SPI_Transmit+0x17e>
 8002740:	8afb      	ldrh	r3, [r7, #22]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d140      	bne.n	80027c8 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	330c      	adds	r3, #12
 8002750:	7812      	ldrb	r2, [r2, #0]
 8002752:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800276c:	e02c      	b.n	80027c8 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b02      	cmp	r3, #2
 800277a:	d113      	bne.n	80027a4 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	330c      	adds	r3, #12
 8002786:	7812      	ldrb	r2, [r2, #0]
 8002788:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	1c5a      	adds	r2, r3, #1
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002798:	b29b      	uxth	r3, r3
 800279a:	3b01      	subs	r3, #1
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	86da      	strh	r2, [r3, #54]	; 0x36
 80027a2:	e011      	b.n	80027c8 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80027a4:	f7fe fe5c 	bl	8001460 <HAL_GetTick>
 80027a8:	4602      	mov	r2, r0
 80027aa:	69bb      	ldr	r3, [r7, #24]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d803      	bhi.n	80027bc <HAL_SPI_Transmit+0x1f4>
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027ba:	d102      	bne.n	80027c2 <HAL_SPI_Transmit+0x1fa>
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d102      	bne.n	80027c8 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80027c6:	e026      	b.n	8002816 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1cd      	bne.n	800276e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	6839      	ldr	r1, [r7, #0]
 80027d6:	68f8      	ldr	r0, [r7, #12]
 80027d8:	f000 fa36 	bl	8002c48 <SPI_EndRxTxTransaction>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d002      	beq.n	80027e8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2220      	movs	r2, #32
 80027e6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d10a      	bne.n	8002806 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027f0:	2300      	movs	r3, #0
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
 80027fa:	613b      	str	r3, [r7, #16]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	77fb      	strb	r3, [r7, #31]
 8002812:	e000      	b.n	8002816 <HAL_SPI_Transmit+0x24e>
  }

error:
 8002814:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	2201      	movs	r2, #1
 800281a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2200      	movs	r2, #0
 8002822:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002826:	7ffb      	ldrb	r3, [r7, #31]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3720      	adds	r7, #32
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08c      	sub	sp, #48	; 0x30
 8002834:	af00      	add	r7, sp, #0
 8002836:	60f8      	str	r0, [r7, #12]
 8002838:	60b9      	str	r1, [r7, #8]
 800283a:	607a      	str	r2, [r7, #4]
 800283c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800283e:	2301      	movs	r3, #1
 8002840:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002842:	2300      	movs	r3, #0
 8002844:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800284e:	2b01      	cmp	r3, #1
 8002850:	d101      	bne.n	8002856 <HAL_SPI_TransmitReceive+0x26>
 8002852:	2302      	movs	r3, #2
 8002854:	e18a      	b.n	8002b6c <HAL_SPI_TransmitReceive+0x33c>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2201      	movs	r2, #1
 800285a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800285e:	f7fe fdff 	bl	8001460 <HAL_GetTick>
 8002862:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800286a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002874:	887b      	ldrh	r3, [r7, #2]
 8002876:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002878:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800287c:	2b01      	cmp	r3, #1
 800287e:	d00f      	beq.n	80028a0 <HAL_SPI_TransmitReceive+0x70>
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002886:	d107      	bne.n	8002898 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d103      	bne.n	8002898 <HAL_SPI_TransmitReceive+0x68>
 8002890:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002894:	2b04      	cmp	r3, #4
 8002896:	d003      	beq.n	80028a0 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002898:	2302      	movs	r3, #2
 800289a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800289e:	e15b      	b.n	8002b58 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d005      	beq.n	80028b2 <HAL_SPI_TransmitReceive+0x82>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d002      	beq.n	80028b2 <HAL_SPI_TransmitReceive+0x82>
 80028ac:	887b      	ldrh	r3, [r7, #2]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d103      	bne.n	80028ba <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80028b8:	e14e      	b.n	8002b58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b04      	cmp	r3, #4
 80028c4:	d003      	beq.n	80028ce <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2205      	movs	r2, #5
 80028ca:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2200      	movs	r2, #0
 80028d2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	887a      	ldrh	r2, [r7, #2]
 80028de:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	887a      	ldrh	r2, [r7, #2]
 80028e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	68ba      	ldr	r2, [r7, #8]
 80028ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	887a      	ldrh	r2, [r7, #2]
 80028f0:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	887a      	ldrh	r2, [r7, #2]
 80028f6:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2200      	movs	r2, #0
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2200      	movs	r2, #0
 8002902:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290e:	2b40      	cmp	r3, #64	; 0x40
 8002910:	d007      	beq.n	8002922 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002920:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800292a:	d178      	bne.n	8002a1e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d002      	beq.n	800293a <HAL_SPI_TransmitReceive+0x10a>
 8002934:	8b7b      	ldrh	r3, [r7, #26]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d166      	bne.n	8002a08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800293e:	881a      	ldrh	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800294a:	1c9a      	adds	r2, r3, #2
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800295e:	e053      	b.n	8002a08 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b02      	cmp	r3, #2
 800296c:	d11b      	bne.n	80029a6 <HAL_SPI_TransmitReceive+0x176>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002972:	b29b      	uxth	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d016      	beq.n	80029a6 <HAL_SPI_TransmitReceive+0x176>
 8002978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800297a:	2b01      	cmp	r3, #1
 800297c:	d113      	bne.n	80029a6 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	881a      	ldrh	r2, [r3, #0]
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	1c9a      	adds	r2, r3, #2
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d119      	bne.n	80029e8 <HAL_SPI_TransmitReceive+0x1b8>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d014      	beq.n	80029e8 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c8:	b292      	uxth	r2, r2
 80029ca:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d0:	1c9a      	adds	r2, r3, #2
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80029e4:	2301      	movs	r3, #1
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80029e8:	f7fe fd3a 	bl	8001460 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d807      	bhi.n	8002a08 <HAL_SPI_TransmitReceive+0x1d8>
 80029f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fe:	d003      	beq.n	8002a08 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8002a00:	2303      	movs	r3, #3
 8002a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002a06:	e0a7      	b.n	8002b58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1a6      	bne.n	8002960 <HAL_SPI_TransmitReceive+0x130>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a16:	b29b      	uxth	r3, r3
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1a1      	bne.n	8002960 <HAL_SPI_TransmitReceive+0x130>
 8002a1c:	e07c      	b.n	8002b18 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d002      	beq.n	8002a2c <HAL_SPI_TransmitReceive+0x1fc>
 8002a26:	8b7b      	ldrh	r3, [r7, #26]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d16b      	bne.n	8002b04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	330c      	adds	r3, #12
 8002a36:	7812      	ldrb	r2, [r2, #0]
 8002a38:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	1c5a      	adds	r2, r3, #1
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002a52:	e057      	b.n	8002b04 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0302 	and.w	r3, r3, #2
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d11c      	bne.n	8002a9c <HAL_SPI_TransmitReceive+0x26c>
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d017      	beq.n	8002a9c <HAL_SPI_TransmitReceive+0x26c>
 8002a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d114      	bne.n	8002a9c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	330c      	adds	r3, #12
 8002a7c:	7812      	ldrb	r2, [r2, #0]
 8002a7e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d119      	bne.n	8002ade <HAL_SPI_TransmitReceive+0x2ae>
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aae:	b29b      	uxth	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d014      	beq.n	8002ade <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68da      	ldr	r2, [r3, #12]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	1c5a      	adds	r2, r3, #1
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002ada:	2301      	movs	r3, #1
 8002adc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002ade:	f7fe fcbf 	bl	8001460 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aea:	429a      	cmp	r2, r3
 8002aec:	d803      	bhi.n	8002af6 <HAL_SPI_TransmitReceive+0x2c6>
 8002aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af4:	d102      	bne.n	8002afc <HAL_SPI_TransmitReceive+0x2cc>
 8002af6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d103      	bne.n	8002b04 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8002afc:	2303      	movs	r3, #3
 8002afe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8002b02:	e029      	b.n	8002b58 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d1a2      	bne.n	8002a54 <HAL_SPI_TransmitReceive+0x224>
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d19d      	bne.n	8002a54 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b1c:	68f8      	ldr	r0, [r7, #12]
 8002b1e:	f000 f893 	bl	8002c48 <SPI_EndRxTxTransaction>
 8002b22:	4603      	mov	r3, r0
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d006      	beq.n	8002b36 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002b34:	e010      	b.n	8002b58 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10b      	bne.n	8002b56 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b3e:	2300      	movs	r3, #0
 8002b40:	617b      	str	r3, [r7, #20]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	617b      	str	r3, [r7, #20]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	617b      	str	r3, [r7, #20]
 8002b52:	697b      	ldr	r3, [r7, #20]
 8002b54:	e000      	b.n	8002b58 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8002b56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002b68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3730      	adds	r7, #48	; 0x30
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}

08002b74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	60f8      	str	r0, [r7, #12]
 8002b7c:	60b9      	str	r1, [r7, #8]
 8002b7e:	603b      	str	r3, [r7, #0]
 8002b80:	4613      	mov	r3, r2
 8002b82:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002b84:	e04c      	b.n	8002c20 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8c:	d048      	beq.n	8002c20 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002b8e:	f7fe fc67 	bl	8001460 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d902      	bls.n	8002ba4 <SPI_WaitFlagStateUntilTimeout+0x30>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d13d      	bne.n	8002c20 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002bb2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002bbc:	d111      	bne.n	8002be2 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002bc6:	d004      	beq.n	8002bd2 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bd0:	d107      	bne.n	8002be2 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002be0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bea:	d10f      	bne.n	8002c0c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002bfa:	601a      	str	r2, [r3, #0]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c0a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2201      	movs	r2, #1
 8002c10:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e00f      	b.n	8002c40 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	bf0c      	ite	eq
 8002c30:	2301      	moveq	r3, #1
 8002c32:	2300      	movne	r3, #0
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	461a      	mov	r2, r3
 8002c38:	79fb      	ldrb	r3, [r7, #7]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d1a3      	bne.n	8002b86 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3710      	adds	r7, #16
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	60b9      	str	r1, [r7, #8]
 8002c52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002c54:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <SPI_EndRxTxTransaction+0x7c>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1b      	ldr	r2, [pc, #108]	; (8002cc8 <SPI_EndRxTxTransaction+0x80>)
 8002c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5e:	0d5b      	lsrs	r3, r3, #21
 8002c60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002c64:	fb02 f303 	mul.w	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c72:	d112      	bne.n	8002c9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2180      	movs	r1, #128	; 0x80
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff ff78 	bl	8002b74 <SPI_WaitFlagStateUntilTimeout>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d016      	beq.n	8002cb8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e00f      	b.n	8002cba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d00a      	beq.n	8002cb6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	3b01      	subs	r3, #1
 8002ca4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cb0:	2b80      	cmp	r3, #128	; 0x80
 8002cb2:	d0f2      	beq.n	8002c9a <SPI_EndRxTxTransaction+0x52>
 8002cb4:	e000      	b.n	8002cb8 <SPI_EndRxTxTransaction+0x70>
        break;
 8002cb6:	bf00      	nop
  }

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000010 	.word	0x20000010
 8002cc8:	165e9f81 	.word	0x165e9f81

08002ccc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d101      	bne.n	8002cde <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e01d      	b.n	8002d1a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d106      	bne.n	8002cf8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7fe fa54 	bl	80011a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2202      	movs	r2, #2
 8002cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	3304      	adds	r3, #4
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4610      	mov	r0, r2
 8002d0c:	f000 f9fa 	bl	8003104 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	691b      	ldr	r3, [r3, #16]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d122      	bne.n	8002d7e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d11b      	bne.n	8002d7e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f06f 0202 	mvn.w	r2, #2
 8002d4e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	f003 0303 	and.w	r3, r3, #3
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f9af 	bl	80030c8 <HAL_TIM_IC_CaptureCallback>
 8002d6a:	e005      	b.n	8002d78 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f000 f9a1 	bl	80030b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f9b2 	bl	80030dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	691b      	ldr	r3, [r3, #16]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d122      	bne.n	8002dd2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f003 0304 	and.w	r3, r3, #4
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d11b      	bne.n	8002dd2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f06f 0204 	mvn.w	r2, #4
 8002da2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2202      	movs	r2, #2
 8002da8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	699b      	ldr	r3, [r3, #24]
 8002db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d003      	beq.n	8002dc0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f000 f985 	bl	80030c8 <HAL_TIM_IC_CaptureCallback>
 8002dbe:	e005      	b.n	8002dcc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f000 f977 	bl	80030b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f988 	bl	80030dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d122      	bne.n	8002e26 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
 8002de6:	f003 0308 	and.w	r3, r3, #8
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d11b      	bne.n	8002e26 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f06f 0208 	mvn.w	r2, #8
 8002df6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2204      	movs	r2, #4
 8002dfc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f003 0303 	and.w	r3, r3, #3
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d003      	beq.n	8002e14 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 f95b 	bl	80030c8 <HAL_TIM_IC_CaptureCallback>
 8002e12:	e005      	b.n	8002e20 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f000 f94d 	bl	80030b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 f95e 	bl	80030dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2200      	movs	r2, #0
 8002e24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	f003 0310 	and.w	r3, r3, #16
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d122      	bne.n	8002e7a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f003 0310 	and.w	r3, r3, #16
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d11b      	bne.n	8002e7a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f06f 0210 	mvn.w	r2, #16
 8002e4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2208      	movs	r2, #8
 8002e50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	69db      	ldr	r3, [r3, #28]
 8002e58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d003      	beq.n	8002e68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 f931 	bl	80030c8 <HAL_TIM_IC_CaptureCallback>
 8002e66:	e005      	b.n	8002e74 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 f923 	bl	80030b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f934 	bl	80030dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	691b      	ldr	r3, [r3, #16]
 8002e80:	f003 0301 	and.w	r3, r3, #1
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d10e      	bne.n	8002ea6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f06f 0201 	mvn.w	r2, #1
 8002e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 f8fd 	bl	80030a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb0:	2b80      	cmp	r3, #128	; 0x80
 8002eb2:	d10e      	bne.n	8002ed2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ebe:	2b80      	cmp	r3, #128	; 0x80
 8002ec0:	d107      	bne.n	8002ed2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002eca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 faab 	bl	8003428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	691b      	ldr	r3, [r3, #16]
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	2b40      	cmp	r3, #64	; 0x40
 8002ede:	d10e      	bne.n	8002efe <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eea:	2b40      	cmp	r3, #64	; 0x40
 8002eec:	d107      	bne.n	8002efe <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 f8f9 	bl	80030f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d10e      	bne.n	8002f2a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	68db      	ldr	r3, [r3, #12]
 8002f12:	f003 0320 	and.w	r3, r3, #32
 8002f16:	2b20      	cmp	r3, #32
 8002f18:	d107      	bne.n	8002f2a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f06f 0220 	mvn.w	r2, #32
 8002f22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 fa75 	bl	8003414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f2a:	bf00      	nop
 8002f2c:	3708      	adds	r7, #8
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b084      	sub	sp, #16
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	6078      	str	r0, [r7, #4]
 8002f3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_TIM_ConfigClockSource+0x18>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e0a6      	b.n	8003098 <HAL_TIM_ConfigClockSource+0x166>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2202      	movs	r2, #2
 8002f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002f68:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f70:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2b40      	cmp	r3, #64	; 0x40
 8002f80:	d067      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0x120>
 8002f82:	2b40      	cmp	r3, #64	; 0x40
 8002f84:	d80b      	bhi.n	8002f9e <HAL_TIM_ConfigClockSource+0x6c>
 8002f86:	2b10      	cmp	r3, #16
 8002f88:	d073      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x140>
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	d802      	bhi.n	8002f94 <HAL_TIM_ConfigClockSource+0x62>
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d06f      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002f92:	e078      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f94:	2b20      	cmp	r3, #32
 8002f96:	d06c      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x140>
 8002f98:	2b30      	cmp	r3, #48	; 0x30
 8002f9a:	d06a      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002f9c:	e073      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002f9e:	2b70      	cmp	r3, #112	; 0x70
 8002fa0:	d00d      	beq.n	8002fbe <HAL_TIM_ConfigClockSource+0x8c>
 8002fa2:	2b70      	cmp	r3, #112	; 0x70
 8002fa4:	d804      	bhi.n	8002fb0 <HAL_TIM_ConfigClockSource+0x7e>
 8002fa6:	2b50      	cmp	r3, #80	; 0x50
 8002fa8:	d033      	beq.n	8003012 <HAL_TIM_ConfigClockSource+0xe0>
 8002faa:	2b60      	cmp	r3, #96	; 0x60
 8002fac:	d041      	beq.n	8003032 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002fae:	e06a      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002fb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fb4:	d066      	beq.n	8003084 <HAL_TIM_ConfigClockSource+0x152>
 8002fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fba:	d017      	beq.n	8002fec <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002fbc:	e063      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6818      	ldr	r0, [r3, #0]
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	6899      	ldr	r1, [r3, #8]
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685a      	ldr	r2, [r3, #4]
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	68db      	ldr	r3, [r3, #12]
 8002fce:	f000 f993 	bl	80032f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002fe0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	609a      	str	r2, [r3, #8]
      break;
 8002fea:	e04c      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6818      	ldr	r0, [r3, #0]
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	6899      	ldr	r1, [r3, #8]
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685a      	ldr	r2, [r3, #4]
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	f000 f97c 	bl	80032f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689a      	ldr	r2, [r3, #8]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800300e:	609a      	str	r2, [r3, #8]
      break;
 8003010:	e039      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6818      	ldr	r0, [r3, #0]
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	6859      	ldr	r1, [r3, #4]
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	68db      	ldr	r3, [r3, #12]
 800301e:	461a      	mov	r2, r3
 8003020:	f000 f8f0 	bl	8003204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	2150      	movs	r1, #80	; 0x50
 800302a:	4618      	mov	r0, r3
 800302c:	f000 f949 	bl	80032c2 <TIM_ITRx_SetConfig>
      break;
 8003030:	e029      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6818      	ldr	r0, [r3, #0]
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6859      	ldr	r1, [r3, #4]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	461a      	mov	r2, r3
 8003040:	f000 f90f 	bl	8003262 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	2160      	movs	r1, #96	; 0x60
 800304a:	4618      	mov	r0, r3
 800304c:	f000 f939 	bl	80032c2 <TIM_ITRx_SetConfig>
      break;
 8003050:	e019      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6859      	ldr	r1, [r3, #4]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	461a      	mov	r2, r3
 8003060:	f000 f8d0 	bl	8003204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2140      	movs	r1, #64	; 0x40
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f929 	bl	80032c2 <TIM_ITRx_SetConfig>
      break;
 8003070:	e009      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4619      	mov	r1, r3
 800307c:	4610      	mov	r0, r2
 800307e:	f000 f920 	bl	80032c2 <TIM_ITRx_SetConfig>
      break;
 8003082:	e000      	b.n	8003086 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003084:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003096:	2300      	movs	r3, #0
}
 8003098:	4618      	mov	r0, r3
 800309a:	3710      	adds	r7, #16
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80030a8:	bf00      	nop
 80030aa:	370c      	adds	r7, #12
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80030bc:	bf00      	nop
 80030be:	370c      	adds	r7, #12
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr

080030c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80030e4:	bf00      	nop
 80030e6:	370c      	adds	r7, #12
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b083      	sub	sp, #12
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80030f8:	bf00      	nop
 80030fa:	370c      	adds	r7, #12
 80030fc:	46bd      	mov	sp, r7
 80030fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003102:	4770      	bx	lr

08003104 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003104:	b480      	push	{r7}
 8003106:	b085      	sub	sp, #20
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
 800310c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a34      	ldr	r2, [pc, #208]	; (80031e8 <TIM_Base_SetConfig+0xe4>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d00f      	beq.n	800313c <TIM_Base_SetConfig+0x38>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003122:	d00b      	beq.n	800313c <TIM_Base_SetConfig+0x38>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a31      	ldr	r2, [pc, #196]	; (80031ec <TIM_Base_SetConfig+0xe8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d007      	beq.n	800313c <TIM_Base_SetConfig+0x38>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a30      	ldr	r2, [pc, #192]	; (80031f0 <TIM_Base_SetConfig+0xec>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d003      	beq.n	800313c <TIM_Base_SetConfig+0x38>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a2f      	ldr	r2, [pc, #188]	; (80031f4 <TIM_Base_SetConfig+0xf0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d108      	bne.n	800314e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	68fa      	ldr	r2, [r7, #12]
 800314a:	4313      	orrs	r3, r2
 800314c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a25      	ldr	r2, [pc, #148]	; (80031e8 <TIM_Base_SetConfig+0xe4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d01b      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315c:	d017      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a22      	ldr	r2, [pc, #136]	; (80031ec <TIM_Base_SetConfig+0xe8>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d013      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	4a21      	ldr	r2, [pc, #132]	; (80031f0 <TIM_Base_SetConfig+0xec>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00f      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a20      	ldr	r2, [pc, #128]	; (80031f4 <TIM_Base_SetConfig+0xf0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d00b      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a1f      	ldr	r2, [pc, #124]	; (80031f8 <TIM_Base_SetConfig+0xf4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d007      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a1e      	ldr	r2, [pc, #120]	; (80031fc <TIM_Base_SetConfig+0xf8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d003      	beq.n	800318e <TIM_Base_SetConfig+0x8a>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a1d      	ldr	r2, [pc, #116]	; (8003200 <TIM_Base_SetConfig+0xfc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d108      	bne.n	80031a0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4313      	orrs	r3, r2
 800319e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a08      	ldr	r2, [pc, #32]	; (80031e8 <TIM_Base_SetConfig+0xe4>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d103      	bne.n	80031d4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	691a      	ldr	r2, [r3, #16]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	615a      	str	r2, [r3, #20]
}
 80031da:	bf00      	nop
 80031dc:	3714      	adds	r7, #20
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40010000 	.word	0x40010000
 80031ec:	40000400 	.word	0x40000400
 80031f0:	40000800 	.word	0x40000800
 80031f4:	40000c00 	.word	0x40000c00
 80031f8:	40014000 	.word	0x40014000
 80031fc:	40014400 	.word	0x40014400
 8003200:	40014800 	.word	0x40014800

08003204 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a1b      	ldr	r3, [r3, #32]
 8003214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6a1b      	ldr	r3, [r3, #32]
 800321a:	f023 0201 	bic.w	r2, r3, #1
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800322e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	693a      	ldr	r2, [r7, #16]
 8003236:	4313      	orrs	r3, r2
 8003238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	f023 030a 	bic.w	r3, r3, #10
 8003240:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	4313      	orrs	r3, r2
 8003248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	693a      	ldr	r2, [r7, #16]
 800324e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	621a      	str	r2, [r3, #32]
}
 8003256:	bf00      	nop
 8003258:	371c      	adds	r7, #28
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr

08003262 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003262:	b480      	push	{r7}
 8003264:	b087      	sub	sp, #28
 8003266:	af00      	add	r7, sp, #0
 8003268:	60f8      	str	r0, [r7, #12]
 800326a:	60b9      	str	r1, [r7, #8]
 800326c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	6a1b      	ldr	r3, [r3, #32]
 8003272:	f023 0210 	bic.w	r2, r3, #16
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800328c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	031b      	lsls	r3, r3, #12
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	4313      	orrs	r3, r2
 8003296:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800329e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	011b      	lsls	r3, r3, #4
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	697a      	ldr	r2, [r7, #20]
 80032ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	693a      	ldr	r2, [r7, #16]
 80032b4:	621a      	str	r2, [r3, #32]
}
 80032b6:	bf00      	nop
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr

080032c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
 80032ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4313      	orrs	r3, r2
 80032e0:	f043 0307 	orr.w	r3, r3, #7
 80032e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	609a      	str	r2, [r3, #8]
}
 80032ec:	bf00      	nop
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b087      	sub	sp, #28
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
 8003304:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003312:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	021a      	lsls	r2, r3, #8
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	431a      	orrs	r2, r3
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	4313      	orrs	r3, r2
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	4313      	orrs	r3, r2
 8003324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	697a      	ldr	r2, [r7, #20]
 800332a:	609a      	str	r2, [r3, #8]
}
 800332c:	bf00      	nop
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003348:	2b01      	cmp	r3, #1
 800334a:	d101      	bne.n	8003350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800334c:	2302      	movs	r3, #2
 800334e:	e050      	b.n	80033f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2202      	movs	r2, #2
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a1c      	ldr	r2, [pc, #112]	; (8003400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d018      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800339c:	d013      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a18      	ldr	r2, [pc, #96]	; (8003404 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d00e      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a16      	ldr	r2, [pc, #88]	; (8003408 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d009      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a15      	ldr	r2, [pc, #84]	; (800340c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d004      	beq.n	80033c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a13      	ldr	r2, [pc, #76]	; (8003410 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10c      	bne.n	80033e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	68ba      	ldr	r2, [r7, #8]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68ba      	ldr	r2, [r7, #8]
 80033de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	40010000 	.word	0x40010000
 8003404:	40000400 	.word	0x40000400
 8003408:	40000800 	.word	0x40000800
 800340c:	40000c00 	.word	0x40000c00
 8003410:	40014000 	.word	0x40014000

08003414 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d101      	bne.n	800344e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e03f      	b.n	80034ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d106      	bne.n	8003468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f7fd fec4 	bl	80011f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2224      	movs	r2, #36	; 0x24
 800346c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68da      	ldr	r2, [r3, #12]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800347e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f000 fa69 	bl	8003958 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	695a      	ldr	r2, [r3, #20]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	68da      	ldr	r2, [r3, #12]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80034b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2220      	movs	r2, #32
 80034c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
	...

080034d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b088      	sub	sp, #32
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68db      	ldr	r3, [r3, #12]
 80034ee:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80034fc:	2300      	movs	r3, #0
 80034fe:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f003 030f 	and.w	r3, r3, #15
 8003506:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10d      	bne.n	800352a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	f003 0320 	and.w	r3, r3, #32
 8003514:	2b00      	cmp	r3, #0
 8003516:	d008      	beq.n	800352a <HAL_UART_IRQHandler+0x52>
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	f003 0320 	and.w	r3, r3, #32
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f000 f996 	bl	8003854 <UART_Receive_IT>
      return;
 8003528:	e0d1      	b.n	80036ce <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 80b0 	beq.w	8003692 <HAL_UART_IRQHandler+0x1ba>
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f003 0301 	and.w	r3, r3, #1
 8003538:	2b00      	cmp	r3, #0
 800353a:	d105      	bne.n	8003548 <HAL_UART_IRQHandler+0x70>
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003542:	2b00      	cmp	r3, #0
 8003544:	f000 80a5 	beq.w	8003692 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00a      	beq.n	8003568 <HAL_UART_IRQHandler+0x90>
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003558:	2b00      	cmp	r3, #0
 800355a:	d005      	beq.n	8003568 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003560:	f043 0201 	orr.w	r2, r3, #1
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_UART_IRQHandler+0xb0>
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f003 0301 	and.w	r3, r3, #1
 8003578:	2b00      	cmp	r3, #0
 800357a:	d005      	beq.n	8003588 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003580:	f043 0202 	orr.w	r2, r3, #2
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003588:	69fb      	ldr	r3, [r7, #28]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00a      	beq.n	80035a8 <HAL_UART_IRQHandler+0xd0>
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b00      	cmp	r3, #0
 800359a:	d005      	beq.n	80035a8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035a0:	f043 0204 	orr.w	r2, r3, #4
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f003 0308 	and.w	r3, r3, #8
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00f      	beq.n	80035d2 <HAL_UART_IRQHandler+0xfa>
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	f003 0320 	and.w	r3, r3, #32
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d104      	bne.n	80035c6 <HAL_UART_IRQHandler+0xee>
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	f003 0301 	and.w	r3, r3, #1
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d005      	beq.n	80035d2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ca:	f043 0208 	orr.w	r2, r3, #8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d078      	beq.n	80036cc <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0320 	and.w	r3, r3, #32
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d007      	beq.n	80035f4 <HAL_UART_IRQHandler+0x11c>
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	f003 0320 	and.w	r3, r3, #32
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f000 f930 	bl	8003854 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035fe:	2b40      	cmp	r3, #64	; 0x40
 8003600:	bf0c      	ite	eq
 8003602:	2301      	moveq	r3, #1
 8003604:	2300      	movne	r3, #0
 8003606:	b2db      	uxtb	r3, r3
 8003608:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360e:	f003 0308 	and.w	r3, r3, #8
 8003612:	2b00      	cmp	r3, #0
 8003614:	d102      	bne.n	800361c <HAL_UART_IRQHandler+0x144>
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d031      	beq.n	8003680 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 f879 	bl	8003714 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362c:	2b40      	cmp	r3, #64	; 0x40
 800362e:	d123      	bne.n	8003678 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695a      	ldr	r2, [r3, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800363e:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003644:	2b00      	cmp	r3, #0
 8003646:	d013      	beq.n	8003670 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364c:	4a21      	ldr	r2, [pc, #132]	; (80036d4 <HAL_UART_IRQHandler+0x1fc>)
 800364e:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003654:	4618      	mov	r0, r3
 8003656:	f7fe f820 	bl	800169a <HAL_DMA_Abort_IT>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d016      	beq.n	800368e <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003666:	687a      	ldr	r2, [r7, #4]
 8003668:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800366a:	4610      	mov	r0, r2
 800366c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800366e:	e00e      	b.n	800368e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f000 f845 	bl	8003700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003676:	e00a      	b.n	800368e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 f841 	bl	8003700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800367e:	e006      	b.n	800368e <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f83d 	bl	8003700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 800368c:	e01e      	b.n	80036cc <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800368e:	bf00      	nop
    return;
 8003690:	e01c      	b.n	80036cc <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003692:	69fb      	ldr	r3, [r7, #28]
 8003694:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003698:	2b00      	cmp	r3, #0
 800369a:	d008      	beq.n	80036ae <HAL_UART_IRQHandler+0x1d6>
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f000 f866 	bl	8003778 <UART_Transmit_IT>
    return;
 80036ac:	e00f      	b.n	80036ce <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d00a      	beq.n	80036ce <HAL_UART_IRQHandler+0x1f6>
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d005      	beq.n	80036ce <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f8ae 	bl	8003824 <UART_EndTransmit_IT>
    return;
 80036c8:	bf00      	nop
 80036ca:	e000      	b.n	80036ce <HAL_UART_IRQHandler+0x1f6>
    return;
 80036cc:	bf00      	nop
  }
}
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	08003751 	.word	0x08003751

080036d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr

08003700 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68da      	ldr	r2, [r3, #12]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800372a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0201 	bic.w	r2, r2, #1
 800373a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003744:	bf00      	nop
 8003746:	370c      	adds	r7, #12
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr

08003750 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2200      	movs	r2, #0
 8003762:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800376a:	68f8      	ldr	r0, [r7, #12]
 800376c:	f7ff ffc8 	bl	8003700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003770:	bf00      	nop
 8003772:	3710      	adds	r7, #16
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}

08003778 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003778:	b480      	push	{r7}
 800377a:	b085      	sub	sp, #20
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003786:	b2db      	uxtb	r3, r3
 8003788:	2b21      	cmp	r3, #33	; 0x21
 800378a:	d144      	bne.n	8003816 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003794:	d11a      	bne.n	80037cc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	881b      	ldrh	r3, [r3, #0]
 80037a0:	461a      	mov	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037aa:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d105      	bne.n	80037c0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a1b      	ldr	r3, [r3, #32]
 80037b8:	1c9a      	adds	r2, r3, #2
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	621a      	str	r2, [r3, #32]
 80037be:	e00e      	b.n	80037de <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	621a      	str	r2, [r3, #32]
 80037ca:	e008      	b.n	80037de <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	1c59      	adds	r1, r3, #1
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6211      	str	r1, [r2, #32]
 80037d6:	781a      	ldrb	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4619      	mov	r1, r3
 80037ec:	84d1      	strh	r1, [r2, #38]	; 0x26
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d10f      	bne.n	8003812 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003800:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003810:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003812:	2300      	movs	r3, #0
 8003814:	e000      	b.n	8003818 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003816:	2302      	movs	r3, #2
  }
}
 8003818:	4618      	mov	r0, r3
 800381a:	3714      	adds	r7, #20
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68da      	ldr	r2, [r3, #12]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800383a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2220      	movs	r2, #32
 8003840:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff ff47 	bl	80036d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800384a:	2300      	movs	r3, #0
}
 800384c:	4618      	mov	r0, r3
 800384e:	3708      	adds	r7, #8
 8003850:	46bd      	mov	sp, r7
 8003852:	bd80      	pop	{r7, pc}

08003854 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b22      	cmp	r3, #34	; 0x22
 8003866:	d171      	bne.n	800394c <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003870:	d123      	bne.n	80038ba <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003876:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10e      	bne.n	800389e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	b29b      	uxth	r3, r3
 8003888:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003896:	1c9a      	adds	r2, r3, #2
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	629a      	str	r2, [r3, #40]	; 0x28
 800389c:	e029      	b.n	80038f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b2:	1c5a      	adds	r2, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	629a      	str	r2, [r3, #40]	; 0x28
 80038b8:	e01b      	b.n	80038f2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10a      	bne.n	80038d8 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6858      	ldr	r0, [r3, #4]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038cc:	1c59      	adds	r1, r3, #1
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6291      	str	r1, [r2, #40]	; 0x28
 80038d2:	b2c2      	uxtb	r2, r0
 80038d4:	701a      	strb	r2, [r3, #0]
 80038d6:	e00c      	b.n	80038f2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	b2da      	uxtb	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	1c58      	adds	r0, r3, #1
 80038e6:	6879      	ldr	r1, [r7, #4]
 80038e8:	6288      	str	r0, [r1, #40]	; 0x28
 80038ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	3b01      	subs	r3, #1
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4619      	mov	r1, r3
 8003900:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003902:	2b00      	cmp	r3, #0
 8003904:	d120      	bne.n	8003948 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	68da      	ldr	r2, [r3, #12]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0220 	bic.w	r2, r2, #32
 8003914:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68da      	ldr	r2, [r3, #12]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003924:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695a      	ldr	r2, [r3, #20]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f022 0201 	bic.w	r2, r2, #1
 8003934:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	f7ff fed4 	bl	80036ec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003944:	2300      	movs	r3, #0
 8003946:	e002      	b.n	800394e <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003948:	2300      	movs	r3, #0
 800394a:	e000      	b.n	800394e <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800394c:	2302      	movs	r3, #2
  }
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800395c:	b085      	sub	sp, #20
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691b      	ldr	r3, [r3, #16]
 8003968:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	691b      	ldr	r3, [r3, #16]
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800399a:	f023 030c 	bic.w	r3, r3, #12
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6812      	ldr	r2, [r2, #0]
 80039a2:	68f9      	ldr	r1, [r7, #12]
 80039a4:	430b      	orrs	r3, r1
 80039a6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	699a      	ldr	r2, [r3, #24]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	430a      	orrs	r2, r1
 80039bc:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039c6:	f040 818b 	bne.w	8003ce0 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4ac1      	ldr	r2, [pc, #772]	; (8003cd4 <UART_SetConfig+0x37c>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d005      	beq.n	80039e0 <UART_SetConfig+0x88>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4abf      	ldr	r2, [pc, #764]	; (8003cd8 <UART_SetConfig+0x380>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	f040 80bd 	bne.w	8003b5a <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80039e0:	f7fe fd7a 	bl	80024d8 <HAL_RCC_GetPCLK2Freq>
 80039e4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	461d      	mov	r5, r3
 80039ea:	f04f 0600 	mov.w	r6, #0
 80039ee:	46a8      	mov	r8, r5
 80039f0:	46b1      	mov	r9, r6
 80039f2:	eb18 0308 	adds.w	r3, r8, r8
 80039f6:	eb49 0409 	adc.w	r4, r9, r9
 80039fa:	4698      	mov	r8, r3
 80039fc:	46a1      	mov	r9, r4
 80039fe:	eb18 0805 	adds.w	r8, r8, r5
 8003a02:	eb49 0906 	adc.w	r9, r9, r6
 8003a06:	f04f 0100 	mov.w	r1, #0
 8003a0a:	f04f 0200 	mov.w	r2, #0
 8003a0e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a12:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a16:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a1a:	4688      	mov	r8, r1
 8003a1c:	4691      	mov	r9, r2
 8003a1e:	eb18 0005 	adds.w	r0, r8, r5
 8003a22:	eb49 0106 	adc.w	r1, r9, r6
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	461d      	mov	r5, r3
 8003a2c:	f04f 0600 	mov.w	r6, #0
 8003a30:	196b      	adds	r3, r5, r5
 8003a32:	eb46 0406 	adc.w	r4, r6, r6
 8003a36:	461a      	mov	r2, r3
 8003a38:	4623      	mov	r3, r4
 8003a3a:	f7fc fbcd 	bl	80001d8 <__aeabi_uldivmod>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	460c      	mov	r4, r1
 8003a42:	461a      	mov	r2, r3
 8003a44:	4ba5      	ldr	r3, [pc, #660]	; (8003cdc <UART_SetConfig+0x384>)
 8003a46:	fba3 2302 	umull	r2, r3, r3, r2
 8003a4a:	095b      	lsrs	r3, r3, #5
 8003a4c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	461d      	mov	r5, r3
 8003a54:	f04f 0600 	mov.w	r6, #0
 8003a58:	46a9      	mov	r9, r5
 8003a5a:	46b2      	mov	sl, r6
 8003a5c:	eb19 0309 	adds.w	r3, r9, r9
 8003a60:	eb4a 040a 	adc.w	r4, sl, sl
 8003a64:	4699      	mov	r9, r3
 8003a66:	46a2      	mov	sl, r4
 8003a68:	eb19 0905 	adds.w	r9, r9, r5
 8003a6c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003a70:	f04f 0100 	mov.w	r1, #0
 8003a74:	f04f 0200 	mov.w	r2, #0
 8003a78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a84:	4689      	mov	r9, r1
 8003a86:	4692      	mov	sl, r2
 8003a88:	eb19 0005 	adds.w	r0, r9, r5
 8003a8c:	eb4a 0106 	adc.w	r1, sl, r6
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	461d      	mov	r5, r3
 8003a96:	f04f 0600 	mov.w	r6, #0
 8003a9a:	196b      	adds	r3, r5, r5
 8003a9c:	eb46 0406 	adc.w	r4, r6, r6
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	4623      	mov	r3, r4
 8003aa4:	f7fc fb98 	bl	80001d8 <__aeabi_uldivmod>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	460c      	mov	r4, r1
 8003aac:	461a      	mov	r2, r3
 8003aae:	4b8b      	ldr	r3, [pc, #556]	; (8003cdc <UART_SetConfig+0x384>)
 8003ab0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ab4:	095b      	lsrs	r3, r3, #5
 8003ab6:	2164      	movs	r1, #100	; 0x64
 8003ab8:	fb01 f303 	mul.w	r3, r1, r3
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	00db      	lsls	r3, r3, #3
 8003ac0:	3332      	adds	r3, #50	; 0x32
 8003ac2:	4a86      	ldr	r2, [pc, #536]	; (8003cdc <UART_SetConfig+0x384>)
 8003ac4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac8:	095b      	lsrs	r3, r3, #5
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ad0:	4498      	add	r8, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	461d      	mov	r5, r3
 8003ad6:	f04f 0600 	mov.w	r6, #0
 8003ada:	46a9      	mov	r9, r5
 8003adc:	46b2      	mov	sl, r6
 8003ade:	eb19 0309 	adds.w	r3, r9, r9
 8003ae2:	eb4a 040a 	adc.w	r4, sl, sl
 8003ae6:	4699      	mov	r9, r3
 8003ae8:	46a2      	mov	sl, r4
 8003aea:	eb19 0905 	adds.w	r9, r9, r5
 8003aee:	eb4a 0a06 	adc.w	sl, sl, r6
 8003af2:	f04f 0100 	mov.w	r1, #0
 8003af6:	f04f 0200 	mov.w	r2, #0
 8003afa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003afe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b02:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b06:	4689      	mov	r9, r1
 8003b08:	4692      	mov	sl, r2
 8003b0a:	eb19 0005 	adds.w	r0, r9, r5
 8003b0e:	eb4a 0106 	adc.w	r1, sl, r6
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	461d      	mov	r5, r3
 8003b18:	f04f 0600 	mov.w	r6, #0
 8003b1c:	196b      	adds	r3, r5, r5
 8003b1e:	eb46 0406 	adc.w	r4, r6, r6
 8003b22:	461a      	mov	r2, r3
 8003b24:	4623      	mov	r3, r4
 8003b26:	f7fc fb57 	bl	80001d8 <__aeabi_uldivmod>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	461a      	mov	r2, r3
 8003b30:	4b6a      	ldr	r3, [pc, #424]	; (8003cdc <UART_SetConfig+0x384>)
 8003b32:	fba3 1302 	umull	r1, r3, r3, r2
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	2164      	movs	r1, #100	; 0x64
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	3332      	adds	r3, #50	; 0x32
 8003b44:	4a65      	ldr	r2, [pc, #404]	; (8003cdc <UART_SetConfig+0x384>)
 8003b46:	fba2 2303 	umull	r2, r3, r2, r3
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	f003 0207 	and.w	r2, r3, #7
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4442      	add	r2, r8
 8003b56:	609a      	str	r2, [r3, #8]
 8003b58:	e26f      	b.n	800403a <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003b5a:	f7fe fca9 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 8003b5e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	461d      	mov	r5, r3
 8003b64:	f04f 0600 	mov.w	r6, #0
 8003b68:	46a8      	mov	r8, r5
 8003b6a:	46b1      	mov	r9, r6
 8003b6c:	eb18 0308 	adds.w	r3, r8, r8
 8003b70:	eb49 0409 	adc.w	r4, r9, r9
 8003b74:	4698      	mov	r8, r3
 8003b76:	46a1      	mov	r9, r4
 8003b78:	eb18 0805 	adds.w	r8, r8, r5
 8003b7c:	eb49 0906 	adc.w	r9, r9, r6
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003b8c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003b90:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003b94:	4688      	mov	r8, r1
 8003b96:	4691      	mov	r9, r2
 8003b98:	eb18 0005 	adds.w	r0, r8, r5
 8003b9c:	eb49 0106 	adc.w	r1, r9, r6
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	461d      	mov	r5, r3
 8003ba6:	f04f 0600 	mov.w	r6, #0
 8003baa:	196b      	adds	r3, r5, r5
 8003bac:	eb46 0406 	adc.w	r4, r6, r6
 8003bb0:	461a      	mov	r2, r3
 8003bb2:	4623      	mov	r3, r4
 8003bb4:	f7fc fb10 	bl	80001d8 <__aeabi_uldivmod>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	460c      	mov	r4, r1
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	4b47      	ldr	r3, [pc, #284]	; (8003cdc <UART_SetConfig+0x384>)
 8003bc0:	fba3 2302 	umull	r2, r3, r3, r2
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	461d      	mov	r5, r3
 8003bce:	f04f 0600 	mov.w	r6, #0
 8003bd2:	46a9      	mov	r9, r5
 8003bd4:	46b2      	mov	sl, r6
 8003bd6:	eb19 0309 	adds.w	r3, r9, r9
 8003bda:	eb4a 040a 	adc.w	r4, sl, sl
 8003bde:	4699      	mov	r9, r3
 8003be0:	46a2      	mov	sl, r4
 8003be2:	eb19 0905 	adds.w	r9, r9, r5
 8003be6:	eb4a 0a06 	adc.w	sl, sl, r6
 8003bea:	f04f 0100 	mov.w	r1, #0
 8003bee:	f04f 0200 	mov.w	r2, #0
 8003bf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003bfe:	4689      	mov	r9, r1
 8003c00:	4692      	mov	sl, r2
 8003c02:	eb19 0005 	adds.w	r0, r9, r5
 8003c06:	eb4a 0106 	adc.w	r1, sl, r6
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	461d      	mov	r5, r3
 8003c10:	f04f 0600 	mov.w	r6, #0
 8003c14:	196b      	adds	r3, r5, r5
 8003c16:	eb46 0406 	adc.w	r4, r6, r6
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	4623      	mov	r3, r4
 8003c1e:	f7fc fadb 	bl	80001d8 <__aeabi_uldivmod>
 8003c22:	4603      	mov	r3, r0
 8003c24:	460c      	mov	r4, r1
 8003c26:	461a      	mov	r2, r3
 8003c28:	4b2c      	ldr	r3, [pc, #176]	; (8003cdc <UART_SetConfig+0x384>)
 8003c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c2e:	095b      	lsrs	r3, r3, #5
 8003c30:	2164      	movs	r1, #100	; 0x64
 8003c32:	fb01 f303 	mul.w	r3, r1, r3
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	00db      	lsls	r3, r3, #3
 8003c3a:	3332      	adds	r3, #50	; 0x32
 8003c3c:	4a27      	ldr	r2, [pc, #156]	; (8003cdc <UART_SetConfig+0x384>)
 8003c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c42:	095b      	lsrs	r3, r3, #5
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c4a:	4498      	add	r8, r3
 8003c4c:	68bb      	ldr	r3, [r7, #8]
 8003c4e:	461d      	mov	r5, r3
 8003c50:	f04f 0600 	mov.w	r6, #0
 8003c54:	46a9      	mov	r9, r5
 8003c56:	46b2      	mov	sl, r6
 8003c58:	eb19 0309 	adds.w	r3, r9, r9
 8003c5c:	eb4a 040a 	adc.w	r4, sl, sl
 8003c60:	4699      	mov	r9, r3
 8003c62:	46a2      	mov	sl, r4
 8003c64:	eb19 0905 	adds.w	r9, r9, r5
 8003c68:	eb4a 0a06 	adc.w	sl, sl, r6
 8003c6c:	f04f 0100 	mov.w	r1, #0
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c78:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c7c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c80:	4689      	mov	r9, r1
 8003c82:	4692      	mov	sl, r2
 8003c84:	eb19 0005 	adds.w	r0, r9, r5
 8003c88:	eb4a 0106 	adc.w	r1, sl, r6
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	461d      	mov	r5, r3
 8003c92:	f04f 0600 	mov.w	r6, #0
 8003c96:	196b      	adds	r3, r5, r5
 8003c98:	eb46 0406 	adc.w	r4, r6, r6
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4623      	mov	r3, r4
 8003ca0:	f7fc fa9a 	bl	80001d8 <__aeabi_uldivmod>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	460c      	mov	r4, r1
 8003ca8:	461a      	mov	r2, r3
 8003caa:	4b0c      	ldr	r3, [pc, #48]	; (8003cdc <UART_SetConfig+0x384>)
 8003cac:	fba3 1302 	umull	r1, r3, r3, r2
 8003cb0:	095b      	lsrs	r3, r3, #5
 8003cb2:	2164      	movs	r1, #100	; 0x64
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	3332      	adds	r3, #50	; 0x32
 8003cbe:	4a07      	ldr	r2, [pc, #28]	; (8003cdc <UART_SetConfig+0x384>)
 8003cc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc4:	095b      	lsrs	r3, r3, #5
 8003cc6:	f003 0207 	and.w	r2, r3, #7
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4442      	add	r2, r8
 8003cd0:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003cd2:	e1b2      	b.n	800403a <UART_SetConfig+0x6e2>
 8003cd4:	40011000 	.word	0x40011000
 8003cd8:	40011400 	.word	0x40011400
 8003cdc:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4ad7      	ldr	r2, [pc, #860]	; (8004044 <UART_SetConfig+0x6ec>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d005      	beq.n	8003cf6 <UART_SetConfig+0x39e>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4ad6      	ldr	r2, [pc, #856]	; (8004048 <UART_SetConfig+0x6f0>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	f040 80d1 	bne.w	8003e98 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cf6:	f7fe fbef 	bl	80024d8 <HAL_RCC_GetPCLK2Freq>
 8003cfa:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	469a      	mov	sl, r3
 8003d00:	f04f 0b00 	mov.w	fp, #0
 8003d04:	46d0      	mov	r8, sl
 8003d06:	46d9      	mov	r9, fp
 8003d08:	eb18 0308 	adds.w	r3, r8, r8
 8003d0c:	eb49 0409 	adc.w	r4, r9, r9
 8003d10:	4698      	mov	r8, r3
 8003d12:	46a1      	mov	r9, r4
 8003d14:	eb18 080a 	adds.w	r8, r8, sl
 8003d18:	eb49 090b 	adc.w	r9, r9, fp
 8003d1c:	f04f 0100 	mov.w	r1, #0
 8003d20:	f04f 0200 	mov.w	r2, #0
 8003d24:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003d28:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003d2c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003d30:	4688      	mov	r8, r1
 8003d32:	4691      	mov	r9, r2
 8003d34:	eb1a 0508 	adds.w	r5, sl, r8
 8003d38:	eb4b 0609 	adc.w	r6, fp, r9
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	4619      	mov	r1, r3
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	f04f 0400 	mov.w	r4, #0
 8003d4e:	0094      	lsls	r4, r2, #2
 8003d50:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d54:	008b      	lsls	r3, r1, #2
 8003d56:	461a      	mov	r2, r3
 8003d58:	4623      	mov	r3, r4
 8003d5a:	4628      	mov	r0, r5
 8003d5c:	4631      	mov	r1, r6
 8003d5e:	f7fc fa3b 	bl	80001d8 <__aeabi_uldivmod>
 8003d62:	4603      	mov	r3, r0
 8003d64:	460c      	mov	r4, r1
 8003d66:	461a      	mov	r2, r3
 8003d68:	4bb8      	ldr	r3, [pc, #736]	; (800404c <UART_SetConfig+0x6f4>)
 8003d6a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d6e:	095b      	lsrs	r3, r3, #5
 8003d70:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	469b      	mov	fp, r3
 8003d78:	f04f 0c00 	mov.w	ip, #0
 8003d7c:	46d9      	mov	r9, fp
 8003d7e:	46e2      	mov	sl, ip
 8003d80:	eb19 0309 	adds.w	r3, r9, r9
 8003d84:	eb4a 040a 	adc.w	r4, sl, sl
 8003d88:	4699      	mov	r9, r3
 8003d8a:	46a2      	mov	sl, r4
 8003d8c:	eb19 090b 	adds.w	r9, r9, fp
 8003d90:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d94:	f04f 0100 	mov.w	r1, #0
 8003d98:	f04f 0200 	mov.w	r2, #0
 8003d9c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003da4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003da8:	4689      	mov	r9, r1
 8003daa:	4692      	mov	sl, r2
 8003dac:	eb1b 0509 	adds.w	r5, fp, r9
 8003db0:	eb4c 060a 	adc.w	r6, ip, sl
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	4619      	mov	r1, r3
 8003dba:	f04f 0200 	mov.w	r2, #0
 8003dbe:	f04f 0300 	mov.w	r3, #0
 8003dc2:	f04f 0400 	mov.w	r4, #0
 8003dc6:	0094      	lsls	r4, r2, #2
 8003dc8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003dcc:	008b      	lsls	r3, r1, #2
 8003dce:	461a      	mov	r2, r3
 8003dd0:	4623      	mov	r3, r4
 8003dd2:	4628      	mov	r0, r5
 8003dd4:	4631      	mov	r1, r6
 8003dd6:	f7fc f9ff 	bl	80001d8 <__aeabi_uldivmod>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	460c      	mov	r4, r1
 8003dde:	461a      	mov	r2, r3
 8003de0:	4b9a      	ldr	r3, [pc, #616]	; (800404c <UART_SetConfig+0x6f4>)
 8003de2:	fba3 1302 	umull	r1, r3, r3, r2
 8003de6:	095b      	lsrs	r3, r3, #5
 8003de8:	2164      	movs	r1, #100	; 0x64
 8003dea:	fb01 f303 	mul.w	r3, r1, r3
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	011b      	lsls	r3, r3, #4
 8003df2:	3332      	adds	r3, #50	; 0x32
 8003df4:	4a95      	ldr	r2, [pc, #596]	; (800404c <UART_SetConfig+0x6f4>)
 8003df6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dfa:	095b      	lsrs	r3, r3, #5
 8003dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e00:	4498      	add	r8, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	469b      	mov	fp, r3
 8003e06:	f04f 0c00 	mov.w	ip, #0
 8003e0a:	46d9      	mov	r9, fp
 8003e0c:	46e2      	mov	sl, ip
 8003e0e:	eb19 0309 	adds.w	r3, r9, r9
 8003e12:	eb4a 040a 	adc.w	r4, sl, sl
 8003e16:	4699      	mov	r9, r3
 8003e18:	46a2      	mov	sl, r4
 8003e1a:	eb19 090b 	adds.w	r9, r9, fp
 8003e1e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e22:	f04f 0100 	mov.w	r1, #0
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e36:	4689      	mov	r9, r1
 8003e38:	4692      	mov	sl, r2
 8003e3a:	eb1b 0509 	adds.w	r5, fp, r9
 8003e3e:	eb4c 060a 	adc.w	r6, ip, sl
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4619      	mov	r1, r3
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	f04f 0400 	mov.w	r4, #0
 8003e54:	0094      	lsls	r4, r2, #2
 8003e56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e5a:	008b      	lsls	r3, r1, #2
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4623      	mov	r3, r4
 8003e60:	4628      	mov	r0, r5
 8003e62:	4631      	mov	r1, r6
 8003e64:	f7fc f9b8 	bl	80001d8 <__aeabi_uldivmod>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4b77      	ldr	r3, [pc, #476]	; (800404c <UART_SetConfig+0x6f4>)
 8003e70:	fba3 1302 	umull	r1, r3, r3, r2
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	2164      	movs	r1, #100	; 0x64
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	3332      	adds	r3, #50	; 0x32
 8003e82:	4a72      	ldr	r2, [pc, #456]	; (800404c <UART_SetConfig+0x6f4>)
 8003e84:	fba2 2303 	umull	r2, r3, r2, r3
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	f003 020f 	and.w	r2, r3, #15
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4442      	add	r2, r8
 8003e94:	609a      	str	r2, [r3, #8]
 8003e96:	e0d0      	b.n	800403a <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e98:	f7fe fb0a 	bl	80024b0 <HAL_RCC_GetPCLK1Freq>
 8003e9c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	469a      	mov	sl, r3
 8003ea2:	f04f 0b00 	mov.w	fp, #0
 8003ea6:	46d0      	mov	r8, sl
 8003ea8:	46d9      	mov	r9, fp
 8003eaa:	eb18 0308 	adds.w	r3, r8, r8
 8003eae:	eb49 0409 	adc.w	r4, r9, r9
 8003eb2:	4698      	mov	r8, r3
 8003eb4:	46a1      	mov	r9, r4
 8003eb6:	eb18 080a 	adds.w	r8, r8, sl
 8003eba:	eb49 090b 	adc.w	r9, r9, fp
 8003ebe:	f04f 0100 	mov.w	r1, #0
 8003ec2:	f04f 0200 	mov.w	r2, #0
 8003ec6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003eca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ece:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ed2:	4688      	mov	r8, r1
 8003ed4:	4691      	mov	r9, r2
 8003ed6:	eb1a 0508 	adds.w	r5, sl, r8
 8003eda:	eb4b 0609 	adc.w	r6, fp, r9
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	f04f 0200 	mov.w	r2, #0
 8003ee8:	f04f 0300 	mov.w	r3, #0
 8003eec:	f04f 0400 	mov.w	r4, #0
 8003ef0:	0094      	lsls	r4, r2, #2
 8003ef2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ef6:	008b      	lsls	r3, r1, #2
 8003ef8:	461a      	mov	r2, r3
 8003efa:	4623      	mov	r3, r4
 8003efc:	4628      	mov	r0, r5
 8003efe:	4631      	mov	r1, r6
 8003f00:	f7fc f96a 	bl	80001d8 <__aeabi_uldivmod>
 8003f04:	4603      	mov	r3, r0
 8003f06:	460c      	mov	r4, r1
 8003f08:	461a      	mov	r2, r3
 8003f0a:	4b50      	ldr	r3, [pc, #320]	; (800404c <UART_SetConfig+0x6f4>)
 8003f0c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	469b      	mov	fp, r3
 8003f1a:	f04f 0c00 	mov.w	ip, #0
 8003f1e:	46d9      	mov	r9, fp
 8003f20:	46e2      	mov	sl, ip
 8003f22:	eb19 0309 	adds.w	r3, r9, r9
 8003f26:	eb4a 040a 	adc.w	r4, sl, sl
 8003f2a:	4699      	mov	r9, r3
 8003f2c:	46a2      	mov	sl, r4
 8003f2e:	eb19 090b 	adds.w	r9, r9, fp
 8003f32:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003f36:	f04f 0100 	mov.w	r1, #0
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f42:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f46:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f4a:	4689      	mov	r9, r1
 8003f4c:	4692      	mov	sl, r2
 8003f4e:	eb1b 0509 	adds.w	r5, fp, r9
 8003f52:	eb4c 060a 	adc.w	r6, ip, sl
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	f04f 0400 	mov.w	r4, #0
 8003f68:	0094      	lsls	r4, r2, #2
 8003f6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003f6e:	008b      	lsls	r3, r1, #2
 8003f70:	461a      	mov	r2, r3
 8003f72:	4623      	mov	r3, r4
 8003f74:	4628      	mov	r0, r5
 8003f76:	4631      	mov	r1, r6
 8003f78:	f7fc f92e 	bl	80001d8 <__aeabi_uldivmod>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	460c      	mov	r4, r1
 8003f80:	461a      	mov	r2, r3
 8003f82:	4b32      	ldr	r3, [pc, #200]	; (800404c <UART_SetConfig+0x6f4>)
 8003f84:	fba3 1302 	umull	r1, r3, r3, r2
 8003f88:	095b      	lsrs	r3, r3, #5
 8003f8a:	2164      	movs	r1, #100	; 0x64
 8003f8c:	fb01 f303 	mul.w	r3, r1, r3
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	3332      	adds	r3, #50	; 0x32
 8003f96:	4a2d      	ldr	r2, [pc, #180]	; (800404c <UART_SetConfig+0x6f4>)
 8003f98:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9c:	095b      	lsrs	r3, r3, #5
 8003f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fa2:	4498      	add	r8, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	469b      	mov	fp, r3
 8003fa8:	f04f 0c00 	mov.w	ip, #0
 8003fac:	46d9      	mov	r9, fp
 8003fae:	46e2      	mov	sl, ip
 8003fb0:	eb19 0309 	adds.w	r3, r9, r9
 8003fb4:	eb4a 040a 	adc.w	r4, sl, sl
 8003fb8:	4699      	mov	r9, r3
 8003fba:	46a2      	mov	sl, r4
 8003fbc:	eb19 090b 	adds.w	r9, r9, fp
 8003fc0:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003fc4:	f04f 0100 	mov.w	r1, #0
 8003fc8:	f04f 0200 	mov.w	r2, #0
 8003fcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fd0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003fd4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003fd8:	4689      	mov	r9, r1
 8003fda:	4692      	mov	sl, r2
 8003fdc:	eb1b 0509 	adds.w	r5, fp, r9
 8003fe0:	eb4c 060a 	adc.w	r6, ip, sl
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	f04f 0200 	mov.w	r2, #0
 8003fee:	f04f 0300 	mov.w	r3, #0
 8003ff2:	f04f 0400 	mov.w	r4, #0
 8003ff6:	0094      	lsls	r4, r2, #2
 8003ff8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ffc:	008b      	lsls	r3, r1, #2
 8003ffe:	461a      	mov	r2, r3
 8004000:	4623      	mov	r3, r4
 8004002:	4628      	mov	r0, r5
 8004004:	4631      	mov	r1, r6
 8004006:	f7fc f8e7 	bl	80001d8 <__aeabi_uldivmod>
 800400a:	4603      	mov	r3, r0
 800400c:	460c      	mov	r4, r1
 800400e:	461a      	mov	r2, r3
 8004010:	4b0e      	ldr	r3, [pc, #56]	; (800404c <UART_SetConfig+0x6f4>)
 8004012:	fba3 1302 	umull	r1, r3, r3, r2
 8004016:	095b      	lsrs	r3, r3, #5
 8004018:	2164      	movs	r1, #100	; 0x64
 800401a:	fb01 f303 	mul.w	r3, r1, r3
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	011b      	lsls	r3, r3, #4
 8004022:	3332      	adds	r3, #50	; 0x32
 8004024:	4a09      	ldr	r2, [pc, #36]	; (800404c <UART_SetConfig+0x6f4>)
 8004026:	fba2 2303 	umull	r2, r3, r2, r3
 800402a:	095b      	lsrs	r3, r3, #5
 800402c:	f003 020f 	and.w	r2, r3, #15
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4442      	add	r2, r8
 8004036:	609a      	str	r2, [r3, #8]
}
 8004038:	e7ff      	b.n	800403a <UART_SetConfig+0x6e2>
 800403a:	bf00      	nop
 800403c:	3714      	adds	r7, #20
 800403e:	46bd      	mov	sp, r7
 8004040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004044:	40011000 	.word	0x40011000
 8004048:	40011400 	.word	0x40011400
 800404c:	51eb851f 	.word	0x51eb851f

08004050 <__libc_init_array>:
 8004050:	b570      	push	{r4, r5, r6, lr}
 8004052:	4e0d      	ldr	r6, [pc, #52]	; (8004088 <__libc_init_array+0x38>)
 8004054:	4c0d      	ldr	r4, [pc, #52]	; (800408c <__libc_init_array+0x3c>)
 8004056:	1ba4      	subs	r4, r4, r6
 8004058:	10a4      	asrs	r4, r4, #2
 800405a:	2500      	movs	r5, #0
 800405c:	42a5      	cmp	r5, r4
 800405e:	d109      	bne.n	8004074 <__libc_init_array+0x24>
 8004060:	4e0b      	ldr	r6, [pc, #44]	; (8004090 <__libc_init_array+0x40>)
 8004062:	4c0c      	ldr	r4, [pc, #48]	; (8004094 <__libc_init_array+0x44>)
 8004064:	f000 f820 	bl	80040a8 <_init>
 8004068:	1ba4      	subs	r4, r4, r6
 800406a:	10a4      	asrs	r4, r4, #2
 800406c:	2500      	movs	r5, #0
 800406e:	42a5      	cmp	r5, r4
 8004070:	d105      	bne.n	800407e <__libc_init_array+0x2e>
 8004072:	bd70      	pop	{r4, r5, r6, pc}
 8004074:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004078:	4798      	blx	r3
 800407a:	3501      	adds	r5, #1
 800407c:	e7ee      	b.n	800405c <__libc_init_array+0xc>
 800407e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004082:	4798      	blx	r3
 8004084:	3501      	adds	r5, #1
 8004086:	e7f2      	b.n	800406e <__libc_init_array+0x1e>
 8004088:	080040ec 	.word	0x080040ec
 800408c:	080040ec 	.word	0x080040ec
 8004090:	080040ec 	.word	0x080040ec
 8004094:	080040f0 	.word	0x080040f0

08004098 <memset>:
 8004098:	4402      	add	r2, r0
 800409a:	4603      	mov	r3, r0
 800409c:	4293      	cmp	r3, r2
 800409e:	d100      	bne.n	80040a2 <memset+0xa>
 80040a0:	4770      	bx	lr
 80040a2:	f803 1b01 	strb.w	r1, [r3], #1
 80040a6:	e7f9      	b.n	800409c <memset+0x4>

080040a8 <_init>:
 80040a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040aa:	bf00      	nop
 80040ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ae:	bc08      	pop	{r3}
 80040b0:	469e      	mov	lr, r3
 80040b2:	4770      	bx	lr

080040b4 <_fini>:
 80040b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040b6:	bf00      	nop
 80040b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ba:	bc08      	pop	{r3}
 80040bc:	469e      	mov	lr, r3
 80040be:	4770      	bx	lr
